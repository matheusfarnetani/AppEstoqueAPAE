{
	"info": {
		"_postman_id": "8ee47432-8412-474f-8522-cadd3a730211",
		"name": "AppEstoqueAPAE",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "37631720"
	},
	"item": [
		{
			"name": "Logar admin",
			"item": [
				{
					"name": "Logar Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Obtendo a resposta JSON\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"// Verificar se a resposta contém o campo `token`\r",
									"pm.test(\"A resposta contém o campo token\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"token\");\r",
									"});\r",
									"\r",
									"// Definir a variável `token` no ambiente (apenas se o campo token estiver presente)\r",
									"if (jsonData.token) {\r",
									"    pm.environment.set(\"token\", jsonData.token);\r",
									"}\r",
									"\r",
									"// Teste do tempo de resposta\r",
									"pm.test(\"Tempo de resposta menor que 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// Teste do status da requisição e do sucesso da operação\r",
									"pm.test(\"Status da requisição é 200 e contém mensagem de sucesso\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(jsonData.success).to.eql(true);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"admin@app.com\",\r\n    \"password\": \"admin\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{link}}/users/login",
							"host": [
								"{{link}}"
							],
							"path": [
								"users",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "Get Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verificar se o status da requisição é 200 OK\r",
									"pm.test(\"Status da requisição é 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Verificar se o JSON de resposta contém \"success\": true\r",
									"pm.test(\"A resposta contém success igual a true\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"success\", true);\r",
									"});\r",
									"\r",
									"// Verificar se o tempo de resposta está abaixo de um limite (ex: 500ms)\r",
									"let limiteTempoResposta = 500; // Você pode ajustar o valor limite conforme necessário\r",
									"pm.test(\"Tempo de resposta menor que \" + limiteTempoResposta + \"ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(limiteTempoResposta);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{link}}/users",
							"host": [
								"{{link}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User by ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{link}}/users/1",
							"host": [
								"{{link}}"
							],
							"path": [
								"users",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Obtendo a resposta JSON e atualizando a variavel\r",
									"let jsonData = pm.response.json();\r",
									"pm.environment.set(\"id_user\", jsonData.id);\r",
									"\r",
									"// Verificar se o status da requisição é 200 OK\r",
									"pm.test(\"Status da requisição é 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Verificar se o JSON de resposta contém \"success\": true\r",
									"pm.test(\"A resposta contém success igual a true\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"success\", true);\r",
									"});\r",
									"\r",
									"// Verificar se o tempo de resposta está abaixo de um limite (ex: 500ms)\r",
									"let limiteTempoResposta = 500; // Você pode ajustar o valor limite conforme necessário\r",
									"pm.test(\"Tempo de resposta menor que \" + limiteTempoResposta + \"ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(limiteTempoResposta);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"novaaaa\",\r\n    \"email\": \"novaaaa@test.com\",\r\n    \"password\": \"test12345\",\r\n    \"funcao\": \"nutricionista\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{link}}/users/create",
							"host": [
								"{{link}}"
							],
							"path": [
								"users",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verificar se o status da requisição é 200 OK\r",
									"pm.test(\"Status da requisição é 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Verificar se o JSON de resposta contém \"success\": true\r",
									"pm.test(\"A resposta contém success igual a true\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"success\", true);\r",
									"});\r",
									"\r",
									"// Verificar se o tempo de resposta está abaixo de um limite (ex: 500ms)\r",
									"let limiteTempoResposta = 500; // Você pode ajustar o valor limite conforme necessário\r",
									"pm.test(\"Tempo de resposta menor que \" + limiteTempoResposta + \"ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(limiteTempoResposta);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"test@testador.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{link}}/users/{{id_user}}",
							"host": [
								"{{link}}"
							],
							"path": [
								"users",
								"{{id_user}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verificar se o status da requisição é 200 OK\r",
									"pm.test(\"Status da requisição é 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Verificar se o JSON de resposta contém \"success\": true\r",
									"pm.test(\"A resposta contém success igual a true\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"success\", true);\r",
									"});\r",
									"\r",
									"// Verificar se o tempo de resposta está abaixo de um limite (ex: 500ms)\r",
									"let limiteTempoResposta = 500; // Você pode ajustar o valor limite conforme necessário\r",
									"pm.test(\"Tempo de resposta menor que \" + limiteTempoResposta + \"ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(limiteTempoResposta);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{link}}/users/{{id_user}}",
							"host": [
								"{{link}}"
							],
							"path": [
								"users",
								"{{id_user}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Enderecos",
			"item": [
				{
					"name": "Get Enderecos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verificar se o status da requisição é 200 OK\r",
									"pm.test(\"Status da requisição é 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Verificar se o JSON de resposta contém \"success\": true\r",
									"pm.test(\"A resposta contém success igual a true\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"success\", true);\r",
									"});\r",
									"\r",
									"// Verificar se o tempo de resposta está abaixo de um limite (ex: 500ms)\r",
									"let limiteTempoResposta = 500; // Você pode ajustar o valor limite conforme necessário\r",
									"pm.test(\"Tempo de resposta menor que \" + limiteTempoResposta + \"ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(limiteTempoResposta);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{link}}/enderecos",
							"host": [
								"{{link}}"
							],
							"path": [
								"enderecos"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Enderecos by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verificar se o status da requisição é 200 OK\r",
									"pm.test(\"Status da requisição é 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Verificar se o JSON de resposta contém \"success\": true\r",
									"pm.test(\"A resposta contém success igual a true\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"success\", true);\r",
									"});\r",
									"\r",
									"// Verificar se o tempo de resposta está abaixo de um limite (ex: 500ms)\r",
									"let limiteTempoResposta = 500; // Você pode ajustar o valor limite conforme necessário\r",
									"pm.test(\"Tempo de resposta menor que \" + limiteTempoResposta + \"ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(limiteTempoResposta);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{link}}/enderecos/1",
							"host": [
								"{{link}}"
							],
							"path": [
								"enderecos",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Enderecos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Obtendo a resposta JSON e atualizando a variavel\r",
									"let jsonData = pm.response.json();\r",
									"pm.environment.set(\"id_enderecos\", jsonData.id);\r",
									"\r",
									"// Verificar se o status da requisição é 200 OK\r",
									"pm.test(\"Status da requisição é 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Verificar se o JSON de resposta contém \"success\": true\r",
									"pm.test(\"A resposta contém success igual a true\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"success\", true);\r",
									"});\r",
									"\r",
									"// Verificar se o tempo de resposta está abaixo de um limite (ex: 500ms)\r",
									"let limiteTempoResposta = 500; // Você pode ajustar o valor limite conforme necessário\r",
									"pm.test(\"Tempo de resposta menor que \" + limiteTempoResposta + \"ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(limiteTempoResposta);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"tipo\": \"Residencial\",\r\n    \"logradouro\": \"Rua dos Testes\",\r\n    \"numero\": \"123\",\r\n    \"complemento\": \"Apt Teste\",\r\n    \"bairro\": \"Jardim Testador\",\r\n    \"cidade\": \"Testalandia\",\r\n    \"estado\": \"TS\",\r\n    \"cep\": \"01234567\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{link}}/enderecos/create",
							"host": [
								"{{link}}"
							],
							"path": [
								"enderecos",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Enderecos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verificar se o status da requisição é 200 OK\r",
									"pm.test(\"Status da requisição é 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Verificar se o JSON de resposta contém \"success\": true\r",
									"pm.test(\"A resposta contém success igual a true\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"success\", true);\r",
									"});\r",
									"\r",
									"// Verificar se o tempo de resposta está abaixo de um limite (ex: 500ms)\r",
									"let limiteTempoResposta = 500; // Você pode ajustar o valor limite conforme necessário\r",
									"pm.test(\"Tempo de resposta menor que \" + limiteTempoResposta + \"ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(limiteTempoResposta);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"numero\": \"555\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{link}}/enderecos/{{id_enderecos}}",
							"host": [
								"{{link}}"
							],
							"path": [
								"enderecos",
								"{{id_enderecos}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Enderecos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verificar se o status da requisição é 200 OK\r",
									"pm.test(\"Status da requisição é 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Verificar se o JSON de resposta contém \"success\": true\r",
									"pm.test(\"A resposta contém success igual a true\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"success\", true);\r",
									"});\r",
									"\r",
									"// Verificar se o tempo de resposta está abaixo de um limite (ex: 500ms)\r",
									"let limiteTempoResposta = 500; // Você pode ajustar o valor limite conforme necessário\r",
									"pm.test(\"Tempo de resposta menor que \" + limiteTempoResposta + \"ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(limiteTempoResposta);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{link}}/enderecos/{{id_enderecos}}",
							"host": [
								"{{link}}"
							],
							"path": [
								"enderecos",
								"{{id_enderecos}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Telefones",
			"item": [
				{
					"name": "Get Telefones",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verificar se o status da requisição é 200 OK\r",
									"pm.test(\"Status da requisição é 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Verificar se o JSON de resposta contém \"success\": true\r",
									"pm.test(\"A resposta contém success igual a true\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"success\", true);\r",
									"});\r",
									"\r",
									"// Verificar se o tempo de resposta está abaixo de um limite (ex: 500ms)\r",
									"let limiteTempoResposta = 500; // Você pode ajustar o valor limite conforme necessário\r",
									"pm.test(\"Tempo de resposta menor que \" + limiteTempoResposta + \"ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(limiteTempoResposta);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{link}}/telefones",
							"host": [
								"{{link}}"
							],
							"path": [
								"telefones"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Telefones by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verificar se o status da requisição é 200 OK\r",
									"pm.test(\"Status da requisição é 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Verificar se o JSON de resposta contém \"success\": true\r",
									"pm.test(\"A resposta contém success igual a true\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"success\", true);\r",
									"});\r",
									"\r",
									"// Verificar se o tempo de resposta está abaixo de um limite (ex: 500ms)\r",
									"let limiteTempoResposta = 500; // Você pode ajustar o valor limite conforme necessário\r",
									"pm.test(\"Tempo de resposta menor que \" + limiteTempoResposta + \"ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(limiteTempoResposta);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{link}}/telefones/1",
							"host": [
								"{{link}}"
							],
							"path": [
								"telefones",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Telefones",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Obtendo a resposta JSON e atualizando a variavel\r",
									"let jsonData = pm.response.json();\r",
									"pm.environment.set(\"id_telefones\", jsonData.id);\r",
									"\r",
									"// Verificar se o status da requisição é 200 OK\r",
									"pm.test(\"Status da requisição é 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Verificar se o JSON de resposta contém \"success\": true\r",
									"pm.test(\"A resposta contém success igual a true\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"success\", true);\r",
									"});\r",
									"\r",
									"// Verificar se o tempo de resposta está abaixo de um limite (ex: 500ms)\r",
									"let limiteTempoResposta = 500; // Você pode ajustar o valor limite conforme necessário\r",
									"pm.test(\"Tempo de resposta menor que \" + limiteTempoResposta + \"ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(limiteTempoResposta);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"tipo\": \"celular\",\r\n    \"ddi\": \"+55\",\r\n    \"ddd\": \"19\",\r\n    \"numero\": \"912344321\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{link}}/telefones/create",
							"host": [
								"{{link}}"
							],
							"path": [
								"telefones",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Telefones",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verificar se o status da requisição é 200 OK\r",
									"pm.test(\"Status da requisição é 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Verificar se o JSON de resposta contém \"success\": true\r",
									"pm.test(\"A resposta contém success igual a true\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"success\", true);\r",
									"});\r",
									"\r",
									"// Verificar se o tempo de resposta está abaixo de um limite (ex: 500ms)\r",
									"let limiteTempoResposta = 500; // Você pode ajustar o valor limite conforme necessário\r",
									"pm.test(\"Tempo de resposta menor que \" + limiteTempoResposta + \"ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(limiteTempoResposta);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"numero\": \"912344329\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{link}}/telefones/{{id_telefones}}",
							"host": [
								"{{link}}"
							],
							"path": [
								"telefones",
								"{{id_telefones}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Telefones",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verificar se o status da requisição é 200 OK\r",
									"pm.test(\"Status da requisição é 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Verificar se o JSON de resposta contém \"success\": true\r",
									"pm.test(\"A resposta contém success igual a true\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"success\", true);\r",
									"});\r",
									"\r",
									"// Verificar se o tempo de resposta está abaixo de um limite (ex: 500ms)\r",
									"let limiteTempoResposta = 500; // Você pode ajustar o valor limite conforme necessário\r",
									"pm.test(\"Tempo de resposta menor que \" + limiteTempoResposta + \"ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(limiteTempoResposta);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{link}}/telefones/{{id_telefones}}",
							"host": [
								"{{link}}"
							],
							"path": [
								"telefones",
								"{{id_telefones}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Pessoas",
			"item": [
				{
					"name": "Get Pessoas",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verificar se o status da requisição é 200 OK\r",
									"pm.test(\"Status da requisição é 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Verificar se o JSON de resposta contém \"success\": true\r",
									"pm.test(\"A resposta contém success igual a true\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"success\", true);\r",
									"});\r",
									"\r",
									"// Verificar se o tempo de resposta está abaixo de um limite (ex: 500ms)\r",
									"let limiteTempoResposta = 500; // Você pode ajustar o valor limite conforme necessário\r",
									"pm.test(\"Tempo de resposta menor que \" + limiteTempoResposta + \"ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(limiteTempoResposta);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{link}}/pessoas",
							"host": [
								"{{link}}"
							],
							"path": [
								"pessoas"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Pessoas by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verificar se o status da requisição é 200 OK\r",
									"pm.test(\"Status da requisição é 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Verificar se o JSON de resposta contém \"success\": true\r",
									"pm.test(\"A resposta contém success igual a true\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"success\", true);\r",
									"});\r",
									"\r",
									"// Verificar se o tempo de resposta está abaixo de um limite (ex: 500ms)\r",
									"let limiteTempoResposta = 500; // Você pode ajustar o valor limite conforme necessário\r",
									"pm.test(\"Tempo de resposta menor que \" + limiteTempoResposta + \"ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(limiteTempoResposta);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{link}}/pessoas/1",
							"host": [
								"{{link}}"
							],
							"path": [
								"pessoas",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Pessoas Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verificar se o status da requisição é 200 OK\r",
									"pm.test(\"Status da requisição é 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Verificar se o JSON de resposta contém \"success\": true\r",
									"pm.test(\"A resposta contém success igual a true\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"success\", true);\r",
									"});\r",
									"\r",
									"// Verificar se o tempo de resposta está abaixo de um limite (ex: 500ms)\r",
									"let limiteTempoResposta = 500; // Você pode ajustar o valor limite conforme necessário\r",
									"pm.test(\"Tempo de resposta menor que \" + limiteTempoResposta + \"ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(limiteTempoResposta);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{link}}/pessoas/1/details",
							"host": [
								"{{link}}"
							],
							"path": [
								"pessoas",
								"1",
								"details"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Pessoas Fisica",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Obtendo a resposta JSON e atualizando a variavel\r",
									"let jsonData = pm.response.json();\r",
									"pm.environment.set(\"id_pessoas_f\", jsonData.id);\r",
									"\r",
									"// Verificar se o status da requisição é 200 OK\r",
									"pm.test(\"Status da requisição é 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Verificar se o JSON de resposta contém \"success\": true\r",
									"pm.test(\"A resposta contém success igual a true\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"success\", true);\r",
									"});\r",
									"\r",
									"// Verificar se o tempo de resposta está abaixo de um limite (ex: 500ms)\r",
									"let limiteTempoResposta = 500; // Você pode ajustar o valor limite conforme necessário\r",
									"pm.test(\"Tempo de resposta menor que \" + limiteTempoResposta + \"ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(limiteTempoResposta);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"tipo_pessoa\": 0,\r\n    \"nome\": \"Nova Pessoa Fisica\",\r\n    \"documento\": \"29000003008\",\r\n    \"data_nascimento\": \"1980-05-15\",\r\n    \"email\": \"nova_pessoaF@example.com\",\r\n    \"endereco_id\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{link}}/pessoas/create",
							"host": [
								"{{link}}"
							],
							"path": [
								"pessoas",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Pessoas Juridica",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Obtendo a resposta JSON e atualizando a variavel\r",
									"let jsonData = pm.response.json();\r",
									"pm.environment.set(\"id_pessoas_j\", jsonData.id);\r",
									"\r",
									"// Verificar se o status da requisição é 200 OK\r",
									"pm.test(\"Status da requisição é 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Verificar se o JSON de resposta contém \"success\": true\r",
									"pm.test(\"A resposta contém success igual a true\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"success\", true);\r",
									"});\r",
									"\r",
									"// Verificar se o tempo de resposta está abaixo de um limite (ex: 500ms)\r",
									"let limiteTempoResposta = 500; // Você pode ajustar o valor limite conforme necessário\r",
									"pm.test(\"Tempo de resposta menor que \" + limiteTempoResposta + \"ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(limiteTempoResposta);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"tipo_pessoa\": 1,\r\n    \"nome\": \"Nova Pessoa Fisica\",\r\n    \"documento\": \"46993452000112\",\r\n    \"data_nascimento\": \"1980-05-15\",\r\n    \"email\": \"nova_pessoaJ@example.com\",\r\n    \"endereco_id\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{link}}/pessoas/create",
							"host": [
								"{{link}}"
							],
							"path": [
								"pessoas",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Pessoas",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verificar se o status da requisição é 200 OK\r",
									"pm.test(\"Status da requisição é 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Verificar se o JSON de resposta contém \"success\": true\r",
									"pm.test(\"A resposta contém success igual a true\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"success\", true);\r",
									"});\r",
									"\r",
									"// Verificar se o tempo de resposta está abaixo de um limite (ex: 500ms)\r",
									"let limiteTempoResposta = 500; // Você pode ajustar o valor limite conforme necessário\r",
									"pm.test(\"Tempo de resposta menor que \" + limiteTempoResposta + \"ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(limiteTempoResposta);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nome\": \"Nova Pessoa Juridica\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{link}}/pessoas/{{id_pessoas_j}}",
							"host": [
								"{{link}}"
							],
							"path": [
								"pessoas",
								"{{id_pessoas_j}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Pessoas",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verificar se o status da requisição é 200 OK\r",
									"pm.test(\"Status da requisição é 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Verificar se o JSON de resposta contém \"success\": true\r",
									"pm.test(\"A resposta contém success igual a true\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"success\", true);\r",
									"});\r",
									"\r",
									"// Verificar se o tempo de resposta está abaixo de um limite (ex: 500ms)\r",
									"let limiteTempoResposta = 500; // Você pode ajustar o valor limite conforme necessário\r",
									"pm.test(\"Tempo de resposta menor que \" + limiteTempoResposta + \"ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(limiteTempoResposta);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{link}}/pessoas/{{id_pessoas_j}}",
							"host": [
								"{{link}}"
							],
							"path": [
								"pessoas",
								"{{id_pessoas_j}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Doacoes",
			"item": [
				{
					"name": "Get Doacoes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verificar se o status da requisição é 200 OK\r",
									"pm.test(\"Status da requisição é 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Verificar se o JSON de resposta contém \"success\": true\r",
									"pm.test(\"A resposta contém success igual a true\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"success\", true);\r",
									"});\r",
									"\r",
									"// Verificar se o tempo de resposta está abaixo de um limite (ex: 500ms)\r",
									"let limiteTempoResposta = 500; // Você pode ajustar o valor limite conforme necessário\r",
									"pm.test(\"Tempo de resposta menor que \" + limiteTempoResposta + \"ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(limiteTempoResposta);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{link}}/doacoes",
							"host": [
								"{{link}}"
							],
							"path": [
								"doacoes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Doacoes by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verificar se o status da requisição é 200 OK\r",
									"pm.test(\"Status da requisição é 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Verificar se o JSON de resposta contém \"success\": true\r",
									"pm.test(\"A resposta contém success igual a true\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"success\", true);\r",
									"});\r",
									"\r",
									"// Verificar se o tempo de resposta está abaixo de um limite (ex: 500ms)\r",
									"let limiteTempoResposta = 500; // Você pode ajustar o valor limite conforme necessário\r",
									"pm.test(\"Tempo de resposta menor que \" + limiteTempoResposta + \"ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(limiteTempoResposta);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{link}}/doacoes/1",
							"host": [
								"{{link}}"
							],
							"path": [
								"doacoes",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Doacoes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Obtendo a resposta JSON e atualizando a variavel\r",
									"let jsonData = pm.response.json();\r",
									"pm.environment.set(\"id_doacoes\", jsonData.id);\r",
									"\r",
									"// Verificar se o status da requisição é 200 OK\r",
									"pm.test(\"Status da requisição é 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Verificar se o JSON de resposta contém \"success\": true\r",
									"pm.test(\"A resposta contém success igual a true\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"success\", true);\r",
									"});\r",
									"\r",
									"// Verificar se o tempo de resposta está abaixo de um limite (ex: 500ms)\r",
									"let limiteTempoResposta = 500; // Você pode ajustar o valor limite conforme necessário\r",
									"pm.test(\"Tempo de resposta menor que \" + limiteTempoResposta + \"ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(limiteTempoResposta);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"pessoas_id\": 1,\r\n  \"descricao\": \"Donation for food supplies\",\r\n  \"data_doacao\": \"2024-09-19\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{link}}/doacoes/create",
							"host": [
								"{{link}}"
							],
							"path": [
								"doacoes",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Doacoes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verificar se o status da requisição é 200 OK\r",
									"pm.test(\"Status da requisição é 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Verificar se o JSON de resposta contém \"success\": true\r",
									"pm.test(\"A resposta contém success igual a true\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"success\", true);\r",
									"});\r",
									"\r",
									"// Verificar se o tempo de resposta está abaixo de um limite (ex: 500ms)\r",
									"let limiteTempoResposta = 500; // Você pode ajustar o valor limite conforme necessário\r",
									"pm.test(\"Tempo de resposta menor que \" + limiteTempoResposta + \"ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(limiteTempoResposta);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"descricao\": \"Updated donation description\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{link}}/doacoes/{{id_doacoes}}",
							"host": [
								"{{link}}"
							],
							"path": [
								"doacoes",
								"{{id_doacoes}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Doacoes",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{link}}/doacoes/{{id_doacoes}}",
							"host": [
								"{{link}}"
							],
							"path": [
								"doacoes",
								"{{id_doacoes}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link Pedido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verificar se o status da requisição é 200 OK\r",
									"pm.test(\"Status da requisição é 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Verificar se o JSON de resposta contém \"success\": true\r",
									"pm.test(\"A resposta contém success igual a true\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"success\", true);\r",
									"});\r",
									"\r",
									"// Verificar se o tempo de resposta está abaixo de um limite (ex: 500ms)\r",
									"let limiteTempoResposta = 500; // Você pode ajustar o valor limite conforme necessário\r",
									"pm.test(\"Tempo de resposta menor que \" + limiteTempoResposta + \"ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(limiteTempoResposta);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"doacoes_id\": 1,\r\n    \"pedidos_id\": 2\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{link}}/doacoes/linkPedido",
							"host": [
								"{{link}}"
							],
							"path": [
								"doacoes",
								"linkPedido"
							]
						}
					},
					"response": []
				},
				{
					"name": "Unlink Pedido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verificar se o status da requisição é 200 OK\r",
									"pm.test(\"Status da requisição é 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Verificar se o JSON de resposta contém \"success\": true\r",
									"pm.test(\"A resposta contém success igual a true\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"success\", true);\r",
									"});\r",
									"\r",
									"// Verificar se o tempo de resposta está abaixo de um limite (ex: 500ms)\r",
									"let limiteTempoResposta = 500; // Você pode ajustar o valor limite conforme necessário\r",
									"pm.test(\"Tempo de resposta menor que \" + limiteTempoResposta + \"ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(limiteTempoResposta);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"doacoes_id\": 1,\r\n    \"pedidos_id\": 2\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{link}}/doacoes/unlinkPedido",
							"host": [
								"{{link}}"
							],
							"path": [
								"doacoes",
								"unlinkPedido"
							]
						}
					},
					"response": []
				},
				{
					"name": "Find Pedidos of Doacao",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verificar se o status da requisição é 200 OK\r",
									"pm.test(\"Status da requisição é 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Verificar se o JSON de resposta contém \"success\": true\r",
									"pm.test(\"A resposta contém success igual a true\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"success\", true);\r",
									"});\r",
									"\r",
									"// Verificar se o tempo de resposta está abaixo de um limite (ex: 500ms)\r",
									"let limiteTempoResposta = 500; // Você pode ajustar o valor limite conforme necessário\r",
									"pm.test(\"Tempo de resposta menor que \" + limiteTempoResposta + \"ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(limiteTempoResposta);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{link}}/doacoes/1/pedidos",
							"host": [
								"{{link}}"
							],
							"path": [
								"doacoes",
								"1",
								"pedidos"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Pedidos",
			"item": [
				{
					"name": "Get Pedidos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verificar se o status da requisição é 200 OK\r",
									"pm.test(\"Status da requisição é 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Verificar se o JSON de resposta contém \"success\": true\r",
									"pm.test(\"A resposta contém success igual a true\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"success\", true);\r",
									"});\r",
									"\r",
									"// Verificar se o tempo de resposta está abaixo de um limite (ex: 500ms)\r",
									"let limiteTempoResposta = 500; // Você pode ajustar o valor limite conforme necessário\r",
									"pm.test(\"Tempo de resposta menor que \" + limiteTempoResposta + \"ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(limiteTempoResposta);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{link}}/pedidos",
							"host": [
								"{{link}}"
							],
							"path": [
								"pedidos"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Pedidos by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verificar se o status da requisição é 200 OK\r",
									"pm.test(\"Status da requisição é 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Verificar se o JSON de resposta contém \"success\": true\r",
									"pm.test(\"A resposta contém success igual a true\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"success\", true);\r",
									"});\r",
									"\r",
									"// Verificar se o tempo de resposta está abaixo de um limite (ex: 500ms)\r",
									"let limiteTempoResposta = 500; // Você pode ajustar o valor limite conforme necessário\r",
									"pm.test(\"Tempo de resposta menor que \" + limiteTempoResposta + \"ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(limiteTempoResposta);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{link}}/pedidos/1",
							"host": [
								"{{link}}"
							],
							"path": [
								"pedidos",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Pedidos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Obtendo a resposta JSON e atualizando a variavel\r",
									"let jsonData = pm.response.json();\r",
									"pm.environment.set(\"id_pedidos\", jsonData.id);\r",
									"\r",
									"// Verificar se o status da requisição é 200 OK\r",
									"pm.test(\"Status da requisição é 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Verificar se o JSON de resposta contém \"success\": true\r",
									"pm.test(\"A resposta contém success igual a true\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"success\", true);\r",
									"});\r",
									"\r",
									"// Verificar se o tempo de resposta está abaixo de um limite (ex: 500ms)\r",
									"let limiteTempoResposta = 500; // Você pode ajustar o valor limite conforme necessário\r",
									"pm.test(\"Tempo de resposta menor que \" + limiteTempoResposta + \"ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(limiteTempoResposta);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"usuarios_id\": 1,\r\n  \"pessoas_id\": 2,\r\n  \"descricao\": \"Order for food supplies\",\r\n  \"data_pedido\": \"2024-09-21 10:30:00\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{link}}/pedidos/create",
							"host": [
								"{{link}}"
							],
							"path": [
								"pedidos",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Pedidos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verificar se o status da requisição é 200 OK\r",
									"pm.test(\"Status da requisição é 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Verificar se o JSON de resposta contém \"success\": true\r",
									"pm.test(\"A resposta contém success igual a true\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"success\", true);\r",
									"});\r",
									"\r",
									"// Verificar se o tempo de resposta está abaixo de um limite (ex: 500ms)\r",
									"let limiteTempoResposta = 500; // Você pode ajustar o valor limite conforme necessário\r",
									"pm.test(\"Tempo de resposta menor que \" + limiteTempoResposta + \"ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(limiteTempoResposta);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"usuarios_id\": 1,\r\n  \"pessoas_id\": 2,\r\n  \"descricao\": \"Updated order description\",\r\n  \"data_pedido\": \"2024-09-22 09:00:00\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{link}}/pedidos/{{id_pedidos}}",
							"host": [
								"{{link}}"
							],
							"path": [
								"pedidos",
								"{{id_pedidos}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Pedidos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verificar se o status da requisição é 200 OK\r",
									"pm.test(\"Status da requisição é 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Verificar se o JSON de resposta contém \"success\": true\r",
									"pm.test(\"A resposta contém success igual a true\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"success\", true);\r",
									"});\r",
									"\r",
									"// Verificar se o tempo de resposta está abaixo de um limite (ex: 500ms)\r",
									"let limiteTempoResposta = 500; // Você pode ajustar o valor limite conforme necessário\r",
									"pm.test(\"Tempo de resposta menor que \" + limiteTempoResposta + \"ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(limiteTempoResposta);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{link}}/pedidos/{{id_pedidos}}",
							"host": [
								"{{link}}"
							],
							"path": [
								"pedidos",
								"{{id_pedidos}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link Doacao",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verificar se o status da requisição é 200 OK\r",
									"pm.test(\"Status da requisição é 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Verificar se o JSON de resposta contém \"success\": true\r",
									"pm.test(\"A resposta contém success igual a true\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"success\", true);\r",
									"});\r",
									"\r",
									"// Verificar se o tempo de resposta está abaixo de um limite (ex: 500ms)\r",
									"let limiteTempoResposta = 500; // Você pode ajustar o valor limite conforme necessário\r",
									"pm.test(\"Tempo de resposta menor que \" + limiteTempoResposta + \"ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(limiteTempoResposta);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"pedidos_id\": 2,\r\n    \"doacoes_id\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{link}}/pedidos/linkDoacao",
							"host": [
								"{{link}}"
							],
							"path": [
								"pedidos",
								"linkDoacao"
							]
						}
					},
					"response": []
				},
				{
					"name": "Unlink Doacao",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verificar se o status da requisição é 200 OK\r",
									"pm.test(\"Status da requisição é 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Verificar se o JSON de resposta contém \"success\": true\r",
									"pm.test(\"A resposta contém success igual a true\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"success\", true);\r",
									"});\r",
									"\r",
									"// Verificar se o tempo de resposta está abaixo de um limite (ex: 500ms)\r",
									"let limiteTempoResposta = 500; // Você pode ajustar o valor limite conforme necessário\r",
									"pm.test(\"Tempo de resposta menor que \" + limiteTempoResposta + \"ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(limiteTempoResposta);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"pedidos_id\": 2,\r\n    \"doacoes_id\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{link}}/pedidos/unlinkDoacao",
							"host": [
								"{{link}}"
							],
							"path": [
								"pedidos",
								"unlinkDoacao"
							]
						}
					},
					"response": []
				},
				{
					"name": "Find Doacoes of Pedidos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verificar se o status da requisição é 200 OK\r",
									"pm.test(\"Status da requisição é 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Verificar se o JSON de resposta contém \"success\": true\r",
									"pm.test(\"A resposta contém success igual a true\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"success\", true);\r",
									"});\r",
									"\r",
									"// Verificar se o tempo de resposta está abaixo de um limite (ex: 500ms)\r",
									"let limiteTempoResposta = 500; // Você pode ajustar o valor limite conforme necessário\r",
									"pm.test(\"Tempo de resposta menor que \" + limiteTempoResposta + \"ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(limiteTempoResposta);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{link}}/pedidos/1/doacoes",
							"host": [
								"{{link}}"
							],
							"path": [
								"pedidos",
								"1",
								"doacoes"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Itens Pedidos",
			"item": [
				{
					"name": "Get itens by Pedido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verificar se o status da requisição é 200 OK\r",
									"pm.test(\"Status da requisição é 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Verificar se o JSON de resposta contém \"success\": true\r",
									"pm.test(\"A resposta contém success igual a true\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"success\", true);\r",
									"});\r",
									"\r",
									"// Verificar se o tempo de resposta está abaixo de um limite (ex: 500ms)\r",
									"let limiteTempoResposta = 500; // Você pode ajustar o valor limite conforme necessário\r",
									"pm.test(\"Tempo de resposta menor que \" + limiteTempoResposta + \"ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(limiteTempoResposta);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{link}}/itens_pedidos/pedido/1",
							"host": [
								"{{link}}"
							],
							"path": [
								"itens_pedidos",
								"pedido",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get itens by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verificar se o status da requisição é 200 OK\r",
									"pm.test(\"Status da requisição é 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Verificar se o JSON de resposta contém \"success\": true\r",
									"pm.test(\"A resposta contém success igual a true\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"success\", true);\r",
									"});\r",
									"\r",
									"// Verificar se o tempo de resposta está abaixo de um limite (ex: 500ms)\r",
									"let limiteTempoResposta = 500; // Você pode ajustar o valor limite conforme necessário\r",
									"pm.test(\"Tempo de resposta menor que \" + limiteTempoResposta + \"ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(limiteTempoResposta);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{link}}/itens_pedidos/item/1",
							"host": [
								"{{link}}"
							],
							"path": [
								"itens_pedidos",
								"item",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Item",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Obtendo a resposta JSON e atualizando a variavel\r",
									"let jsonData = pm.response.json();\r",
									"pm.environment.set(\"id_item\", jsonData.id);\r",
									"\r",
									"// Verificar se o status da requisição é 200 OK\r",
									"pm.test(\"Status da requisição é 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Verificar se o JSON de resposta contém \"success\": true\r",
									"pm.test(\"A resposta contém success igual a true\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"success\", true);\r",
									"});\r",
									"\r",
									"// Verificar se o tempo de resposta está abaixo de um limite (ex: 500ms)\r",
									"let limiteTempoResposta = 500; // Você pode ajustar o valor limite conforme necessário\r",
									"pm.test(\"Tempo de resposta menor que \" + limiteTempoResposta + \"ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(limiteTempoResposta);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"pedidos_id\": 1,\r\n  \"insumos_id\": 1,\r\n  \"quantidade\": 10.5,\r\n  \"unidades_medida_id\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{link}}/itens_pedidos/create",
							"host": [
								"{{link}}"
							],
							"path": [
								"itens_pedidos",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Item",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verificar se o status da requisição é 200 OK\r",
									"pm.test(\"Status da requisição é 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Verificar se o JSON de resposta contém \"success\": true\r",
									"pm.test(\"A resposta contém success igual a true\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"success\", true);\r",
									"});\r",
									"\r",
									"// Verificar se o tempo de resposta está abaixo de um limite (ex: 500ms)\r",
									"let limiteTempoResposta = 500; // Você pode ajustar o valor limite conforme necessário\r",
									"pm.test(\"Tempo de resposta menor que \" + limiteTempoResposta + \"ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(limiteTempoResposta);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"insumos_id\": 2,\r\n  \"quantidade\": 20,\r\n  \"unidades_medida_id\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{link}}/itens_pedidos/{{id_item}}",
							"host": [
								"{{link}}"
							],
							"path": [
								"itens_pedidos",
								"{{id_item}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Item",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verificar se o status da requisição é 200 OK\r",
									"pm.test(\"Status da requisição é 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Verificar se o JSON de resposta contém \"success\": true\r",
									"pm.test(\"A resposta contém success igual a true\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"success\", true);\r",
									"});\r",
									"\r",
									"// Verificar se o tempo de resposta está abaixo de um limite (ex: 500ms)\r",
									"let limiteTempoResposta = 500; // Você pode ajustar o valor limite conforme necessário\r",
									"pm.test(\"Tempo de resposta menor que \" + limiteTempoResposta + \"ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(limiteTempoResposta);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{link}}/itens_pedidos/{{id_item}}",
							"host": [
								"{{link}}"
							],
							"path": [
								"itens_pedidos",
								"{{id_item}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Unidade de Medida",
			"item": [
				{
					"name": "Get Unidades Medida",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verificar se o status da requisição é 200 OK\r",
									"pm.test(\"Status da requisição é 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Verificar se o JSON de resposta contém \"success\": true\r",
									"pm.test(\"A resposta contém success igual a true\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"success\", true);\r",
									"});\r",
									"\r",
									"// Verificar se o tempo de resposta está abaixo de um limite (ex: 500ms)\r",
									"let limiteTempoResposta = 500; // Você pode ajustar o valor limite conforme necessário\r",
									"pm.test(\"Tempo de resposta menor que \" + limiteTempoResposta + \"ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(limiteTempoResposta);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{link}}/unidade_medida/",
							"host": [
								"{{link}}"
							],
							"path": [
								"unidade_medida",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Unidades Medida by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verificar se o status da requisição é 200 OK\r",
									"pm.test(\"Status da requisição é 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Verificar se o JSON de resposta contém \"success\": true\r",
									"pm.test(\"A resposta contém success igual a true\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"success\", true);\r",
									"});\r",
									"\r",
									"// Verificar se o tempo de resposta está abaixo de um limite (ex: 500ms)\r",
									"let limiteTempoResposta = 500; // Você pode ajustar o valor limite conforme necessário\r",
									"pm.test(\"Tempo de resposta menor que \" + limiteTempoResposta + \"ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(limiteTempoResposta);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{link}}/unidade_medida/1",
							"host": [
								"{{link}}"
							],
							"path": [
								"unidade_medida",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Unidade de Medida",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Obtendo a resposta JSON e atualizando a variavel\r",
									"let jsonData = pm.response.json();\r",
									"pm.environment.set(\"id_unidade_medida\", jsonData.id);\r",
									"\r",
									"// Verificar se o status da requisição é 200 OK\r",
									"pm.test(\"Status da requisição é 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Verificar se o JSON de resposta contém \"success\": true\r",
									"pm.test(\"A resposta contém success igual a true\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"success\", true);\r",
									"});\r",
									"\r",
									"// Verificar se o tempo de resposta está abaixo de um limite (ex: 500ms)\r",
									"let limiteTempoResposta = 500; // Você pode ajustar o valor limite conforme necessário\r",
									"pm.test(\"Tempo de resposta menor que \" + limiteTempoResposta + \"ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(limiteTempoResposta);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nome\": \"Ounhado\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{link}}/unidade_medida/create",
							"host": [
								"{{link}}"
							],
							"path": [
								"unidade_medida",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Unidade de Medida",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verificar se o status da requisição é 200 OK\r",
									"pm.test(\"Status da requisição é 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Verificar se o JSON de resposta contém \"success\": true\r",
									"pm.test(\"A resposta contém success igual a true\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"success\", true);\r",
									"});\r",
									"\r",
									"// Verificar se o tempo de resposta está abaixo de um limite (ex: 500ms)\r",
									"let limiteTempoResposta = 500; // Você pode ajustar o valor limite conforme necessário\r",
									"pm.test(\"Tempo de resposta menor que \" + limiteTempoResposta + \"ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(limiteTempoResposta);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nome\": \"Punhado\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{link}}/unidade_medida/{{id_unidade_medida}}",
							"host": [
								"{{link}}"
							],
							"path": [
								"unidade_medida",
								"{{id_unidade_medida}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Unidade Medida",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verificar se o status da requisição é 200 OK\r",
									"pm.test(\"Status da requisição é 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Verificar se o JSON de resposta contém \"success\": true\r",
									"pm.test(\"A resposta contém success igual a true\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"success\", true);\r",
									"});\r",
									"\r",
									"// Verificar se o tempo de resposta está abaixo de um limite (ex: 500ms)\r",
									"let limiteTempoResposta = 500; // Você pode ajustar o valor limite conforme necessário\r",
									"pm.test(\"Tempo de resposta menor que \" + limiteTempoResposta + \"ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(limiteTempoResposta);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{link}}/unidade_medida/{{id_unidade_medida}}",
							"host": [
								"{{link}}"
							],
							"path": [
								"unidade_medida",
								"{{id_unidade_medida}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Categoria Insumo",
			"item": [
				{
					"name": "Get Categoria Insumo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verificar se o status da requisição é 200 OK\r",
									"pm.test(\"Status da requisição é 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Verificar se o JSON de resposta contém \"success\": true\r",
									"pm.test(\"A resposta contém success igual a true\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"success\", true);\r",
									"});\r",
									"\r",
									"// Verificar se o tempo de resposta está abaixo de um limite (ex: 500ms)\r",
									"let limiteTempoResposta = 500; // Você pode ajustar o valor limite conforme necessário\r",
									"pm.test(\"Tempo de resposta menor que \" + limiteTempoResposta + \"ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(limiteTempoResposta);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{link}}/categoria_insumo/",
							"host": [
								"{{link}}"
							],
							"path": [
								"categoria_insumo",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Categoria Insumo by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verificar se o status da requisição é 200 OK\r",
									"pm.test(\"Status da requisição é 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Verificar se o JSON de resposta contém \"success\": true\r",
									"pm.test(\"A resposta contém success igual a true\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"success\", true);\r",
									"});\r",
									"\r",
									"// Verificar se o tempo de resposta está abaixo de um limite (ex: 500ms)\r",
									"let limiteTempoResposta = 500; // Você pode ajustar o valor limite conforme necessário\r",
									"pm.test(\"Tempo de resposta menor que \" + limiteTempoResposta + \"ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(limiteTempoResposta);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{link}}/categoria_insumo/1",
							"host": [
								"{{link}}"
							],
							"path": [
								"categoria_insumo",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Categoria Insumo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Obtendo a resposta JSON e atualizando a variavel\r",
									"let jsonData = pm.response.json();\r",
									"pm.environment.set(\"id_cat_insumo\", jsonData.id);\r",
									"\r",
									"// Verificar se o status da requisição é 200 OK\r",
									"pm.test(\"Status da requisição é 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Verificar se o JSON de resposta contém \"success\": true\r",
									"pm.test(\"A resposta contém success igual a true\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"success\", true);\r",
									"});\r",
									"\r",
									"// Verificar se o tempo de resposta está abaixo de um limite (ex: 500ms)\r",
									"let limiteTempoResposta = 500; // Você pode ajustar o valor limite conforme necessário\r",
									"pm.test(\"Tempo de resposta menor que \" + limiteTempoResposta + \"ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(limiteTempoResposta);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nome\": \"Suplemento\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{link}}/categoria_insumo/create",
							"host": [
								"{{link}}"
							],
							"path": [
								"categoria_insumo",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Categoria Insumo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verificar se o status da requisição é 200 OK\r",
									"pm.test(\"Status da requisição é 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Verificar se o JSON de resposta contém \"success\": true\r",
									"pm.test(\"A resposta contém success igual a true\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"success\", true);\r",
									"});\r",
									"\r",
									"// Verificar se o tempo de resposta está abaixo de um limite (ex: 500ms)\r",
									"let limiteTempoResposta = 500; // Você pode ajustar o valor limite conforme necessário\r",
									"pm.test(\"Tempo de resposta menor que \" + limiteTempoResposta + \"ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(limiteTempoResposta);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nome\": \"Suplementos\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{link}}/categoria_insumo/{{id_cat_insumo}}",
							"host": [
								"{{link}}"
							],
							"path": [
								"categoria_insumo",
								"{{id_cat_insumo}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Categoria Insumo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verificar se o status da requisição é 200 OK\r",
									"pm.test(\"Status da requisição é 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Verificar se o JSON de resposta contém \"success\": true\r",
									"pm.test(\"A resposta contém success igual a true\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"success\", true);\r",
									"});\r",
									"\r",
									"// Verificar se o tempo de resposta está abaixo de um limite (ex: 500ms)\r",
									"let limiteTempoResposta = 500; // Você pode ajustar o valor limite conforme necessário\r",
									"pm.test(\"Tempo de resposta menor que \" + limiteTempoResposta + \"ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(limiteTempoResposta);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{link}}/categoria_insumo/{{id_cat_insumo}}",
							"host": [
								"{{link}}"
							],
							"path": [
								"categoria_insumo",
								"{{id_cat_insumo}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Valores Nutricionais",
			"item": [
				{
					"name": "Get Valores Nutricionais",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verificar se o status da requisição é 200 OK\r",
									"pm.test(\"Status da requisição é 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Verificar se o JSON de resposta contém \"success\": true\r",
									"pm.test(\"A resposta contém success igual a true\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"success\", true);\r",
									"});\r",
									"\r",
									"// Verificar se o tempo de resposta está abaixo de um limite (ex: 500ms)\r",
									"let limiteTempoResposta = 500; // Você pode ajustar o valor limite conforme necessário\r",
									"pm.test(\"Tempo de resposta menor que \" + limiteTempoResposta + \"ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(limiteTempoResposta);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{link}}/valores_nutricionais/",
							"host": [
								"{{link}}"
							],
							"path": [
								"valores_nutricionais",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Valores Nutricionais by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verificar se o status da requisição é 200 OK\r",
									"pm.test(\"Status da requisição é 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Verificar se o JSON de resposta contém \"success\": true\r",
									"pm.test(\"A resposta contém success igual a true\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"success\", true);\r",
									"});\r",
									"\r",
									"// Verificar se o tempo de resposta está abaixo de um limite (ex: 500ms)\r",
									"let limiteTempoResposta = 500; // Você pode ajustar o valor limite conforme necessário\r",
									"pm.test(\"Tempo de resposta menor que \" + limiteTempoResposta + \"ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(limiteTempoResposta);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{link}}/valores_nutricionais/1",
							"host": [
								"{{link}}"
							],
							"path": [
								"valores_nutricionais",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Valores Nutricionais",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verificar se o status da requisição é 200 OK\r",
									"pm.test(\"Status da requisição é 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Verificar se o JSON de resposta contém \"success\": true\r",
									"pm.test(\"A resposta contém success igual a true\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"success\", true);\r",
									"});\r",
									"\r",
									"// Verificar se o tempo de resposta está abaixo de um limite (ex: 500ms)\r",
									"let limiteTempoResposta = 500; // Você pode ajustar o valor limite conforme necessário\r",
									"pm.test(\"Tempo de resposta menor que \" + limiteTempoResposta + \"ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(limiteTempoResposta);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"porcao\": \"100g\",\r\n    \"calorias\": 200,\r\n    \"carboidratros\": 30,\r\n    \"proteinas\": 10\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{link}}/valores_nutricionais/1",
							"host": [
								"{{link}}"
							],
							"path": [
								"valores_nutricionais",
								"1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Insumos",
			"item": [
				{
					"name": "Get Insumo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verificar se o status da requisição é 200 OK\r",
									"pm.test(\"Status da requisição é 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Verificar se o JSON de resposta contém \"success\": true\r",
									"pm.test(\"A resposta contém success igual a true\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"success\", true);\r",
									"});\r",
									"\r",
									"// Verificar se o tempo de resposta está abaixo de um limite (ex: 500ms)\r",
									"let limiteTempoResposta = 500; // Você pode ajustar o valor limite conforme necessário\r",
									"pm.test(\"Tempo de resposta menor que \" + limiteTempoResposta + \"ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(limiteTempoResposta);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{link}}/insumos/",
							"host": [
								"{{link}}"
							],
							"path": [
								"insumos",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Insumo by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verificar se o status da requisição é 200 OK\r",
									"pm.test(\"Status da requisição é 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Verificar se o JSON de resposta contém \"success\": true\r",
									"pm.test(\"A resposta contém success igual a true\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"success\", true);\r",
									"});\r",
									"\r",
									"// Verificar se o tempo de resposta está abaixo de um limite (ex: 500ms)\r",
									"let limiteTempoResposta = 500; // Você pode ajustar o valor limite conforme necessário\r",
									"pm.test(\"Tempo de resposta menor que \" + limiteTempoResposta + \"ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(limiteTempoResposta);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{link}}/insumos/1",
							"host": [
								"{{link}}"
							],
							"path": [
								"insumos",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Insumo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Obtendo a resposta JSON e atualizando a variavel\r",
									"let jsonData = pm.response.json();\r",
									"pm.environment.set(\"id_insumo\", jsonData.id);\r",
									"\r",
									"// Verificar se o status da requisição é 200 OK\r",
									"pm.test(\"Status da requisição é 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Verificar se o JSON de resposta contém \"success\": true\r",
									"pm.test(\"A resposta contém success igual a true\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"success\", true);\r",
									"});\r",
									"\r",
									"// Verificar se o tempo de resposta está abaixo de um limite (ex: 500ms)\r",
									"let limiteTempoResposta = 500; // Você pode ajustar o valor limite conforme necessário\r",
									"pm.test(\"Tempo de resposta menor que \" + limiteTempoResposta + \"ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(limiteTempoResposta);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"Feijão\",\r\n  \"categoria_insumos_id\": 2,\r\n  \"observacoes\": \"Feijão carioca\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{link}}/insumos/create",
							"host": [
								"{{link}}"
							],
							"path": [
								"insumos",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Categoria Insumo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verificar se o status da requisição é 200 OK\r",
									"pm.test(\"Status da requisição é 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Verificar se o JSON de resposta contém \"success\": true\r",
									"pm.test(\"A resposta contém success igual a true\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"success\", true);\r",
									"});\r",
									"\r",
									"// Verificar se o tempo de resposta está abaixo de um limite (ex: 500ms)\r",
									"let limiteTempoResposta = 500; // Você pode ajustar o valor limite conforme necessário\r",
									"pm.test(\"Tempo de resposta menor que \" + limiteTempoResposta + \"ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(limiteTempoResposta);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"Ugly John\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{link}}/insumos/{{id_insumo}}",
							"host": [
								"{{link}}"
							],
							"path": [
								"insumos",
								"{{id_insumo}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Categoria Insumo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verificar se o status da requisição é 200 OK\r",
									"pm.test(\"Status da requisição é 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Verificar se o JSON de resposta contém \"success\": true\r",
									"pm.test(\"A resposta contém success igual a true\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"success\", true);\r",
									"});\r",
									"\r",
									"// Verificar se o tempo de resposta está abaixo de um limite (ex: 500ms)\r",
									"let limiteTempoResposta = 500; // Você pode ajustar o valor limite conforme necessário\r",
									"pm.test(\"Tempo de resposta menor que \" + limiteTempoResposta + \"ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(limiteTempoResposta);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{link}}/insumos/{{id_insumo}}",
							"host": [
								"{{link}}"
							],
							"path": [
								"insumos",
								"{{id_insumo}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Estoque Entrada",
			"item": [
				{
					"name": "Get Estoque Entrada",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verificar se o status da requisição é 200 OK\r",
									"pm.test(\"Status da requisição é 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Verificar se o JSON de resposta contém \"success\": true\r",
									"pm.test(\"A resposta contém success igual a true\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"success\", true);\r",
									"});\r",
									"\r",
									"// Verificar se o tempo de resposta está abaixo de um limite (ex: 500ms)\r",
									"let limiteTempoResposta = 500; // Você pode ajustar o valor limite conforme necessário\r",
									"pm.test(\"Tempo de resposta menor que \" + limiteTempoResposta + \"ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(limiteTempoResposta);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{link}}/estoque_entrada/",
							"host": [
								"{{link}}"
							],
							"path": [
								"estoque_entrada",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Estoque Entrada by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verificar se o status da requisição é 200 OK\r",
									"pm.test(\"Status da requisição é 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Verificar se o JSON de resposta contém \"success\": true\r",
									"pm.test(\"A resposta contém success igual a true\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"success\", true);\r",
									"});\r",
									"\r",
									"// Verificar se o tempo de resposta está abaixo de um limite (ex: 500ms)\r",
									"let limiteTempoResposta = 500; // Você pode ajustar o valor limite conforme necessário\r",
									"pm.test(\"Tempo de resposta menor que \" + limiteTempoResposta + \"ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(limiteTempoResposta);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{link}}/estoque_entrada/1",
							"host": [
								"{{link}}"
							],
							"path": [
								"estoque_entrada",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Estoque Entrada",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Obtendo a resposta JSON e atualizando a variavel\r",
									"let jsonData = pm.response.json();\r",
									"pm.environment.set(\"id_estoque_entrada\", jsonData.id);\r",
									"\r",
									"// Verificar se o status da requisição é 200 OK\r",
									"pm.test(\"Status da requisição é 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Verificar se o JSON de resposta contém \"success\": true\r",
									"pm.test(\"A resposta contém success igual a true\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"success\", true);\r",
									"});\r",
									"\r",
									"// Verificar se o tempo de resposta está abaixo de um limite (ex: 500ms)\r",
									"let limiteTempoResposta = 500; // Você pode ajustar o valor limite conforme necessário\r",
									"pm.test(\"Tempo de resposta menor que \" + limiteTempoResposta + \"ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(limiteTempoResposta);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"insumos_id\": 1,\r\n  \"doacoes_id\": 1,\r\n  \"quantidade\": 50,\r\n  \"unidades_medida_id\": 1,\r\n  \"data_validade\": \"2024-12-31\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{link}}/estoque_entrada/create",
							"host": [
								"{{link}}"
							],
							"path": [
								"estoque_entrada",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Estoque Entrada",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verificar se o status da requisição é 200 OK\r",
									"pm.test(\"Status da requisição é 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Verificar se o JSON de resposta contém \"success\": true\r",
									"pm.test(\"A resposta contém success igual a true\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"success\", true);\r",
									"});\r",
									"\r",
									"// Verificar se o tempo de resposta está abaixo de um limite (ex: 500ms)\r",
									"let limiteTempoResposta = 500; // Você pode ajustar o valor limite conforme necessário\r",
									"pm.test(\"Tempo de resposta menor que \" + limiteTempoResposta + \"ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(limiteTempoResposta);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"insumos_id\": 1,\r\n  \"doacoes_id\": 1,\r\n  \"quantidade\": 100,\r\n  \"unidades_medida_id\": 1,\r\n  \"data_validade\": \"2025-01-31\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{link}}/estoque_entrada/{{id_estoque_entrada}}",
							"host": [
								"{{link}}"
							],
							"path": [
								"estoque_entrada",
								"{{id_estoque_entrada}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Estoque Entrada",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verificar se o status da requisição é 200 OK\r",
									"pm.test(\"Status da requisição é 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Verificar se o JSON de resposta contém \"success\": true\r",
									"pm.test(\"A resposta contém success igual a true\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"success\", true);\r",
									"});\r",
									"\r",
									"// Verificar se o tempo de resposta está abaixo de um limite (ex: 500ms)\r",
									"let limiteTempoResposta = 500; // Você pode ajustar o valor limite conforme necessário\r",
									"pm.test(\"Tempo de resposta menor que \" + limiteTempoResposta + \"ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(limiteTempoResposta);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{link}}/estoque_entrada/{{id_estoque_entrada}}",
							"host": [
								"{{link}}"
							],
							"path": [
								"estoque_entrada",
								"{{id_estoque_entrada}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Estoque",
			"item": [
				{
					"name": "Get Estoque (view completo)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verificar se o status da requisição é 200 OK\r",
									"pm.test(\"Status da requisição é 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Verificar se o JSON de resposta contém \"success\": true\r",
									"pm.test(\"A resposta contém success igual a true\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"success\", true);\r",
									"});\r",
									"\r",
									"// Verificar se o tempo de resposta está abaixo de um limite (ex: 500ms)\r",
									"let limiteTempoResposta = 500; // Você pode ajustar o valor limite conforme necessário\r",
									"pm.test(\"Tempo de resposta menor que \" + limiteTempoResposta + \"ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(limiteTempoResposta);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{link}}/estoque/view/view_estoque_completo",
							"host": [
								"{{link}}"
							],
							"path": [
								"estoque",
								"view",
								"view_estoque_completo"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Estoque (view fechado)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verificar se o status da requisição é 200 OK\r",
									"pm.test(\"Status da requisição é 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Verificar se o JSON de resposta contém \"success\": true\r",
									"pm.test(\"A resposta contém success igual a true\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"success\", true);\r",
									"});\r",
									"\r",
									"// Verificar se o tempo de resposta está abaixo de um limite (ex: 500ms)\r",
									"let limiteTempoResposta = 500; // Você pode ajustar o valor limite conforme necessário\r",
									"pm.test(\"Tempo de resposta menor que \" + limiteTempoResposta + \"ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(limiteTempoResposta);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{link}}/estoque/view/view_estoque_fechado",
							"host": [
								"{{link}}"
							],
							"path": [
								"estoque",
								"view",
								"view_estoque_fechado"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Estoque (view aberto)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verificar se o status da requisição é 200 OK\r",
									"pm.test(\"Status da requisição é 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Verificar se o JSON de resposta contém \"success\": true\r",
									"pm.test(\"A resposta contém success igual a true\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"success\", true);\r",
									"});\r",
									"\r",
									"// Verificar se o tempo de resposta está abaixo de um limite (ex: 500ms)\r",
									"let limiteTempoResposta = 500; // Você pode ajustar o valor limite conforme necessário\r",
									"pm.test(\"Tempo de resposta menor que \" + limiteTempoResposta + \"ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(limiteTempoResposta);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{link}}/estoque/view/view_estoque_aberto",
							"host": [
								"{{link}}"
							],
							"path": [
								"estoque",
								"view",
								"view_estoque_aberto"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Estoque (view vencendo hoje)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verificar se o status da requisição é 200 OK\r",
									"pm.test(\"Status da requisição é 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Verificar se o JSON de resposta contém \"success\": true\r",
									"pm.test(\"A resposta contém success igual a true\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"success\", true);\r",
									"});\r",
									"\r",
									"// Verificar se o tempo de resposta está abaixo de um limite (ex: 500ms)\r",
									"let limiteTempoResposta = 500; // Você pode ajustar o valor limite conforme necessário\r",
									"pm.test(\"Tempo de resposta menor que \" + limiteTempoResposta + \"ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(limiteTempoResposta);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{link}}/estoque/view/view_estoque_vencendo_hoje",
							"host": [
								"{{link}}"
							],
							"path": [
								"estoque",
								"view",
								"view_estoque_vencendo_hoje"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Estoque by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verificar se o status da requisição é 200 OK\r",
									"pm.test(\"Status da requisição é 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Verificar se o JSON de resposta contém \"success\": true\r",
									"pm.test(\"A resposta contém success igual a true\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"success\", true);\r",
									"});\r",
									"\r",
									"// Verificar se o tempo de resposta está abaixo de um limite (ex: 500ms)\r",
									"let limiteTempoResposta = 500; // Você pode ajustar o valor limite conforme necessário\r",
									"pm.test(\"Tempo de resposta menor que \" + limiteTempoResposta + \"ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(limiteTempoResposta);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{link}}/estoque/1",
							"host": [
								"{{link}}"
							],
							"path": [
								"estoque",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Estoque",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verificar se o status da requisição é 200 OK\r",
									"pm.test(\"Status da requisição é 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Verificar se o JSON de resposta contém \"success\": true\r",
									"pm.test(\"A resposta contém success igual a true\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"success\", true);\r",
									"});\r",
									"\r",
									"// Verificar se o tempo de resposta está abaixo de um limite (ex: 500ms)\r",
									"let limiteTempoResposta = 500; // Você pode ajustar o valor limite conforme necessário\r",
									"pm.test(\"Tempo de resposta menor que \" + limiteTempoResposta + \"ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(limiteTempoResposta);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"novo_status\": 1,\r\n  \"observacao\": \"Aberto\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{link}}/estoque/1",
							"host": [
								"{{link}}"
							],
							"path": [
								"estoque",
								"1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Estoque Saida",
			"item": [
				{
					"name": "Get Estoque Saida",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verificar se o status da requisição é 200 OK\r",
									"pm.test(\"Status da requisição é 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Verificar se o JSON de resposta contém \"success\": true\r",
									"pm.test(\"A resposta contém success igual a true\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"success\", true);\r",
									"});\r",
									"\r",
									"// Verificar se o tempo de resposta está abaixo de um limite (ex: 500ms)\r",
									"let limiteTempoResposta = 500; // Você pode ajustar o valor limite conforme necessário\r",
									"pm.test(\"Tempo de resposta menor que \" + limiteTempoResposta + \"ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(limiteTempoResposta);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{link}}/estoque_saida/",
							"host": [
								"{{link}}"
							],
							"path": [
								"estoque_saida",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Estoque Saida by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verificar se o status da requisição é 200 OK\r",
									"pm.test(\"Status da requisição é 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Verificar se o JSON de resposta contém \"success\": true\r",
									"pm.test(\"A resposta contém success igual a true\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"success\", true);\r",
									"});\r",
									"\r",
									"// Verificar se o tempo de resposta está abaixo de um limite (ex: 500ms)\r",
									"let limiteTempoResposta = 500; // Você pode ajustar o valor limite conforme necessário\r",
									"pm.test(\"Tempo de resposta menor que \" + limiteTempoResposta + \"ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(limiteTempoResposta);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{link}}/estoque_saida/1",
							"host": [
								"{{link}}"
							],
							"path": [
								"estoque_saida",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Estoque Saida by Insumo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verificar se o status da requisição é 200 OK\r",
									"pm.test(\"Status da requisição é 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Verificar se o JSON de resposta contém \"success\": true\r",
									"pm.test(\"A resposta contém success igual a true\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"success\", true);\r",
									"});\r",
									"\r",
									"// Verificar se o tempo de resposta está abaixo de um limite (ex: 500ms)\r",
									"let limiteTempoResposta = 500; // Você pode ajustar o valor limite conforme necessário\r",
									"pm.test(\"Tempo de resposta menor que \" + limiteTempoResposta + \"ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(limiteTempoResposta);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{link}}/estoque_saida/insumo/10",
							"host": [
								"{{link}}"
							],
							"path": [
								"estoque_saida",
								"insumo",
								"10"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Estoque Vencido",
			"item": [
				{
					"name": "Get Vencido Não Descartados",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verificar se o status da requisição é 200 OK\r",
									"pm.test(\"Status da requisição é 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Verificar se o JSON de resposta contém \"success\": true\r",
									"pm.test(\"A resposta contém success igual a true\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"success\", true);\r",
									"});\r",
									"\r",
									"// Verificar se o tempo de resposta está abaixo de um limite (ex: 500ms)\r",
									"let limiteTempoResposta = 500; // Você pode ajustar o valor limite conforme necessário\r",
									"pm.test(\"Tempo de resposta menor que \" + limiteTempoResposta + \"ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(limiteTempoResposta);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{link}}/estoque_vencido/",
							"host": [
								"{{link}}"
							],
							"path": [
								"estoque_vencido",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Estoque Vencido Descartados",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verificar se o status da requisição é 200 OK\r",
									"pm.test(\"Status da requisição é 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Verificar se o JSON de resposta contém \"success\": true\r",
									"pm.test(\"A resposta contém success igual a true\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"success\", true);\r",
									"});\r",
									"\r",
									"// Verificar se o tempo de resposta está abaixo de um limite (ex: 500ms)\r",
									"let limiteTempoResposta = 500; // Você pode ajustar o valor limite conforme necessário\r",
									"pm.test(\"Tempo de resposta menor que \" + limiteTempoResposta + \"ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(limiteTempoResposta);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{link}}/estoque_vencido/descartados/",
							"host": [
								"{{link}}"
							],
							"path": [
								"estoque_vencido",
								"descartados",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Vencido Não Descartados by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{link}}/estoque_vencido/1",
							"host": [
								"{{link}}"
							],
							"path": [
								"estoque_vencido",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Estoque Vencido Descartados by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verificar se o status da requisição é 200 OK\r",
									"pm.test(\"Status da requisição é 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Verificar se o JSON de resposta contém \"success\": true\r",
									"pm.test(\"A resposta contém success igual a true\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"success\", true);\r",
									"});\r",
									"\r",
									"// Verificar se o tempo de resposta está abaixo de um limite (ex: 500ms)\r",
									"let limiteTempoResposta = 500; // Você pode ajustar o valor limite conforme necessário\r",
									"pm.test(\"Tempo de resposta menor que \" + limiteTempoResposta + \"ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(limiteTempoResposta);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{link}}/estoque_vencido/descartados/1",
							"host": [
								"{{link}}"
							],
							"path": [
								"estoque_vencido",
								"descartados",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Vencido Não Descartados by insumo ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{link}}/estoque_vencido/insumo/22",
							"host": [
								"{{link}}"
							],
							"path": [
								"estoque_vencido",
								"insumo",
								"22"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Vencido Descartados by insumo ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verificar se o status da requisição é 200 OK\r",
									"pm.test(\"Status da requisição é 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Verificar se o JSON de resposta contém \"success\": true\r",
									"pm.test(\"A resposta contém success igual a true\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"success\", true);\r",
									"});\r",
									"\r",
									"// Verificar se o tempo de resposta está abaixo de um limite (ex: 500ms)\r",
									"let limiteTempoResposta = 500; // Você pode ajustar o valor limite conforme necessário\r",
									"pm.test(\"Tempo de resposta menor que \" + limiteTempoResposta + \"ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(limiteTempoResposta);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{link}}/estoque_vencido/descartados/insumo/22",
							"host": [
								"{{link}}"
							],
							"path": [
								"estoque_vencido",
								"descartados",
								"insumo",
								"22"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "token",
			"value": ""
		},
		{
			"key": "port",
			"value": ":3000",
			"type": "string"
		},
		{
			"key": "host",
			"value": "localhost",
			"type": "string"
		},
		{
			"key": "link",
			"value": "http://{{host}}{{port}}/api"
		},
		{
			"key": "tempo",
			"value": "500",
			"type": "string"
		},
		{
			"key": "id_user",
			"value": "2",
			"type": "string"
		},
		{
			"key": "id_enderecos",
			"value": "11",
			"type": "string"
		},
		{
			"key": "id_telefones",
			"value": "13",
			"type": "string"
		},
		{
			"key": "id_pessoas_f",
			"value": "11",
			"type": "string"
		},
		{
			"key": "id_pessoas_j",
			"value": "12",
			"type": "string"
		},
		{
			"key": "id_doacoes",
			"value": "13",
			"type": "string"
		},
		{
			"key": "id_pedidos",
			"value": "13",
			"type": "string"
		},
		{
			"key": "id_item",
			"value": "25",
			"type": "string"
		},
		{
			"key": "id_unidade_medida",
			"value": "15",
			"type": "string"
		},
		{
			"key": "id_cat_insumo",
			"value": "19",
			"type": "string"
		},
		{
			"key": "id_insumo",
			"value": "55",
			"type": "string"
		},
		{
			"key": "id_estoque_entrada",
			"value": "17",
			"type": "string"
		}
	]
}