tree (árvore de diretórios e arquivos)
.


Nome do arquivo: index.js
Conteúdo:
const fs = require('fs');
const path = require('path');
const recursive = require('recursive-readdir');

const ignoreDirs = ['.angular', '.vscode', 'node_modules', 'public', '.git'];
const ignoreFiles = ['package-lock.json'];
const imageExtensions = ['.jpg', '.jpeg', '.png', '.gif', '.bmp', '.svg', '.webp', '.ico']; // Add image extensions
const projectRootDirs = ['./'];

function generateTree(rootDir, files) {
    let tree = path.basename(rootDir) + '\n';
    const baseDir = path.resolve(rootDir);

    files.forEach(file => {
        const relativePath = path.relative(baseDir, file);
        const parts = relativePath.split(path.sep);
        let currentLevel = tree;

        parts.forEach((part, index) => {
            const prefix = index < parts.length - 1 ? '-' : ' ';
            const indentation = '  '.repeat(index + 1);
            if (!currentLevel.includes(`${indentation}${prefix} ${part}\n`)) {
                currentLevel += `${indentation}${prefix} ${part}\n`;
            }
        });
    });

    return tree;
}

async function listAndAnalyzeFiles(rootDir) {
    let allFiles = [];

    for (const dir of projectRootDirs) {
        const files = await new Promise((resolve, reject) => {
            recursive(dir, [
                ...ignoreDirs,
                (file, stats) => {
                    return ignoreFiles.includes(path.basename(file)) || imageExtensions.includes(path.extname(file).toLowerCase()); // Ignore images too
                }], (err, files) => {
                if (err) {
                    reject(err);
                } else {
                    resolve(files);
                }
            });
        });
        allFiles = allFiles.concat(files);
    }


    const output = [];
    const tree = generateTree(rootDir, allFiles);
    output.push(`tree (árvore de diretórios e arquivos)\n${tree}`);


    for (const file of allFiles) {
        try {
            const data = await fs.promises.readFile(file, 'utf8');
            output.push(`\nNome do arquivo: ${file}`);
            output.push(`Conteúdo:\n${data}`);

        } catch (err) {

            //Se o arquivo for binário, adicione apenas o nome do arquivo à saída.
            if (err.code === 'ENOENT') {
                console.error(`Arquivo não encontrado: ${file}`);
            } else if (err instanceof TypeError) { // Check if TypeError for binary files or similar
                output.push(`\nNome do arquivo (binário ou não textual): ${file}`);
            } else {
                console.error(`Erro ao ler arquivo ${file}:`, err);
            }
        }
    }

    try {
        await fs.promises.writeFile('resultado.txt', output.join('\n'));
        console.log('Arquivo resultado.txt criado com sucesso!');
    } catch (err) {
        console.error('Erro ao criar o arquivo de saída:', err);
    }
}

listAndAnalyzeFiles('./');

Nome do arquivo: README.md
Conteúdo:
# AppEstoqueAPAE

## Instruções para rodar a API:

### 1. Configurar arquivo .env:
```
./env.txt > .env
```
### 2. Criar banco de dados:
```
./src/data/schema.sql
```
### 3. Criar usuário administrador
```
node ./src/data/first_user.js
```

### 4. Popular Banco de dados
```
./src/data/inser_completo.sql
```

### 5. Adicionar Evento diário
```
./src/data/event_atualizar_status_estoque.sql
```

Nome do arquivo: backend\.gitignore
Conteúdo:
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
.pnpm-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# Snowpack dependency directory (https://snowpack.dev/)
web_modules/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional stylelint cache
.stylelintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variable files
.env
.env.development.local
.env.test.local
.env.production.local
.env.local

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next
out

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and not Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# vuepress build output
.vuepress/dist

# vuepress v2.x temp and cache directory
.temp
.cache

# Docusaurus cache and generated files
.docusaurus

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port

# Stores VSCode versions used for testing VSCode extensions
.vscode-test

# yarn v2
.yarn/cache
.yarn/unplugged
.yarn/build-state.yml
.yarn/install-state.gz
.pnp.*

prompt.txt

Nome do arquivo: backend\.env
Conteúdo:
PORT = 3000
DB_HOST = localhost
DB_PORT = 3306
DB_USER = root
DB_PASSWORD = "#1234Tur"
DB_NAME = db_apae_estoque
JWT_SECRET = ""

Nome do arquivo: backend\package.json
Conteúdo:
{
  "name": "appestoqueapae",
  "version": "1.0.0",
  "main": "server.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "start": "nodemon"
  },
  "author": "",
  "license": "ISC",
  "description": "",
  "devDependencies": {
    "nodemon": "^3.1.4"
  },
  "dependencies": {
    "bcryptjs": "^2.4.3",
    "cors": "^2.8.5",
    "dotenv": "^16.4.5",
    "express": "^4.19.2",
    "express-validator": "^7.2.0",
    "jsonwebtoken": "^9.0.2",
    "knex": "^3.1.0",
    "mysql2": "^3.11.0"
  }
}


Nome do arquivo: backend\server.js
Conteúdo:
require("dotenv").config();
const api = require("./src/api");

api.listen(process.env.PORT, () => {
  console.log(`API rodando na porta ${process.env.PORT}.`);
});


Nome do arquivo: backend\env.txt
Conteúdo:
PORT = 
DB_HOST = localhost
DB_PORT = 
DB_USER = root
DB_PASSWORD = root
DB_NAME = db_apae_estoque
JWT_SECRET = ""

Nome do arquivo: backend\src\api.js
Conteúdo:
const express = require("express");
const cors = require("cors");
const routes = require("./routes/routes");

const api = express();

// Configure CORS
const corsOptions = {
  origin: "*", // Allow all origins
  // If you want to restrict origins, uncomment and use the following:
  // origin: ['https://your-app.com', 'http://localhost:4200'],
  methods: ["GET", "POST", "PUT", "DELETE", "OPTIONS"], // Allowed HTTP methods
  allowedHeaders: ["Content-Type", "Authorization"], // Allowed headers
};

// Apply middleware
api.use(cors(corsOptions)); // Apply CORS globally
api.use(express.urlencoded({ extended: false })); // Parse URL-encoded bodies
api.use(express.json()); // Parse JSON bodies

// Preflight OPTIONS request handler (optional but recommended for smooth CORS handling)
api.options("*", cors(corsOptions));

// Define routes
api.use("/api", routes);

// Export the API object
module.exports = api;


Nome do arquivo: backend\src\controllers\CategoriaInsumoController.js
Conteúdo:
const CategoriaInsumo = require("../models/CategoriaInsumo.js");

class CategoriaInsumoController {
  // Create a new categoria_insumo
  async create(req, res) {
    const { nome } = req.body;
    const user_id = req.user_id; // Get user_id from the middleware

    const result = await CategoriaInsumo.create({ nome }, user_id);

    if (result.status) {
      return res.status(200).json({
        success: true,
        message: "Categoria de insumo criada com sucesso!",
        id: result.id,
      });
    } else {
      return res.status(400).json({ success: false, message: result.err });
    }
  }

  // Fetch all categoria_insumos
  async findAll(req, res) {
    const result = await CategoriaInsumo.findAll(["id", "nome"]);

    if (result.status) {
      return res.status(200).json({ success: true, categorias: result.values });
    } else {
      return res.status(400).json({ success: false, message: result.err });
    }
  }

  // Fetch categoria_insumo by ID
  async findById(req, res) {
    const { id } = req.params;

    const result = await CategoriaInsumo.findById(id, ["id", "nome"]);

    if (result.status) {
      return res.status(200).json({ success: true, categoria: result.values });
    } else {
      return res.status(404).json({ success: false, message: result.message });
    }
  }

  // Update categoria_insumo by ID
  async update(req, res) {
    const { id } = req.params;
    const { nome } = req.body;
    const user_id = req.user_id; // Get user_id from the middleware

    const result = await CategoriaInsumo.update(id, { nome }, user_id);

    if (result.status) {
      return res.status(200).json({
        success: true,
        message: "Categoria de insumo atualizada com sucesso!",
      });
    } else {
      return res.status(400).json({ success: false, message: result.err });
    }
  }

  // Delete categoria_insumo by ID
  async delete(req, res) {
    const { id } = req.params;
    const user_id = req.user_id; // Get user_id from the middleware

    const result = await CategoriaInsumo.delete(id, user_id);

    if (result.status) {
      return res.status(200).json({ success: true, message: result.message });
    } else {
      return res.status(400).json({ success: false, message: result.err });
    }
  }
}

module.exports = new CategoriaInsumoController();


Nome do arquivo: backend\src\controllers\DoacoesController.js
Conteúdo:
const Doacoes = require("../models/Doacoes");

class DoacoesController {
  // Create a new donation
  async create(req, res) {
    const { pessoas_id, descricao, data_doacao } = req.body;
    const user_id = req.user_id; // Get user_id from the middleware

    const result = await Doacoes.create(
      { pessoas_id, descricao, data_doacao }, // No "valor" field
      user_id
    );

    if (result.status) {
      return res.status(200).json({
        success: true,
        message: "Doação criada com sucesso!",
        id: result.id,
      });
    } else {
      return res.status(400).json({ success: false, message: result.err });
    }
  }

  // Get all donations
  async findAll(req, res) {
    const result = await Doacoes.findAll();

    if (result.status) {
      return res.status(200).json({ success: true, doacoes: result.values });
    } else {
      return res.status(400).json({ success: false, message: result.err });
    }
  }

  // Get a specific donation by ID
  async findById(req, res) {
    const { id } = req.params;

    const result = await Doacoes.findById(id);

    if (result.status) {
      return res.status(200).json({ success: true, doacao: result.values });
    } else {
      return res.status(404).json({ success: false, message: result.message });
    }
  }

  // Update a donation by ID
  async update(req, res) {
    const { id } = req.params;
    const { pessoas_id, descricao, data_doacao } = req.body;
    const user_id = req.user_id; // Get user_id from the middleware

    const result = await Doacoes.update(
      id,
      pessoas_id,
      descricao,
      data_doacao,
      user_id
    );

    if (result.status) {
      return res
        .status(200)
        .json({ success: true, message: "Doação atualizada com sucesso!" });
    } else {
      return res.status(400).json({ success: false, message: result.err });
    }
  }

  // Delete a donation by ID (using BaseModel's delete)
  async delete(req, res) {
    const { id } = req.params;
    const user_id = req.user_id; // Get user_id from the middleware

    const result = await Doacoes.delete(id, user_id);

    if (result.status) {
      return res.status(200).json({ success: true, message: result.message });
    } else {
      return res.status(400).json({ success: false, message: result.err });
    }
  }

  // Fetch all pedidos related to a specific doacao
  async findPedidosByDoacao(req, res) {
    const { doacao_id } = req.params;

    const result = await Doacoes.findPedidosByDoacao(doacao_id);

    if (result.status) {
      return res.status(200).json({ success: true, pedidos: result.values });
    } else {
      return res.status(400).json({ success: false, message: result.err });
    }
  }

  // Link a pedido to a doacao
  async linkPedido(req, res) {
    const { doacoes_id, pedidos_id } = req.body;
    const user_id = req.user_id; // Get user_id from the middleware

    const result = await Doacoes.linkPedido(doacoes_id, pedidos_id, user_id);

    if (result.status) {
      return res.status(200).json({ success: true, message: result.message });
    } else {
      return res.status(400).json({ success: false, message: result.err });
    }
  }

  // Unlink a pedido from a doacao
  async unlinkPedido(req, res) {
    const { doacoes_id, pedidos_id } = req.body;
    const user_id = req.user_id; // Get user_id from the middleware

    const result = await Doacoes.unlinkPedido(doacoes_id, pedidos_id, user_id);

    if (result.status) {
      return res.status(200).json({ success: true, message: result.message });
    } else {
      return res.status(400).json({ success: false, message: result.err });
    }
  }
}

module.exports = new DoacoesController();


Nome do arquivo: backend\src\controllers\EnderecosController.js
Conteúdo:
const Endereco = require("../models/Endereco.js");

class EnderecosController {
  // Create a new address
  async create(req, res) {
    const {
      tipo,
      logradouro,
      numero,
      complemento,
      bairro,
      cidade,
      estado,
      cep,
    } = req.body;
    const user_id = req.user_id; // Extract user_id from middleware

    let result = await Endereco.create(
      tipo,
      logradouro,
      numero,
      complemento,
      bairro,
      cidade,
      estado,
      cep,
      user_id // Pass user_id to set session variable
    );

    if (result.status) {
      return res.status(200).json({
        success: true,
        message: "Endereço criado com sucesso!",
        id: result.id,
      });
    } else {
      return res.status(400).json({ success: false, message: result.err });
    }
  }

  // Get all addresses
  async findAll(req, res) {
    let result = await Endereco.findAll();

    if (result.status) {
      return res.status(200).json({ success: true, enderecos: result.values });
    } else {
      return res.status(400).json({ success: false, message: result.err });
    }
  }

  // Get address by ID
  async findById(req, res) {
    let { id } = req.params;

    let result = await Endereco.findById(id);

    if (result.status) {
      return res.status(200).json({ success: true, endereco: result.values });
    } else {
      return res.status(404).json({ success: false, message: result.message });
    }
  }

  // Update address by ID
  async update(req, res) {
    let { id } = req.params;
    const {
      tipo,
      logradouro,
      numero,
      complemento,
      bairro,
      cidade,
      estado,
      cep,
    } = req.body;
    const user_id = req.user_id; // Extract user_id from middleware

    let result = await Endereco.update(
      id,
      tipo,
      logradouro,
      numero,
      complemento,
      bairro,
      cidade,
      estado,
      cep,
      user_id // Pass user_id to set session variable
    );

    if (result.status) {
      return res.status(200).json({ success: true, message: result.message });
    } else {
      return res.status(400).json({ success: false, message: result.message });
    }
  }

  // Delete address by ID
  async delete(req, res) {
    const { id } = req.params;
    const user_id = req.user_id; // Extract user_id from middleware

    const result = await Endereco.delete(id, user_id); // Pass user_id to set session

    if (result.status) {
      return res.status(200).json({ success: true, message: result.message });
    } else {
      return res.status(404).json({ success: false, message: result.message });
    }
  }
}

module.exports = new EnderecosController();


Nome do arquivo: backend\src\controllers\EstoqueController.js
Conteúdo:
const Estoque = require("../models/Estoque.js");

class EstoqueController {
  // Fetch all stock items by a specific view (fechado, aberto, vencendo_hoje)
  async findByView(req, res) {
    const { view } = req.params; // e.g., view_estoque_fechado, view_estoque_aberto
    const validViews = [
      "view_estoque_completo",
      "view_estoque_fechado",
      "view_estoque_aberto",
      "view_estoque_vencendo_hoje",
    ];

    if (!validViews.includes(view)) {
      return res
        .status(400)
        .json({ success: false, message: "Invalid view name." });
    }

    const result = await Estoque.findAllByView(view);

    if (result.status) {
      return res.status(200).json({ success: true, estoque: result.values });
    } else {
      return res.status(400).json({ success: false, message: result.err });
    }
  }

  // Fetch a single stock item by ID using the view
  async findById(req, res) {
    const { id } = req.params;

    const result = await Estoque.findById(id);

    if (result.status) {
      return res.status(200).json({ success: true, estoque: result.values });
    } else {
      return res.status(404).json({ success: false, message: result.message });
    }
  }

  // Update stock by calling the stored procedure
  async update(req, res) {
    const { id } = req.params;
    const { novo_status, observacao } = req.body;
    const user_id = req.user_id; // Get user_id from middleware

    if (!novo_status) {
      return res
        .status(400)
        .json({ success: false, message: "Status is required." });
    }

    const result = await Estoque.updateStockUsingProcedure(
      id,
      novo_status,
      observacao,
      user_id
    );

    if (result.status) {
      return res.status(200).json({ success: true, message: result.message });
    } else {
      return res.status(400).json({ success: false, message: result.err });
    }
  }
}

module.exports = new EstoqueController();


Nome do arquivo: backend\src\controllers\EstoqueSaidaController.js
Conteúdo:
const EstoqueSaida = require("../models/EstoqueSaida.js");

class EstoqueSaidaController {
  // Fetch all stock exit records
  async findAll(req, res) {
    const result = await EstoqueSaida.findAll();

    if (result.status) {
      return res
        .status(200)
        .json({ success: true, estoque_saida: result.values });
    } else {
      return res.status(400).json({ success: false, message: result.err });
    }
  }

  // Fetch stock exit record by estoque_saida ID
  async findById(req, res) {
    const { id } = req.params;

    const result = await EstoqueSaida.findById(id);

    if (result.status) {
      return res
        .status(200)
        .json({ success: true, estoque_saida: result.values });
    } else {
      return res.status(404).json({ success: false, message: result.message });
    }
  }

  // Fetch stock exit records by insumo ID
  async findByInsumoId(req, res) {
    const { insumos_id } = req.params;

    const result = await EstoqueSaida.findByInsumoId(insumos_id);

    if (result.status) {
      return res
        .status(200)
        .json({ success: true, estoque_saida: result.values });
    } else {
      return res.status(404).json({ success: false, message: result.message });
    }
  }
}

module.exports = new EstoqueSaidaController();


Nome do arquivo: backend\src\controllers\EstoqueEntradaController.js
Conteúdo:
const EstoqueEntrada = require("../models/EstoqueEntrada.js");

class EstoqueEntradaController {
  // Add new stock entry
  async create(req, res) {
    const {
      insumos_id,
      doacoes_id,
      quantidade,
      unidades_medida_id,
      data_validade,
    } = req.body;
    const user_id = req.user_id; // Get user_id from middleware

    const result = await EstoqueEntrada.addStockEntry(
      { insumos_id, doacoes_id, quantidade, unidades_medida_id, data_validade },
      user_id
    );

    if (result.status) {
      return res.status(200).json({
        success: true,
        message: "Stock entry created successfully!",
        id: result.id,
      });
    } else {
      return res.status(400).json({ success: false, message: result.err });
    }
  }

  // Get all stock entries with details
  async findAll(req, res) {
    const result = await EstoqueEntrada.findAllWithDetails();

    if (result.status) {
      return res.status(200).json({ success: true, estoque: result.values });
    } else {
      return res.status(400).json({ success: false, message: result.err });
    }
  }

  // Get a single stock entry by ID
  async findById(req, res) {
    const { id } = req.params;
    const result = await EstoqueEntrada.findById(id);

    if (result.status) {
      return res.status(200).json({ success: true, estoque: result.values });
    } else {
      return res.status(404).json({ success: false, message: result.message });
    }
  }

  // Update stock entry by ID
  async update(req, res) {
    const { id } = req.params;
    const {
      insumos_id,
      doacoes_id,
      quantidade,
      unidades_medida_id,
      data_validade,
    } = req.body;
    const user_id = req.user_id;

    const result = await EstoqueEntrada.update(
      id,
      { insumos_id, doacoes_id, quantidade, unidades_medida_id, data_validade },
      user_id
    );

    if (result.status) {
      return res.status(200).json({ success: true, message: result.message });
    } else {
      return res.status(400).json({ success: false, message: result.err });
    }
  }

  // Delete stock entry by ID
  async delete(req, res) {
    const { id } = req.params;
    const user_id = req.user_id;

    const result = await EstoqueEntrada.delete(id, user_id);

    if (result.status) {
      return res.status(200).json({ success: true, message: result.message });
    } else {
      return res.status(400).json({ success: false, message: result.err });
    }
  }
}

module.exports = new EstoqueEntradaController();


Nome do arquivo: backend\src\controllers\ItensPedidoController.js
Conteúdo:
const ItensPedido = require("../models/ItensPedido.js");

class ItensPedidoController {
  // Create a new item for a pedido
  async create(req, res) {
    const { pedidos_id, insumos_id, quantidade, unidades_medida_id } = req.body;
    const user_id = req.user_id; // Get user_id from the middleware

    const result = await ItensPedido.createItem(
      pedidos_id,
      insumos_id,
      quantidade,
      unidades_medida_id,
      user_id
    );

    if (result.status) {
      return res
        .status(200)
        .json({
          success: true,
          message: "Item created successfully!",
          id: result.id,
        });
    } else {
      return res.status(400).json({ success: false, message: result.err });
    }
  }

  // Fetch all items related to a specific pedido
  async findByPedido(req, res) {
    const { pedidos_id } = req.params;

    const result = await ItensPedido.findByPedido(pedidos_id);

    if (result.status) {
      return res.status(200).json({ success: true, itens: result.values });
    } else {
      return res.status(400).json({ success: false, message: result.err });
    }
  }

  // Fetch a specific item by its item_id
  async findById(req, res) {
    const { item_id } = req.params;

    const result = await ItensPedido.findById(item_id);

    if (result.status) {
      return res.status(200).json({ success: true, item: result.values });
    } else {
      return res.status(404).json({ success: false, message: result.message });
    }
  }

  // Update an item
  async update(req, res) {
    const { id } = req.params;
    const { insumos_id, quantidade, unidades_medida_id } = req.body;
    const user_id = req.user_id; // Get user_id from the middleware

    const result = await ItensPedido.update(
      id,
      insumos_id,
      quantidade,
      unidades_medida_id,
      user_id
    );

    if (result.status) {
      return res
        .status(200)
        .json({ success: true, message: "Item updated successfully!" });
    } else {
      return res.status(400).json({ success: false, message: result.err });
    }
  }

  // Delete an item
  async delete(req, res) {
    const { id } = req.params;
    const user_id = req.user_id; // Get user_id from the middleware

    const result = await ItensPedido.deleteItem(id, user_id);

    if (result.status) {
      return res.status(200).json({ success: true, message: result.message });
    } else {
      return res.status(400).json({ success: false, message: result.err });
    }
  }
}

module.exports = new ItensPedidoController();


Nome do arquivo: backend\src\controllers\PedidosController.js
Conteúdo:
const Pedidos = require("../models/Pedidos.js");

class PedidosController {
  // Create a new pedido
  async create(req, res) {
    const { usuarios_id, pessoas_id, descricao, data_pedido } = req.body;
    const user_id = req.user_id; // Get user_id from the middleware

    const result = await Pedidos.create(
      { usuarios_id, pessoas_id, descricao, data_pedido },
      user_id
    );

    if (result.status) {
      return res.status(200).json({
        success: true,
        message: "Pedido criado com sucesso!",
        id: result.id,
      });
    } else {
      return res.status(400).json({ success: false, message: result.err });
    }
  }

  // Get all pedidos
  async findAll(req, res) {
    const result = await Pedidos.findAll();

    if (result.status) {
      return res.status(200).json({ success: true, pedidos: result.values });
    } else {
      return res.status(400).json({ success: false, message: result.err });
    }
  }

  // Get a specific pedido by ID
  async findById(req, res) {
    const { id } = req.params;

    const result = await Pedidos.findById(id);

    if (result.status) {
      return res.status(200).json({ success: true, pedido: result.values });
    } else {
      return res.status(404).json({ success: false, message: result.message });
    }
  }

  // Update a pedido by ID
  async update(req, res) {
    const { id } = req.params;
    const { usuarios_id, pessoas_id, descricao, data_pedido } = req.body;
    const user_id = req.user_id; // Get user_id from the middleware

    const result = await Pedidos.update(
      id,
      usuarios_id,
      pessoas_id,
      descricao,
      data_pedido,
      user_id
    );

    if (result.status) {
      return res
        .status(200)
        .json({ success: true, message: "Pedido atualizado com sucesso!" });
    } else {
      return res.status(400).json({ success: false, message: result.err });
    }
  }

  // Delete a pedido by ID
  async delete(req, res) {
    const { id } = req.params;
    const user_id = req.user_id; // Get user_id from the middleware

    const result = await Pedidos.delete(id, user_id);

    if (result.status) {
      return res.status(200).json({ success: true, message: result.message });
    } else {
      return res.status(400).json({ success: false, message: result.err });
    }
  }

  // Fetch all doacoes related to a specific pedido
  async findDoacoesByPedido(req, res) {
    const { pedido_id } = req.params;

    const result = await Pedidos.findDoacoesByPedido(pedido_id);

    if (result.status) {
      return res.status(200).json({ success: true, doacoes: result.values });
    } else {
      return res.status(400).json({ success: false, message: result.err });
    }
  }

  // Link a doacao to a pedido
  async linkDoacao(req, res) {
    const { pedidos_id, doacoes_id } = req.body;
    const user_id = req.user_id; // Get user_id from the middleware

    const result = await Pedidos.linkDoacao(pedidos_id, doacoes_id, user_id);

    if (result.status) {
      return res.status(200).json({ success: true, message: result.message });
    } else {
      return res.status(400).json({ success: false, message: result.err });
    }
  }

  // Unlink a doacao from a pedido
  async unlinkDoacao(req, res) {
    const { pedidos_id, doacoes_id } = req.body;
    const user_id = req.user_id; // Get user_id from the middleware

    const result = await Pedidos.unlinkDoacao(pedidos_id, doacoes_id, user_id);

    if (result.status) {
      return res.status(200).json({ success: true, message: result.message });
    } else {
      return res.status(400).json({ success: false, message: result.err });
    }
  }
}

module.exports = new PedidosController();


Nome do arquivo: backend\src\controllers\PessoasController.js
Conteúdo:
const Pessoa = require("../models/Pessoa.js");

class PessoasController {
  // Create a new person
  async create(req, res) {
    const {
      tipo_pessoa,
      nome,
      documento,
      data_nascimento,
      email,
      endereco_id,
    } = req.body;
    const user_id = req.user_id; // Extract user_id from middleware

    const result = await Pessoa.create(
      tipo_pessoa,
      nome,
      documento,
      data_nascimento,
      email,
      endereco_id,
      user_id
    );

    if (result.status) {
      res.status(200).json({
        success: true,
        message: "Pessoa criada com sucesso!",
        id: result.id,
      });
    } else {
      res.status(400).json({ success: false, message: result.err });
    }
  }

  // Get all people
  async findAll(req, res) {
    const result = await Pessoa.findAll();

    if (result.status) {
      res.status(200).json({ success: true, pessoas: result.values });
    } else {
      res.status(400).json({ success: false, message: result.err });
    }
  }

  // Get a person by ID
  async findById(req, res) {
    const { id } = req.params;

    const result = await Pessoa.findById(id);

    if (result.status) {
      res.status(200).json({ success: true, pessoa: result.values });
    } else {
      res.status(404).json({ success: false, message: result.message });
    }
  }

  // Update a person by ID
  async update(req, res) {
    const { id } = req.params;
    const {
      tipo_pessoa,
      nome,
      documento,
      data_nascimento,
      email,
      endereco_id,
    } = req.body;
    const user_id = req.user_id; // Extract user_id from middleware

    const result = await Pessoa.update(
      id,
      tipo_pessoa,
      nome,
      documento,
      data_nascimento,
      email,
      endereco_id,
      user_id
    );

    if (result.status) {
      res.status(200).json({ success: true, message: result.message });
    } else {
      res.status(400).json({ success: false, message: result.err });
    }
  }

  // Delete a person by ID
  async delete(req, res) {
    const { id } = req.params;
    const user_id = req.user_id; // Extract user_id from middleware

    const result = await Pessoa.delete(id, user_id);

    if (result.status) {
      res.status(200).json({ success: true, message: result.message });
    } else {
      res.status(404).json({ success: false, message: result.message });
    }
  }

  // Get all details of a pessoa, including endereco and telefones
  async getDetails(req, res) {
    const { id } = req.params;

    const result = await Pessoa.getPessoaWithDetails(id);

    if (result.status) {
      return res.status(200).json({ success: true, details: result });
    } else {
      return res.status(404).json({ success: false, message: result.message });
    }
  }
}

module.exports = new PessoasController();


Nome do arquivo: backend\src\controllers\TelefonesController.js
Conteúdo:
const Telefone = require("../models/Telefone.js");

class TelefonesController {
  // Create a new phone
  async create(req, res) {
    const { tipo, ddi, ddd, numero } = req.body;
    const user_id = req.user_id; // Extract user_id from middleware

    const result = await Telefone.create(tipo, ddi, ddd, numero, user_id);

    if (result.status) {
      res.status(200).json({
        success: true,
        message: "Telefone criado com sucesso!",
        id: result.id,
      });
    } else {
      res.status(400).json({ success: false, message: result.err });
    }
  }

  // Get all phones
  async findAll(req, res) {
    const result = await Telefone.findAll();

    if (result.status) {
      res.status(200).json({ success: true, telefones: result.values });
    } else {
      res.status(400).json({ success: false, message: result.err });
    }
  }

  // Get phone by ID
  async findById(req, res) {
    const { id } = req.params;

    const result = await Telefone.findById(id);

    if (result.status) {
      res.status(200).json({ success: true, telefone: result.values });
    } else {
      res.status(404).json({ success: false, message: result.message });
    }
  }

  // Update phone by ID
  async update(req, res) {
    const { id } = req.params;
    const { tipo, ddi, ddd, numero } = req.body;
    const user_id = req.user_id; // Extract user_id from middleware

    const result = await Telefone.update(id, tipo, ddi, ddd, numero, user_id);

    if (result.status) {
      res.status(200).json({ success: true, message: result.message });
    } else {
      res.status(400).json({ success: false, message: result.err });
    }
  }

  // Delete phone by ID
  async delete(req, res) {
    const { id } = req.params;
    const user_id = req.user_id; // Extract user_id from middleware

    const result = await Telefone.delete(id, user_id); // Pass user_id to set session

    if (result.status) {
      return res.status(200).json({ success: true, message: result.message });
    } else {
      return res.status(404).json({ success: false, message: result.message });
    }
  }
}

module.exports = new TelefonesController();


Nome do arquivo: backend\src\controllers\UnidadeMedidaController.js
Conteúdo:
const UnidadeMedida = require("../models/UnidadeMedida");

class UnidadeMedidaController {
  // Create a new unidade_medida
  async create(req, res) {
    const { nome } = req.body;
    const user_id = req.user_id; // Get user_id from the middleware

    const result = await UnidadeMedida.create({ nome }, user_id);

    if (result.status) {
      return res.status(200).json({
        success: true,
        message: "Unidade de medida criada com sucesso!",
        id: result.id,
      });
    } else {
      return res.status(400).json({ success: false, message: result.err });
    }
  }

  // Fetch all unidades_medida
  async findAll(req, res) {
    const result = await UnidadeMedida.findAll(["id", "nome"]);

    if (result.status) {
      return res.status(200).json({ success: true, unidades: result.values });
    } else {
      return res.status(400).json({ success: false, message: result.err });
    }
  }

  // Fetch unidade_medida by ID
  async findById(req, res) {
    const { id } = req.params;

    const result = await UnidadeMedida.findById(id, ["id", "nome"]);

    if (result.status) {
      return res.status(200).json({ success: true, unidade: result.values });
    } else {
      return res.status(404).json({ success: false, message: result.message });
    }
  }

  // Update unidade_medida by ID
  async update(req, res) {
    const { id } = req.params;
    const { nome } = req.body;
    const user_id = req.user_id; // Get user_id from the middleware

    const result = await UnidadeMedida.update(id, { nome }, user_id);

    if (result.status) {
      return res
        .status(200)
        .json({
          success: true,
          message: "Unidade de medida atualizada com sucesso!",
        });
    } else {
      return res.status(400).json({ success: false, message: result.err });
    }
  }

  // Delete unidade_medida by ID
  async delete(req, res) {
    const { id } = req.params;
    const user_id = req.user_id; // Get user_id from the middleware

    const result = await UnidadeMedida.delete(id, user_id);

    if (result.status) {
      return res.status(200).json({ success: true, message: result.message });
    } else {
      return res.status(400).json({ success: false, message: result.err });
    }
  }
}

module.exports = new UnidadeMedidaController();


Nome do arquivo: backend\src\controllers\EstoqueVencidoController.js
Conteúdo:
const EstoqueVencido = require("../models/EstoqueVencido.js");

class EstoqueVencidoController {
  // Fetch all non-discarded expired items
  async findAllNonDescartados(req, res) {
    const result = await EstoqueVencido.findAllNonDescartados();

    if (result.status) {
      return res
        .status(200)
        .json({ success: true, estoque_vencido: result.values });
    } else {
      return res.status(400).json({ success: false, message: result.err });
    }
  }

  // Fetch all discarded expired items
  async findAllDescartados(req, res) {
    const result = await EstoqueVencido.findAllDescartados();

    if (result.status) {
      return res
        .status(200)
        .json({ success: true, estoque_vencido: result.values });
    } else {
      return res.status(400).json({ success: false, message: result.err });
    }
  }

  // Fetch a non-discarded expired item by its ID
  async findByIdNonDescartado(req, res) {
    const { id } = req.params;

    const result = await EstoqueVencido.findByIdNonDescartado(id);

    if (result.status) {
      return res
        .status(200)
        .json({ success: true, estoque_vencido: result.values });
    } else {
      return res.status(404).json({ success: false, message: result.message });
    }
  }

  // Fetch a discarded expired item by its ID
  async findByIdDescartado(req, res) {
    const { id } = req.params;

    const result = await EstoqueVencido.findByIdDescartado(id);

    if (result.status) {
      return res
        .status(200)
        .json({ success: true, estoque_vencido: result.values });
    } else {
      return res.status(404).json({ success: false, message: result.message });
    }
  }

  // Fetch non-discarded expired items by Insumo ID
  async findByInsumoIdNonDescartado(req, res) {
    const { insumos_id } = req.params;

    const result = await EstoqueVencido.findByInsumoIdNonDescartado(insumos_id);

    if (result.status) {
      return res
        .status(200)
        .json({ success: true, estoque_vencido: result.values });
    } else {
      return res.status(404).json({ success: false, message: result.message });
    }
  }

  // Fetch discarded expired items by Insumo ID
  async findByInsumoIdDescartado(req, res) {
    const { insumos_id } = req.params;

    const result = await EstoqueVencido.findByInsumoIdDescartado(insumos_id);

    if (result.status) {
      return res
        .status(200)
        .json({ success: true, estoque_vencido: result.values });
    } else {
      return res.status(404).json({ success: false, message: result.message });
    }
  }

  // Update 'descartado' status
  async updateDescartado(req, res) {
    const { id } = req.params;
    const { descartado } = req.body;

    const result = await EstoqueVencido.updateDescartado(id, descartado);

    if (result.status) {
      return res.status(200).json({ success: true, message: result.message });
    } else {
      return res.status(400).json({ success: false, message: result.err });
    }
  }
}

module.exports = new EstoqueVencidoController();


Nome do arquivo: backend\src\controllers\InsumosController.js
Conteúdo:
const Insumos = require("../models/Insumos.js");

class InsumosController {
  // Create a new insumo
  async create(req, res) {
    const { nome, categoria_insumos_id, observacoes } = req.body;
    const user_id = req.user_id; // Get user_id from the middleware

    const result = await Insumos.create(
      { nome, categoria_insumos_id, observacoes },
      user_id
    );

    if (result.status) {
      return res
        .status(200)
        .json({
          success: true,
          message: "Insumo criado com sucesso!",
          id: result.id,
        });
    } else {
      return res.status(400).json({ success: false, message: result.err });
    }
  }

  // Fetch all insumos
  async findAll(req, res) {
    const result = await Insumos.findAll();

    if (result.status) {
      return res.status(200).json({ success: true, insumos: result.values });
    } else {
      return res.status(400).json({ success: false, message: result.err });
    }
  }

  // Fetch insumo by ID
  async findById(req, res) {
    const { id } = req.params;

    const result = await Insumos.findById(id);

    if (result.status) {
      return res.status(200).json({ success: true, insumo: result.values });
    } else {
      return res.status(404).json({ success: false, message: result.message });
    }
  }

  // Update an insumo by ID
  async update(req, res) {
    const { id } = req.params;
    const { nome, categoria_insumos_id, observacoes } = req.body;
    const user_id = req.user_id; // Get user_id from the middleware

    const result = await Insumos.update(
      id,
      { nome, categoria_insumos_id, observacoes },
      user_id
    );

    if (result.status) {
      return res.status(200).json({ success: true, message: result.message });
    } else {
      return res.status(400).json({ success: false, message: result.err });
    }
  }

  // Delete an insumo by ID
  async delete(req, res) {
    const { id } = req.params;
    const user_id = req.user_id; // Get user_id from the middleware

    const result = await Insumos.delete(id, user_id);

    if (result.status) {
      return res.status(200).json({ success: true, message: result.message });
    } else {
      return res.status(400).json({ success: false, message: result.err });
    }
  }
}

module.exports = new InsumosController();


Nome do arquivo: backend\src\controllers\ValoresNutricionaisController.js
Conteúdo:
const ValoresNutricionais = require("../models/ValoresNutricionais");

class ValoresNutricionaisController {
  // Update valores_nutricionais by insumos_id
  async update(req, res) {
    const { insumos_id } = req.params; // Extract the insumo ID from the request
    const data = req.body; // Get the nutritional values from the request body
    const user_id = req.user_id; // Get user_id from the middleware

    const result = await ValoresNutricionais.update(insumos_id, data, user_id);

    if (result.status) {
      return res.status(200).json({
        success: true,
        message: "Valores nutricionais atualizados com sucesso!",
      });
    } else {
      return res.status(400).json({ success: false, message: result.err });
    }
  }

  // Fetch all valores_nutricionais
  async findAll(req, res) {
    const result = await ValoresNutricionais.findAll();

    if (result.status) {
      return res.status(200).json({ success: true, valores: result.values });
    } else {
      return res.status(400).json({ success: false, message: result.err });
    }
  }

  // Fetch valores_nutricionais by insumo ID
  async findByInsumo(req, res) {
    const { insumos_id } = req.params;

    const result = await ValoresNutricionais.findById(insumos_id);

    if (result.status) {
      return res.status(200).json({ success: true, valor: result.values });
    } else {
      return res.status(404).json({ success: false, message: result.message });
    }
  }

  // Delete valores_nutricionais by insumos_id
  async delete(req, res) {
    const { insumos_id } = req.params;
    const user_id = req.user_id; // Get user_id from the middleware

    const result = await ValoresNutricionais.delete(insumos_id, user_id);

    if (result.status) {
      return res.status(200).json({ success: true, message: result.message });
    } else {
      return res.status(400).json({ success: false, message: result.err });
    }
  }
}

module.exports = new ValoresNutricionaisController();


Nome do arquivo: backend\src\controllers\UsersController.js
Conteúdo:
require("dotenv").config();
var bcrypt = require("bcryptjs");
var jwt = require("jsonwebtoken");
var User = require("../models/Users.js");

class UsersController {
  async create(req, res) {
    const user_id = req.user_id; // Obtain user_id from middleware
    const { username, email, password, funcao } = req.body;

    const result = await User.new(username, email, password, funcao, user_id);
    if (result.status) {
      res
        .status(200)
        .json({ success: true, message: "Usuário cadastrado com sucesso!" });
    } else {
      res.status(400).json({ success: false, message: result.err });
    }
  }

  async findAll(req, res) {
    const users = await User.findAll(["id", "username", "email", "funcao"]);
    if (users.status) {
      res.status(200).json({ success: true, values: users.values });
    } else {
      res.status(404).json({ success: false, message: users.err });
    }
  }

  async findById(req, res) {
    const id = parseInt(req.params.id);
    if (!Number.isInteger(id)) {
      return res
        .status(400)
        .json({ success: false, message: "Parâmetro inválido." });
    }

    const user = await User.findById(id);
    if (!user.status) {
      res
        .status(404)
        .json({ success: false, message: user.message || user.err });
    } else {
      res.status(200).json({ success: true, message: user.values });
    }
  }

  async delete(req, res) {
    const user_id = req.user_id; // Obtain user_id from middleware
    const id = parseInt(req.params.id);

    if (!Number.isInteger(id)) {
      return res
        .status(400)
        .json({ success: false, message: "Parâmetro inválido." });
    }

    const result = await User.delete(id, user_id); // Delete using BaseModel method
    if (result.status) {
      res.status(200).json({ success: true, message: result.message });
    } else {
      res.status(406).json({ success: false, message: result.err });
    }
  }

  async update(req, res) {
    const user_id = req.user_id; // Extracted from middleware
    const id = parseInt(req.params.id); // User ID to update
    const { username, email, funcao } = req.body; // Fields to update

    if (!Number.isInteger(id)) {
      return res
        .status(400)
        .json({ success: false, message: "Parâmetro inválido." });
    }

    // Debugging: Log user_id and id to be updated
    console.log("User ID from middleware:", user_id);
    console.log("Updating user with ID:", id);

    // Pass user_id to the User.update method
    const result = await User.update(id, { username, email, funcao }, user_id);

    if (result.status) {
      res.status(200).json({ success: true, message: result.message });
    } else {
      res.status(400).json({ success: false, message: result.err });
    }
  }
  async login(req, res) {
    const { email, password } = req.body;

    try {
      const user = await User.findByEmail(email);
      if (!user.status) {
        return res
          .status(404)
          .json({ success: false, message: user.message || user.err });
      }

      // Debugging: Log user values to check if id is present
      console.log("User values in login:", user.values);

      const checkPassword = await bcrypt.compare(password, user.values.senha);
      if (!checkPassword) {
        return res
          .status(406)
          .json({ success: false, message: "Senha inválida." });
      }

      // Ensure user ID is included in JWT token
      const token = jwt.sign(
        {
          id: user.values.id, // Ensure user.id exists
          email: user.values.email,
          funcao: user.values.funcao,
        },
        process.env.JWT_SECRET,
        { expiresIn: "1h" }
      );

      res.status(200).json({ success: true, token: token });
    } catch (error) {
      console.error("Login error:", error.message);
      res
        .status(500)
        .json({ success: false, message: "Erro interno no servidor." });
    }
  }
}

module.exports = new UsersController();


Nome do arquivo: backend\src\validators\val_enderecos.js
Conteúdo:
const { check } = require("express-validator");

// Validações para criação de um novo endereço
const createEnderecoValidator = [
  check("tipo").optional().isString().withMessage("Tipo deve ser uma string"),
  check("logradouro")
    .notEmpty()
    .isLength({ min: 5, max: 60 })
    .withMessage("Logradouro deve ter entre 5 e 60 caracteres"),
  check("numero")
    .notEmpty()
    .isLength({ max: 10 })
    .withMessage("Número deve ter no máximo 10 caracteres"),
  check("complemento")
    .optional()
    .isLength({ max: 30 })
    .withMessage("Complemento deve ter no máximo 30 caracteres"),
  check("bairro")
    .notEmpty()
    .isLength({ min: 3, max: 60 })
    .withMessage("Bairro deve ter entre 3 e 60 caracteres"),
  check("cidade")
    .notEmpty()
    .isLength({ min: 3, max: 60 })
    .withMessage("Cidade deve ter entre 3 e 60 caracteres"),
  check("estado")
    .notEmpty()
    .isLength({ min: 2, max: 2 })
    .withMessage("Estado deve ter exatamente 2 caracteres"),
  check("cep")
    .notEmpty()
    .isLength({ min: 8, max: 8 })
    .withMessage("CEP deve ter exatamente 8 caracteres"),
];

// Validações para atualização de um endereço existente
const updateEnderecoValidator = [
  check("tipo").optional().isString().withMessage("Tipo deve ser uma string"),
  check("logradouro")
    .optional()
    .isLength({ min: 5, max: 60 })
    .withMessage("Logradouro deve ter entre 5 e 60 caracteres"),
  check("numero")
    .optional()
    .isLength({ max: 10 })
    .withMessage("Número deve ter no máximo 10 caracteres"),
  check("complemento")
    .optional()
    .isLength({ max: 30 })
    .withMessage("Complemento deve ter no máximo 30 caracteres"),
  check("bairro")
    .optional()
    .isLength({ min: 3, max: 60 })
    .withMessage("Bairro deve ter entre 3 e 60 caracteres"),
  check("cidade")
    .optional()
    .isLength({ min: 3, max: 60 })
    .withMessage("Cidade deve ter entre 3 e 60 caracteres"),
  check("estado")
    .optional()
    .isLength({ min: 2, max: 2 })
    .withMessage("Estado deve ter exatamente 2 caracteres"),
  check("cep")
    .optional()
    .isLength({ min: 8, max: 8 })
    .withMessage("CEP deve ter exatamente 8 caracteres"),
];

module.exports = {
  createEnderecoValidator,
  updateEnderecoValidator,
};


Nome do arquivo: backend\src\validators\val_users.js
Conteúdo:
const { check } = require("express-validator");

// Validações para criação de um novo usuário
const createUserValidator = [
  check("username")
    .notEmpty()
    .isLength({ min: 3, max: 50 })
    .withMessage("O nome de usuário deve ter entre 3 e 50 caracteres."),
  check("email").isEmail().withMessage("O e-mail fornecido não é válido."),
  check("password")
    .isLength({ min: 6 })
    .withMessage("A senha deve ter no mínimo 6 caracteres."),
  check("funcao")
    .isIn([
      "administrador",
      "nutricionista",
      "cozinheiro",
      "professor",
      "monitor",
    ])
    .withMessage(
      "Função inválida, escolha entre: administrador, nutricionista, cozinheiro, professor, monitor."
    ),
];

// Validações para atualização de um usuário
const updateUserValidator = [
  check("username")
    .optional()
    .isLength({ min: 3, max: 50 })
    .withMessage("O nome de usuário deve ter entre 3 e 50 caracteres."),
  check("email")
    .optional()
    .isEmail()
    .withMessage("O e-mail fornecido não é válido."),
  check("funcao")
    .optional()
    .isIn([
      "administrador",
      "nutricionista",
      "cozinheiro",
      "professor",
      "monitor",
    ])
    .withMessage(
      "Função inválida, escolha entre: administrador, nutricionista, cozinheiro, professor, monitor."
    ),
];

module.exports = {
  createUserValidator,
  updateUserValidator,
};


Nome do arquivo: backend\src\middlewares\authMiddleware.js
Conteúdo:
var jwt = require("jsonwebtoken");

module.exports = function (requiredRole) {
  return function (req, res, next) {
    const authToken = req.headers["authorization"];

    // Debugging: Log the received Authorization header
    console.log("Received Authorization header:", authToken);

    if (!authToken) {
      return res.status(401).json({
        success: false,
        message: "Token de autenticação não fornecido.",
      });
    }

    const bearerToken = authToken.split(" ");
    if (bearerToken.length !== 2 || bearerToken[0] !== "Bearer") {
      return res.status(400).json({
        success: false,
        message: "Formato do token de autenticação inválido.",
      });
    }

    const jwtToken = bearerToken[1];

    try {
      const decoded = jwt.verify(jwtToken, process.env.JWT_SECRET);

      // Debugging: Log the decoded JWT payload
      console.log("Decoded JWT in middleware:", decoded);

      req.user_id = decoded.id; // Ensure id is correctly extracted

      if (requiredRole && decoded.funcao !== requiredRole) {
        return res.status(403).json({
          success: false,
          message: `Usuário não autorizado. Acesso reservado a ${requiredRole}.`,
        });
      }

      next(); // Proceed to the next middleware/controller
    } catch (err) {
      console.error("JWT verification error:", err.message); // Debugging log
      return res.status(403).json({
        success: false,
        message: "Token de autenticação inválido ou expirado.",
      });
    }
  };
};


Nome do arquivo: backend\src\middlewares\validate.js
Conteúdo:
const { validationResult } = require("express-validator");

module.exports = function (req, res, next) {
  const errors = validationResult(req);
  if (!errors.isEmpty()) {
    return res.status(400).json({ success: false, errors: errors.array() });
  }
  next();
};


Nome do arquivo: backend\src\data\connection.js
Conteúdo:
require("dotenv").config();
const knex = require("knex")({
  client: "mysql2",
  connection: {
    host: process.env.DB_HOST,
    port: process.env.DB_PORT,
    user: process.env.DB_USER,
    password: process.env.DB_PASSWORD,
    database: process.env.DB_NAME,
  },
});

module.exports = knex;


Nome do arquivo: backend\src\data\event_atualizar_status_estoque.sql
Conteúdo:
-- Certifique-se de que os eventos estão ativados no MySQL
SHOW VARIABLES LIKE 'event_scheduler';

-- Se o event_scheduler estiver desativado (OFF), você pode ativá-lo com:
SET GLOBAL event_scheduler = ON;

-- Cria Evento
DELIMITER $$

CREATE EVENT IF NOT EXISTS `event_atualizar_status_estoque`
ON SCHEDULE EVERY 1 DAY
STARTS CURRENT_DATE + INTERVAL 1 DAY
DO
BEGIN
    -- Definir @user_id como um valor que indica operação automática
    SET @user_id = -1;

    -- Atualizar status para 'Vence hoje' (3) se a data de validade for igual à data atual
    UPDATE `db_apae_estoque`.`estoque`
    SET `status` = 3
    WHERE `data_validade` = CURRENT_DATE;

    -- Atualizar status para 'Vencido' (4) se a data de validade for menor que a data atual
    UPDATE `db_apae_estoque`.`estoque`
    SET `status` = 4
    WHERE `data_validade` < CURRENT_DATE;
END$$

DELIMITER ;


Nome do arquivo: backend\src\data\schema.sql
Conteúdo:
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema db_apae_estoque
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema db_apae_estoque
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `db_apae_estoque` DEFAULT CHARACTER SET utf8 ;
USE `db_apae_estoque` ;

-- -----------------------------------------------------
-- Table `db_apae_estoque`.`usuarios`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_apae_estoque`.`usuarios` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `username` VARCHAR(50) NOT NULL,
  `senha` VARCHAR(255) NOT NULL,
  `email` VARCHAR(100) NOT NULL,
  `funcao` ENUM("administrador", "nutricionista", "cozinheiro", "professor", "monitor") NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `username_UNIQUE` (`username` ASC) VISIBLE,
  UNIQUE INDEX `email_UNIQUE` (`email` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `db_apae_estoque`.`endereco`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_apae_estoque`.`endereco` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `tipo` VARCHAR(20) NULL,
  `logradouro` VARCHAR(60) NULL,
  `numero` VARCHAR(10) NULL,
  `complemento` VARCHAR(30) NULL,
  `bairro` VARCHAR(60) NULL,
  `cidade` VARCHAR(60) NULL,
  `estado` CHAR(2) NULL,
  `cep` CHAR(8) NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `db_apae_estoque`.`pessoas`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_apae_estoque`.`pessoas` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `tipo_pessoa` TINYINT(1) NOT NULL COMMENT '0 = Pessoa Fisica\n1 = Pessoa Juridica',
  `nome` VARCHAR(150) NOT NULL,
  `documento` CHAR(14) NOT NULL,
  `data_nascimento` DATE NOT NULL,
  `email` VARCHAR(100) NOT NULL,
  `endereco_id` INT NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `email_UNIQUE` (`email` ASC) VISIBLE,
  INDEX `fk_pessoa_endereco1_idx` (`endereco_id` ASC) VISIBLE,
  UNIQUE INDEX `documento_UNIQUE` (`documento` ASC) VISIBLE,
  CONSTRAINT `fk_pessoa_endereco1`
    FOREIGN KEY (`endereco_id`)
    REFERENCES `db_apae_estoque`.`endereco` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `db_apae_estoque`.`telefone`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_apae_estoque`.`telefone` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `tipo` ENUM("fixo", "celular") NULL,
  `ddi` VARCHAR(5) NULL,
  `ddd` CHAR(3) NULL,
  `numero` VARCHAR(10) NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `db_apae_estoque`.`categoria_insumos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_apae_estoque`.`categoria_insumos` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `nome` VARCHAR(100) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `nome_UNIQUE` (`nome` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `db_apae_estoque`.`insumos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_apae_estoque`.`insumos` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `nome` VARCHAR(45) NULL,
  `categoria_insumos_id` INT NOT NULL,
  `observacoes` TEXT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_insumos_categoria_insumos1_idx` (`categoria_insumos_id` ASC) VISIBLE,
  CONSTRAINT `fk_insumos_categoria_insumos1`
    FOREIGN KEY (`categoria_insumos_id`)
    REFERENCES `db_apae_estoque`.`categoria_insumos` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `db_apae_estoque`.`doacoes`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_apae_estoque`.`doacoes` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `pessoas_id` INT NOT NULL,
  `descricao` TEXT NULL,
  `data_doacao` DATE NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_doacoes_pessoas1_idx` (`pessoas_id` ASC) VISIBLE,
  CONSTRAINT `fk_doacoes_pessoas1`
    FOREIGN KEY (`pessoas_id`)
    REFERENCES `db_apae_estoque`.`pessoas` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `db_apae_estoque`.`pedidos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_apae_estoque`.`pedidos` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `usuarios_id` INT NOT NULL,
  `pessoas_id` INT NOT NULL,
  `descricao` TEXT NULL,
  `data_pedido` TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`),
  INDEX `fk_pedidos_pessoas1_idx` (`pessoas_id` ASC) VISIBLE,
  INDEX `fk_pedidos_usuarios1_idx` (`usuarios_id` ASC) VISIBLE,
  CONSTRAINT `fk_pedidos_pessoas1`
    FOREIGN KEY (`pessoas_id`)
    REFERENCES `db_apae_estoque`.`pessoas` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_pedidos_usuarios1`
    FOREIGN KEY (`usuarios_id`)
    REFERENCES `db_apae_estoque`.`usuarios` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `db_apae_estoque`.`unidades_medida`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_apae_estoque`.`unidades_medida` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `nome` VARCHAR(50) NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `db_apae_estoque`.`itens_pedido`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_apae_estoque`.`itens_pedido` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `pedidos_id` INT NOT NULL,
  `insumos_id` INT NOT NULL,
  `quantidade` DECIMAL(10,2) NULL,
  `unidades_medida_id` INT NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_itens_pedido_pedidos1_idx` (`pedidos_id` ASC) VISIBLE,
  INDEX `fk_itens_pedido_insumos1_idx` (`insumos_id` ASC) VISIBLE,
  INDEX `fk_itens_pedido_unidades_medida1_idx` (`unidades_medida_id` ASC) VISIBLE,
  CONSTRAINT `fk_itens_pedido_pedidos1`
    FOREIGN KEY (`pedidos_id`)
    REFERENCES `db_apae_estoque`.`pedidos` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_itens_pedido_insumos1`
    FOREIGN KEY (`insumos_id`)
    REFERENCES `db_apae_estoque`.`insumos` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_itens_pedido_unidades_medida1`
    FOREIGN KEY (`unidades_medida_id`)
    REFERENCES `db_apae_estoque`.`unidades_medida` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `db_apae_estoque`.`estoque_entrada`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_apae_estoque`.`estoque_entrada` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `insumos_id` INT NOT NULL,
  `doacoes_id` INT NULL DEFAULT NULL,
  `quantidade` DECIMAL(10,2) NULL,
  `unidades_medida_id` INT NOT NULL,
  `data_validade` DATE NULL,
  `data_entrada` TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`),
  INDEX `fk_itens_doacao_insumos1_idx` (`insumos_id` ASC) VISIBLE,
  INDEX `fk_estoque_entrada_unidades_medida1_idx` (`unidades_medida_id` ASC) VISIBLE,
  CONSTRAINT `fk_itens_doacao_insumos1`
    FOREIGN KEY (`insumos_id`)
    REFERENCES `db_apae_estoque`.`insumos` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_estoque_entrada_unidades_medida1`
    FOREIGN KEY (`unidades_medida_id`)
    REFERENCES `db_apae_estoque`.`unidades_medida` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `db_apae_estoque`.`estoque`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_apae_estoque`.`estoque` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `insumos_id` INT NOT NULL,
  `quantidade` INT NOT NULL,
  `unidades_medida_id` INT NOT NULL,
  `status` TINYINT(1) NOT NULL DEFAULT 0 COMMENT 'Fechado = 0\nAberto = 1\nConsumido = 2\nVence hoje = 3\nVencido = 4',
  `data_validade` DATE NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_estoque_insumos1_idx` (`insumos_id` ASC) VISIBLE,
  INDEX `fk_estoque_unidades_medida1_idx` (`unidades_medida_id` ASC) VISIBLE,
  CONSTRAINT `fk_estoque_insumos1`
    FOREIGN KEY (`insumos_id`)
    REFERENCES `db_apae_estoque`.`insumos` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_estoque_unidades_medida1`
    FOREIGN KEY (`unidades_medida_id`)
    REFERENCES `db_apae_estoque`.`unidades_medida` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `db_apae_estoque`.`pessoa_has_telefone`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_apae_estoque`.`pessoa_has_telefone` (
  `pessoa_id` INT NOT NULL,
  `telefone_id` INT NOT NULL,
  PRIMARY KEY (`pessoa_id`, `telefone_id`),
  INDEX `fk_pessoa_fisica_has_telefone_telefone1_idx` (`telefone_id` ASC) VISIBLE,
  INDEX `fk_pessoa_fisica_has_telefone_pessoa_fisica1_idx` (`pessoa_id` ASC) VISIBLE,
  CONSTRAINT `fk_pessoa_fisica_has_telefone_pessoa_fisica1`
    FOREIGN KEY (`pessoa_id`)
    REFERENCES `db_apae_estoque`.`pessoas` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_pessoa_fisica_has_telefone_telefone1`
    FOREIGN KEY (`telefone_id`)
    REFERENCES `db_apae_estoque`.`telefone` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `db_apae_estoque`.`valores_nutricionais`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_apae_estoque`.`valores_nutricionais` (
  `insumos_id` INT NOT NULL,
  `porcao` VARCHAR(50) NULL DEFAULT NULL,
  `calorias` DECIMAL(10,2) NULL DEFAULT NULL,
  `carboidratros` DECIMAL(10,2) NULL DEFAULT NULL,
  `proteinas` DECIMAL(10,2) NULL DEFAULT NULL,
  `gorduras_totais` DECIMAL(10,2) NULL DEFAULT NULL,
  `gorduras_saturadas` DECIMAL(10,2) NULL DEFAULT NULL,
  `gorduras_trans` DECIMAL(10,2) NULL DEFAULT NULL,
  `fibras` DECIMAL(10,2) NULL DEFAULT NULL,
  `acucares` DECIMAL(10,2) NULL DEFAULT NULL,
  `sodio` DECIMAL(10,2) NULL DEFAULT NULL,
  `colesterol` DECIMAL(10,2) NULL DEFAULT NULL,
  `calcio` DECIMAL(10,2) NULL DEFAULT NULL,
  `ferro` DECIMAL(10,2) NULL DEFAULT NULL,
  `potassio` DECIMAL(10,2) NULL DEFAULT NULL,
  `vitamina_a` DECIMAL(10,2) NULL DEFAULT NULL,
  `vitamina_c` DECIMAL(10,2) NULL DEFAULT NULL,
  `vitamina_d` DECIMAL(10,2) NULL DEFAULT NULL,
  `vitamina_e` DECIMAL(10,2) NULL DEFAULT NULL,
  `vitamina_k` DECIMAL(10,2) NULL DEFAULT NULL,
  `vitamina_b1` DECIMAL(10,2) NULL DEFAULT NULL,
  `vitamina_b2` DECIMAL(10,2) NULL DEFAULT NULL,
  `vitamina_b3` DECIMAL(10,2) NULL DEFAULT NULL,
  `vitamina_b6` DECIMAL(10,2) NULL DEFAULT NULL,
  `vitamina_b12` DECIMAL(10,2) NULL DEFAULT NULL,
  `acido_folico` DECIMAL(10,2) NULL DEFAULT NULL,
  `percentual_valor_diario` JSON NULL DEFAULT NULL,
  PRIMARY KEY (`insumos_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `db_apae_estoque`.`estoque_saida`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_apae_estoque`.`estoque_saida` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `insumos_id` INT NOT NULL,
  `quantidade` DECIMAL(10,2) NOT NULL,
  `unidades_medida_id` INT NOT NULL,
  `data_saida` TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP,
  `observacao` TEXT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_estoque_saida_insumos1_idx` (`insumos_id` ASC) VISIBLE,
  INDEX `fk_estoque_saida_unidades_medida1_idx` (`unidades_medida_id` ASC) VISIBLE,
  CONSTRAINT `fk_estoque_saida_insumos1`
    FOREIGN KEY (`insumos_id`)
    REFERENCES `db_apae_estoque`.`insumos` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_estoque_saida_unidades_medida1`
    FOREIGN KEY (`unidades_medida_id`)
    REFERENCES `db_apae_estoque`.`unidades_medida` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `db_apae_estoque`.`estoque_vencido`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_apae_estoque`.`estoque_vencido` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `insumos_id` INT NOT NULL,
  `quantidade` INT NOT NULL,
  `unidades_medida_id` INT NOT NULL,
  `data_validade` DATE NOT NULL,
  `descartado` TINYINT(1) NOT NULL DEFAULT 0,
  `data_movido` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `data_atualizado` TIMESTAMP NULL DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`),
  INDEX `fk_estoque_insumos1_idx` (`insumos_id` ASC) VISIBLE,
  INDEX `fk_estoque_unidades_medida1_idx` (`unidades_medida_id` ASC) VISIBLE,
  CONSTRAINT `fk_estoque_insumos10`
    FOREIGN KEY (`insumos_id`)
    REFERENCES `db_apae_estoque`.`insumos` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_estoque_unidades_medida10`
    FOREIGN KEY (`unidades_medida_id`)
    REFERENCES `db_apae_estoque`.`unidades_medida` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `db_apae_estoque`.`doacoes_has_pedidos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_apae_estoque`.`doacoes_has_pedidos` (
  `doacoes_id` INT NOT NULL,
  `pedidos_id` INT NOT NULL,
  PRIMARY KEY (`doacoes_id`, `pedidos_id`),
  INDEX `fk_doacoes_has_pedidos_pedidos1_idx` (`pedidos_id` ASC) VISIBLE,
  INDEX `fk_doacoes_has_pedidos_doacoes1_idx` (`doacoes_id` ASC) VISIBLE,
  CONSTRAINT `fk_doacoes_has_pedidos_doacoes1`
    FOREIGN KEY (`doacoes_id`)
    REFERENCES `db_apae_estoque`.`doacoes` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_doacoes_has_pedidos_pedidos1`
    FOREIGN KEY (`pedidos_id`)
    REFERENCES `db_apae_estoque`.`pedidos` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `db_apae_estoque`.`log_endereco_main`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_apae_estoque`.`log_endereco_main` (
  `endereco_id` INT NOT NULL,
  `revisao_atual` INT NOT NULL DEFAULT 1,
  `criado_por` INT NOT NULL,
  `data_criado` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`endereco_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `db_apae_estoque`.`log_endereco_content`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_apae_estoque`.`log_endereco_content` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `log_endereco_main_endereco_id` INT NOT NULL,
  `revisao` INT NOT NULL,
  `status` TINYINT(1) NULL DEFAULT 1 COMMENT '0 = Deletado\n1 = Ativo',
  `tipo` VARCHAR(20) NULL,
  `logradouro` VARCHAR(60) NULL,
  `numero` VARCHAR(10) NULL,
  `complemento` VARCHAR(30) NULL,
  `bairro` VARCHAR(60) NULL,
  `cidade` VARCHAR(60) NULL,
  `estado` CHAR(2) NULL,
  `cep` CHAR(8) NULL,
  `modificado_por` INT NOT NULL,
  `data_modificacao` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`),
  INDEX `fk_log_endereco_content_log_endereco_main1_idx` (`log_endereco_main_endereco_id` ASC) VISIBLE,
  CONSTRAINT `fk_log_endereco_content_log_endereco_main1`
    FOREIGN KEY (`log_endereco_main_endereco_id`)
    REFERENCES `db_apae_estoque`.`log_endereco_main` (`endereco_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `db_apae_estoque`.`log_telefone_main`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_apae_estoque`.`log_telefone_main` (
  `telefone_id` INT NOT NULL,
  `revisao_atual` INT NOT NULL DEFAULT 1,
  `criado_por` INT NOT NULL,
  `data_criado` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`telefone_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `db_apae_estoque`.`log_telefone_content`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_apae_estoque`.`log_telefone_content` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `log_telefone_main_telefone_id` INT NOT NULL,
  `revisao` INT NOT NULL,
  `status` TINYINT(1) NOT NULL DEFAULT 1 COMMENT '0 = Deletado\n1 = Ativo',
  `tipo` ENUM("fixo", "celular") NULL,
  `ddi` VARCHAR(5) NULL,
  `ddd` CHAR(3) NULL,
  `numero` VARCHAR(10) NULL,
  `modificado_por` INT NOT NULL,
  `data_modificacao` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`),
  INDEX `fk_log_telefone_content_log_telefone_main1_idx` (`log_telefone_main_telefone_id` ASC) VISIBLE,
  CONSTRAINT `fk_log_telefone_content_log_telefone_main1`
    FOREIGN KEY (`log_telefone_main_telefone_id`)
    REFERENCES `db_apae_estoque`.`log_telefone_main` (`telefone_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `db_apae_estoque`.`log_pessoas_main`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_apae_estoque`.`log_pessoas_main` (
  `pessoas_id` INT NOT NULL,
  `revisao_atual` INT NOT NULL DEFAULT 1,
  `criado_por` INT NOT NULL,
  `data_criado` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`pessoas_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `db_apae_estoque`.`log_pessoas_content`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_apae_estoque`.`log_pessoas_content` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `log_pessoas_main_pessoas_id` INT NOT NULL,
  `revisao` INT NOT NULL,
  `status` TINYINT(1) NULL DEFAULT 1 COMMENT '0 = Deletado\n1 = Ativo',
  `tipo_pessoa` TINYINT(1) NOT NULL,
  `nome` VARCHAR(150) NOT NULL,
  `documento` CHAR(14) NOT NULL,
  `data_nascimento` DATE NOT NULL,
  `email` VARCHAR(100) NOT NULL,
  `endereco_id` INT NOT NULL,
  `modificado_por` INT NOT NULL,
  `data_modificacao` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`),
  INDEX `fk_log_pessoas_content_log_pessoas_main1_idx` (`log_pessoas_main_pessoas_id` ASC) VISIBLE,
  CONSTRAINT `fk_log_pessoas_content_log_pessoas_main1`
    FOREIGN KEY (`log_pessoas_main_pessoas_id`)
    REFERENCES `db_apae_estoque`.`log_pessoas_main` (`pessoas_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `db_apae_estoque`.`log_pessoa_has_telefone`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_apae_estoque`.`log_pessoa_has_telefone` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `pessoa_id` INT NOT NULL,
  `telefone_id` INT NOT NULL,
  `acao` ENUM("INSERT", "DELETE") NOT NULL COMMENT 'INSERT = Adicionado\nDELETE = Removido',
  `modificado_por` INT NOT NULL,
  `data_modificacao` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `db_apae_estoque`.`log_doacoes_main`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_apae_estoque`.`log_doacoes_main` (
  `doacoes_id` INT NOT NULL,
  `revisao_atual` INT NOT NULL DEFAULT 1,
  `criado_por` INT NOT NULL,
  `data_criado` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`doacoes_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `db_apae_estoque`.`log_doacoes_content`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_apae_estoque`.`log_doacoes_content` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `log_doacoes_main_doacoes_id` INT NOT NULL,
  `revisao` INT NOT NULL,
  `status` TINYINT(1) NOT NULL DEFAULT 1 COMMENT '0 = Deletado\n1 = Ativo',
  `pessoas_id` INT NOT NULL,
  `descricao` TEXT NULL,
  `data_doacao` DATE NULL,
  `modificado_por` INT NOT NULL,
  `data_modificacao` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`),
  INDEX `fk_log_doacoes_content_log_doacoes_main1_idx` (`log_doacoes_main_doacoes_id` ASC) VISIBLE,
  CONSTRAINT `fk_log_doacoes_content_log_doacoes_main1`
    FOREIGN KEY (`log_doacoes_main_doacoes_id`)
    REFERENCES `db_apae_estoque`.`log_doacoes_main` (`doacoes_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `db_apae_estoque`.`log_usuarios_main`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_apae_estoque`.`log_usuarios_main` (
  `usuarios_id` INT NOT NULL,
  `revisao_atual` INT NOT NULL DEFAULT 1,
  `criado_por` INT NOT NULL DEFAULT -1,
  `data_criado` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`usuarios_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `db_apae_estoque`.`log_usuarios_content`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_apae_estoque`.`log_usuarios_content` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `log_usuarios_main_usuarios_id` INT NOT NULL,
  `revisao` INT NOT NULL,
  `status` TINYINT(1) NOT NULL DEFAULT 1 COMMENT '0 = Deletado\n1 = Ativo',
  `username` VARCHAR(50) NOT NULL,
  `senha` VARCHAR(255) NOT NULL,
  `email` VARCHAR(100) NOT NULL,
  `funcao` ENUM("administrador", "nutricionista", "cozinheiro", "professor", "monitor") NOT NULL,
  `modificado_por` INT NOT NULL,
  `data_modificacao` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`),
  INDEX `fk_log_usuarios_content_log_usuarios_main1_idx` (`log_usuarios_main_usuarios_id` ASC) VISIBLE,
  CONSTRAINT `fk_log_usuarios_content_log_usuarios_main1`
    FOREIGN KEY (`log_usuarios_main_usuarios_id`)
    REFERENCES `db_apae_estoque`.`log_usuarios_main` (`usuarios_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `db_apae_estoque`.`log_pedidos_main`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_apae_estoque`.`log_pedidos_main` (
  `pedidos_id` INT NOT NULL,
  `revisao_atual` INT NOT NULL,
  `criado_por` INT NOT NULL,
  `data_criado` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`pedidos_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `db_apae_estoque`.`log_pedidos_content`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_apae_estoque`.`log_pedidos_content` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `log_pedidos_main_pedidos_id` INT NOT NULL,
  `revisao` INT NOT NULL,
  `status` TINYINT(1) NOT NULL DEFAULT 1 COMMENT '0 = Deletado\n1 = Ativo',
  `usuarios_id` INT NOT NULL,
  `pessoas_id` INT NOT NULL,
  `descricao` TEXT NULL,
  `data_pedido` TIMESTAMP NULL,
  `modificado_por` INT NOT NULL,
  `data_modificacao` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`),
  INDEX `fk_log_pedidos_content_log_pedidos_main1_idx` (`log_pedidos_main_pedidos_id` ASC) VISIBLE,
  CONSTRAINT `fk_log_pedidos_content_log_pedidos_main1`
    FOREIGN KEY (`log_pedidos_main_pedidos_id`)
    REFERENCES `db_apae_estoque`.`log_pedidos_main` (`pedidos_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `db_apae_estoque`.`log_doacoes_has_pedidos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_apae_estoque`.`log_doacoes_has_pedidos` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `doacoes_id` INT NOT NULL,
  `pedidos_id` INT NOT NULL,
  `acao` ENUM("INSERT", "UPDATE", "DELETE") NOT NULL,
  `status` TINYINT(1) NOT NULL DEFAULT 1 COMMENT '0 = Deletado\n1 = Ativo',
  `criado_por` INT NOT NULL,
  `data_criado` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `db_apae_estoque`.`log_itens_pedido_main`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_apae_estoque`.`log_itens_pedido_main` (
  `itens_pedido_id` INT NOT NULL,
  `revisao_atual` INT NOT NULL DEFAULT 1,
  `criado_por` INT NOT NULL,
  `data_criado` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`itens_pedido_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `db_apae_estoque`.`log_itens_pedido_content`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_apae_estoque`.`log_itens_pedido_content` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `log_itens_pedido_main_itens_pedido_id` INT NOT NULL,
  `revisao` INT NOT NULL,
  `status` TINYINT(1) NOT NULL DEFAULT 1 COMMENT '0 = Deletado\n1 = Ativo',
  `pedidos_id` INT NOT NULL,
  `insumos_id` INT NOT NULL,
  `quantidade` DECIMAL(10,2) NULL,
  `unidades_medida_id` INT NOT NULL,
  `modificado_por` INT NOT NULL,
  `data_modificacao` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`),
  INDEX `fk_log_itens_pedido_content_log_itens_pedido_main1_idx` (`log_itens_pedido_main_itens_pedido_id` ASC) VISIBLE,
  CONSTRAINT `fk_log_itens_pedido_content_log_itens_pedido_main1`
    FOREIGN KEY (`log_itens_pedido_main_itens_pedido_id`)
    REFERENCES `db_apae_estoque`.`log_itens_pedido_main` (`itens_pedido_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `db_apae_estoque`.`log_unidades_medida_main`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_apae_estoque`.`log_unidades_medida_main` (
  `unidades_medida_id` INT NOT NULL,
  `revisao_atual` INT NOT NULL DEFAULT 1,
  `criado_por` INT NOT NULL,
  `data_criado` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`unidades_medida_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `db_apae_estoque`.`log_unidades_medida_content`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_apae_estoque`.`log_unidades_medida_content` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `log_unidades_medida_main_unidades_medida_id` INT NOT NULL,
  `revisao` INT NOT NULL,
  `status` TINYINT(1) NOT NULL DEFAULT 1 COMMENT '0 = Deletado\n1 = Ativo',
  `nome` VARCHAR(50) NOT NULL,
  `modificado_por` INT NOT NULL,
  `data_modificacao` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`),
  INDEX `fk_log_unidades_medida_content_log_unidades_medida_main1_idx` (`log_unidades_medida_main_unidades_medida_id` ASC) VISIBLE,
  CONSTRAINT `fk_log_unidades_medida_content_log_unidades_medida_main1`
    FOREIGN KEY (`log_unidades_medida_main_unidades_medida_id`)
    REFERENCES `db_apae_estoque`.`log_unidades_medida_main` (`unidades_medida_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `db_apae_estoque`.`log_estoque_entrada_main`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_apae_estoque`.`log_estoque_entrada_main` (
  `estoque_entrada_id` INT NOT NULL,
  `revisao_atual` INT NOT NULL DEFAULT 1,
  `criado_por` INT NOT NULL,
  `data_criado` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`estoque_entrada_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `db_apae_estoque`.`log_estoque_entrada_content`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_apae_estoque`.`log_estoque_entrada_content` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `log_estoque_entrada_main_estoque_entrada_id` INT NOT NULL,
  `revisao` INT NOT NULL,
  `status` TINYINT(1) NOT NULL DEFAULT 1 COMMENT '0 = Deletado\n1 = Ativo',
  `insumos_id` INT NOT NULL,
  `doacoes_id` INT NULL DEFAULT NULL,
  `quantidade` DECIMAL(10,2) NULL,
  `unidades_medida_id` INT NOT NULL,
  `data_validade` DATE NULL,
  `data_entrada` TIMESTAMP NULL,
  `modificado_por` INT NOT NULL,
  `data_modificacao` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`),
  INDEX `fk_estoque_entrada_copy1_log_estoque_entrada_main1_idx` (`log_estoque_entrada_main_estoque_entrada_id` ASC) VISIBLE,
  CONSTRAINT `fk_estoque_entrada_copy1_log_estoque_entrada_main1`
    FOREIGN KEY (`log_estoque_entrada_main_estoque_entrada_id`)
    REFERENCES `db_apae_estoque`.`log_estoque_entrada_main` (`estoque_entrada_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `db_apae_estoque`.`log_estoque_main`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_apae_estoque`.`log_estoque_main` (
  `estoque_id` INT NOT NULL,
  `revisao_atual` INT NOT NULL,
  `criado_por` INT NOT NULL,
  `data_criado` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`estoque_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `db_apae_estoque`.`log_estoque_content`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_apae_estoque`.`log_estoque_content` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `log_estoque_main_estoque_id` INT NOT NULL,
  `revisao` INT NOT NULL,
  `status` TINYINT(1) NOT NULL DEFAULT 1 COMMENT '0 = Deletado\n1 = Ativo',
  `insumos_id` INT NOT NULL,
  `quantidade` INT NOT NULL,
  `unidades_medida_id` INT NOT NULL,
  `status_insumo` TINYINT(1) NOT NULL DEFAULT 0 COMMENT 'Fechado = 0\nAberto = 1\nConsumido = 2\nVence hoje = 3\nVencido = 4',
  `data_validade` DATE NOT NULL,
  `modificado_por` INT NOT NULL,
  `data_modificacao` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`),
  INDEX `fk_estoque_copy1_log_estoque_main1_idx` (`log_estoque_main_estoque_id` ASC) VISIBLE,
  CONSTRAINT `fk_estoque_copy1_log_estoque_main1`
    FOREIGN KEY (`log_estoque_main_estoque_id`)
    REFERENCES `db_apae_estoque`.`log_estoque_main` (`estoque_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `db_apae_estoque`.`log_estoque_saida_main`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_apae_estoque`.`log_estoque_saida_main` (
  `estoque_saida_id` INT NOT NULL,
  `revisao_atual` INT NOT NULL DEFAULT 1,
  `criado_por` INT NOT NULL,
  `data_criado` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`estoque_saida_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `db_apae_estoque`.`log_estoque_saida_content`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_apae_estoque`.`log_estoque_saida_content` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `log_estoque_saida_main_estoque_saida_id` INT NOT NULL,
  `revisao` INT NOT NULL,
  `status` TINYINT(1) NOT NULL DEFAULT 1 COMMENT '0 = Deletado\n1 = Ativo',
  `insumos_id` INT NOT NULL,
  `quantidade` DECIMAL(10,2) NOT NULL,
  `unidades_medida_id` INT NOT NULL,
  `data_saida` TIMESTAMP NULL,
  `observacao` TEXT NULL,
  `modificado_por` INT NOT NULL,
  `data_modificacao` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`),
  INDEX `fk_estoque_saida_copy1_log_estoque_saida_main1_idx` (`log_estoque_saida_main_estoque_saida_id` ASC) VISIBLE,
  CONSTRAINT `fk_estoque_saida_copy1_log_estoque_saida_main1`
    FOREIGN KEY (`log_estoque_saida_main_estoque_saida_id`)
    REFERENCES `db_apae_estoque`.`log_estoque_saida_main` (`estoque_saida_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `db_apae_estoque`.`log_estoque_vencido_main`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_apae_estoque`.`log_estoque_vencido_main` (
  `estoque_vencido_id` INT NOT NULL,
  `revisao_atual` INT NOT NULL DEFAULT 1,
  `criado_por` INT NOT NULL,
  `data_criado` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`estoque_vencido_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `db_apae_estoque`.`log_estoque_vencido_content`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_apae_estoque`.`log_estoque_vencido_content` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `log_estoque_vencido_main_estoque_vencido_id` INT NOT NULL,
  `revisao` INT NULL,
  `status` TINYINT(1) NULL DEFAULT 1 COMMENT '0 = Deletado\n1 = Ativo',
  `insumos_id` INT NOT NULL,
  `quantidade` INT NOT NULL,
  `unidades_medida_id` INT NOT NULL,
  `data_validade` DATE NOT NULL,
  `descartado` TINYINT(1) NOT NULL DEFAULT 0,
  `data_movido` TIMESTAMP NOT NULL,
  `data_atualizado` TIMESTAMP NULL,
  `modificado_por` INT NULL,
  `data_modificacao` DATETIME NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`),
  INDEX `fk_log_estoque_vencido_content_log_estoque_vencido_main1_idx` (`log_estoque_vencido_main_estoque_vencido_id` ASC) VISIBLE,
  CONSTRAINT `fk_log_estoque_vencido_content_log_estoque_vencido_main1`
    FOREIGN KEY (`log_estoque_vencido_main_estoque_vencido_id`)
    REFERENCES `db_apae_estoque`.`log_estoque_vencido_main` (`estoque_vencido_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `db_apae_estoque`.`log_insumos_main`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_apae_estoque`.`log_insumos_main` (
  `insumos_id` INT NOT NULL,
  `revisao_atual` INT NOT NULL DEFAULT 1,
  `criado_por` INT NOT NULL,
  `data_criado` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`insumos_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `db_apae_estoque`.`log_insumos_content`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_apae_estoque`.`log_insumos_content` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `log_insumos_main_insumos_id` INT NOT NULL,
  `status` TINYINT(1) NOT NULL DEFAULT 1 COMMENT '0 = Deletado\n1 = Ativo',
  `nome` VARCHAR(45) NULL,
  `categoria_insumos_id` INT NOT NULL,
  `observacoes` TEXT NULL,
  `revisao` INT NULL,
  `modificado_por` INT NOT NULL,
  `data_modificado` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`),
  INDEX `fk_log_insumos_content_log_insumos_main1_idx` (`log_insumos_main_insumos_id` ASC) VISIBLE,
  CONSTRAINT `fk_log_insumos_content_log_insumos_main1`
    FOREIGN KEY (`log_insumos_main_insumos_id`)
    REFERENCES `db_apae_estoque`.`log_insumos_main` (`insumos_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `db_apae_estoque`.`log_categoria_insumos_main`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_apae_estoque`.`log_categoria_insumos_main` (
  `categoria_insumos_id` INT NOT NULL,
  `revisao_atual` INT NOT NULL DEFAULT 1,
  `criado_por` INT NOT NULL,
  `data_criado` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`categoria_insumos_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `db_apae_estoque`.`log_categoria_insumos_content`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_apae_estoque`.`log_categoria_insumos_content` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `log_categoria_insumos_main_categoria_insumos_id` INT NOT NULL,
  `revisao` INT NOT NULL,
  `status` TINYINT(1) NOT NULL DEFAULT 1 COMMENT '0 = Deletado\n1 = Ativo',
  `nome` VARCHAR(100) NOT NULL,
  `modificado_por` INT NOT NULL,
  `data_modificado` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`),
  INDEX `fk_log_categoria_insumos_content_log_categoria_insumos_main_idx` (`log_categoria_insumos_main_categoria_insumos_id` ASC) VISIBLE,
  CONSTRAINT `fk_log_categoria_insumos_content_log_categoria_insumos_main1`
    FOREIGN KEY (`log_categoria_insumos_main_categoria_insumos_id`)
    REFERENCES `db_apae_estoque`.`log_categoria_insumos_main` (`categoria_insumos_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `db_apae_estoque`.`log_valores_nutricionais_main`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_apae_estoque`.`log_valores_nutricionais_main` (
  `valores_nutricionais_insumos_id` INT NOT NULL,
  `revisao_atual` INT NOT NULL DEFAULT 1,
  `criado_por` INT NOT NULL,
  `data_criado` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`valores_nutricionais_insumos_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `db_apae_estoque`.`log_valores_nutricionais_content`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_apae_estoque`.`log_valores_nutricionais_content` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `log_valores_nutricionais_main_valores_nutricionais_insumos_id` INT NOT NULL,
  `revisao` INT NOT NULL,
  `status` TINYINT(1) NOT NULL DEFAULT 1 COMMENT '0 = Deletado\n1 = Ativo',
  `porcao` VARCHAR(50) NULL DEFAULT NULL,
  `calorias` DECIMAL(10,2) NULL DEFAULT NULL,
  `carboidratros` DECIMAL(10,2) NULL DEFAULT NULL,
  `proteinas` DECIMAL(10,2) NULL DEFAULT NULL,
  `gorduras_totais` DECIMAL(10,2) NULL DEFAULT NULL,
  `gorduras_saturadas` DECIMAL(10,2) NULL DEFAULT NULL,
  `gorduras_trans` DECIMAL(10,2) NULL DEFAULT NULL,
  `fibras` DECIMAL(10,2) NULL DEFAULT NULL,
  `acucares` DECIMAL(10,2) NULL DEFAULT NULL,
  `sodio` DECIMAL(10,2) NULL DEFAULT NULL,
  `colesterol` DECIMAL(10,2) NULL DEFAULT NULL,
  `calcio` DECIMAL(10,2) NULL DEFAULT NULL,
  `ferro` DECIMAL(10,2) NULL DEFAULT NULL,
  `potassio` DECIMAL(10,2) NULL DEFAULT NULL,
  `vitamina_a` DECIMAL(10,2) NULL DEFAULT NULL,
  `vitamina_c` DECIMAL(10,2) NULL DEFAULT NULL,
  `vitamina_d` DECIMAL(10,2) NULL DEFAULT NULL,
  `vitamina_e` DECIMAL(10,2) NULL DEFAULT NULL,
  `vitamina_k` DECIMAL(10,2) NULL DEFAULT NULL,
  `vitamina_b1` DECIMAL(10,2) NULL DEFAULT NULL,
  `vitamina_b2` DECIMAL(10,2) NULL DEFAULT NULL,
  `vitamina_b3` DECIMAL(10,2) NULL DEFAULT NULL,
  `vitamina_b6` DECIMAL(10,2) NULL DEFAULT NULL,
  `vitamina_b12` DECIMAL(10,2) NULL DEFAULT NULL,
  `acido_folico` DECIMAL(10,2) NULL DEFAULT NULL,
  `percentual_valor_diario` JSON NULL DEFAULT NULL,
  `modificado_por` INT NOT NULL,
  `data_modificacao` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`),
  INDEX `fk_valores_nutricionais_copy1_log_valores_nutricionais_main_idx` (`log_valores_nutricionais_main_valores_nutricionais_insumos_id` ASC) VISIBLE,
  CONSTRAINT `fk_valores_nutricionais_copy1_log_valores_nutricionais_main1`
    FOREIGN KEY (`log_valores_nutricionais_main_valores_nutricionais_insumos_id`)
    REFERENCES `db_apae_estoque`.`log_valores_nutricionais_main` (`valores_nutricionais_insumos_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

USE `db_apae_estoque` ;

-- -----------------------------------------------------
-- Placeholder table for view `db_apae_estoque`.`view_estoque_fechado`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_apae_estoque`.`view_estoque_fechado` (`nome_insumo` INT, `quantidade_total` INT, `unidade_medida` INT, `data_validade` INT);

-- -----------------------------------------------------
-- Placeholder table for view `db_apae_estoque`.`view_estoque_aberto`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_apae_estoque`.`view_estoque_aberto` (`nome_insumo` INT, `quantidade_total` INT, `unidade_medida` INT, `data_validade` INT);

-- -----------------------------------------------------
-- Placeholder table for view `db_apae_estoque`.`view_estoque_vencendo_hoje`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_apae_estoque`.`view_estoque_vencendo_hoje` (`nome_insumo` INT, `quantidade_total` INT, `unidade_medida` INT, `data_validade` INT);

-- -----------------------------------------------------
-- Placeholder table for view `db_apae_estoque`.`view_insumos_vencidos_descartados`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_apae_estoque`.`view_insumos_vencidos_descartados` (`estoque_vencido_id` INT, `insumos_id` INT, `nome_insumo` INT, `quantidade` INT, `unidade_medida` INT, `data_validade` INT, `descartado` INT);

-- -----------------------------------------------------
-- Placeholder table for view `db_apae_estoque`.`view_pessoas_doacoes`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_apae_estoque`.`view_pessoas_doacoes` (`nome_pessoa` INT, `tipo_pessoa` INT, `numero_doacoes` INT);

-- -----------------------------------------------------
-- Placeholder table for view `db_apae_estoque`.`view_estoque_saida`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_apae_estoque`.`view_estoque_saida` (`estoque_saida_id` INT, `insumos_id` INT, `nome_insumo` INT, `quantidade` INT, `unidade_medida` INT, `data_saida` INT, `observacao` INT);

-- -----------------------------------------------------
-- Placeholder table for view `db_apae_estoque`.`view_doacoes_pessoas`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_apae_estoque`.`view_doacoes_pessoas` (`doacao_id` INT, `pessoas_id` INT, `descricao` INT, `data_doacao` INT, `pessoa_nome` INT, `pessoa_email` INT);

-- -----------------------------------------------------
-- Placeholder table for view `db_apae_estoque`.`view_pedidos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_apae_estoque`.`view_pedidos` (`pedido_id` INT, `usuarios_id` INT, `pessoas_id` INT, `descricao` INT, `data_pedido` INT, `pessoa_nome` INT, `usuario_nome` INT);

-- -----------------------------------------------------
-- Placeholder table for view `db_apae_estoque`.`view_doacoes_by_pedido`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_apae_estoque`.`view_doacoes_by_pedido` (`pedidos_id` INT, `doacao_id` INT, `doacao_descricao` INT, `data_doacao` INT);

-- -----------------------------------------------------
-- Placeholder table for view `db_apae_estoque`.`view_pedidos_by_doacao`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_apae_estoque`.`view_pedidos_by_doacao` (`doacoes_id` INT, `pedido_id` INT, `pedido_descricao` INT, `data_pedido` INT);

-- -----------------------------------------------------
-- Placeholder table for view `db_apae_estoque`.`view_itens_pedido`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_apae_estoque`.`view_itens_pedido` (`item_id` INT, `pedidos_id` INT, `insumos_id` INT, `quantidade` INT, `insumo_nome` INT, `unidade_medida_nome` INT);

-- -----------------------------------------------------
-- Placeholder table for view `db_apae_estoque`.`view_estoque_completo`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_apae_estoque`.`view_estoque_completo` (`estoque_id` INT, `nome_insumo` INT, `quantidade` INT, `unidade_medida` INT, `status` INT, `data_validade` INT);

-- -----------------------------------------------------
-- Placeholder table for view `db_apae_estoque`.`view_insumos_vencidos_nao_descartados`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_apae_estoque`.`view_insumos_vencidos_nao_descartados` (`estoque_vencido_id` INT, `insumos_id` INT, `nome_insumo` INT, `quantidade` INT, `unidade_medida` INT, `data_validade` INT, `descartado` INT);

-- -----------------------------------------------------
-- procedure proc_inserir_estoque_entrada
-- -----------------------------------------------------

DELIMITER $$
USE `db_apae_estoque`$$
CREATE PROCEDURE `proc_inserir_estoque_entrada` (
    IN `p_insumos_id` INT,
    IN `p_quantidade` DECIMAL(10,2),
    IN `p_unidades_medida_id` INT,
    IN `p_data_validade` DATE,
    IN `p_doacoes_id` INT
)
BEGIN
    INSERT INTO `estoque_entrada` (`insumos_id`, `quantidade`, `unidades_medida_id`, `data_validade`, `doacoes_id`)
    VALUES (p_insumos_id, p_quantidade, p_unidades_medida_id, p_data_validade, p_doacoes_id);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure proc_inserir_estoque
-- -----------------------------------------------------

DELIMITER $$
USE `db_apae_estoque`$$
CREATE PROCEDURE `proc_inserir_estoque` (
    IN `p_insumos_id` INT,
    IN `p_quantidade` DECIMAL(10,2),
    IN `p_unidades_medida_id` INT,
    IN `p_status` TINYINT(1),
    IN `p_data_validade` DATE
)
BEGIN
    INSERT INTO `estoque` (`insumos_id`, `quantidade`, `unidades_medida_id`, `status`, `data_validade`)
    VALUES (p_insumos_id, p_quantidade, p_unidades_medida_id, p_status, p_data_validade);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure proc_inserir_estoque_saida
-- -----------------------------------------------------

DELIMITER $$
USE `db_apae_estoque`$$
CREATE PROCEDURE `proc_inserir_estoque_saida` (
    IN `p_insumos_id` INT,
    IN `p_quantidade` DECIMAL(10,2),
    IN `p_unidades_medida_id` INT,
    IN `p_observacao` TEXT
)
BEGIN
    INSERT INTO `estoque_saida` (`insumos_id`, `quantidade`, `unidades_medida_id`, `data_saida`, `observacao`)
    VALUES (p_insumos_id, p_quantidade, p_unidades_medida_id, NOW(), p_observacao);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure proc_inserir_estoque_vencido
-- -----------------------------------------------------

DELIMITER $$
USE `db_apae_estoque`$$
CREATE PROCEDURE `proc_inserir_estoque_vencido` (
    IN `p_insumos_id` INT,
    IN `p_quantidade` DECIMAL(10,2),
    IN `p_unidades_medida_id` INT,
    IN `p_data_validade` DATE
)
BEGIN
    INSERT INTO `estoque_vencido` (`insumos_id`, `quantidade`, `unidades_medida_id`, `data_validade`, `descartado`)
    VALUES (p_insumos_id, p_quantidade, p_unidades_medida_id, p_data_validade, 1);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure proc_get_doacoes_por_pessoa
-- -----------------------------------------------------

DELIMITER $$
USE `db_apae_estoque`$$
CREATE PROCEDURE `proc_get_doacoes_por_pessoa` (IN p_pessoa_id INT)
BEGIN
    SELECT 
        d.id AS `id_doacao`,
        d.descricao AS `descricao`,
        d.data_doacao AS `data_doacao`
    FROM 
        `doacoes` d
    WHERE 
        d.pessoas_id = p_pessoa_id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure proc_get_estoque_entrada_por_doacao
-- -----------------------------------------------------

DELIMITER $$
USE `db_apae_estoque`$$
CREATE PROCEDURE `proc_get_estoque_entrada_por_doacao` (
    IN p_doacao_id INT
)
BEGIN
    SELECT 
        ee.id AS `id_estoque_entrada`,
        i.nome AS `nome_insumo`,
        ee.quantidade AS `quantidade`,
        um.nome AS `unidade_medida`,
        ee.data_validade AS `data_validade`,
        ee.data_entrada AS `data_entrada`
    FROM 
        `estoque_entrada` ee
    JOIN 
        `insumos` i ON ee.insumos_id = i.id
    JOIN 
        `unidades_medida` um ON ee.unidades_medida_id = um.id
    WHERE 
        ee.doacoes_id = p_doacao_id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function func_validar_cnpj
-- -----------------------------------------------------

DELIMITER $$
USE `db_apae_estoque`$$
CREATE FUNCTION func_validar_cnpj(CNPJ CHAR(14)) RETURNS INT
DETERMINISTIC
BEGIN
    DECLARE INDICE INT;
    DECLARE SOMA INT;
    DECLARE DIGITO_1 INT;
    DECLARE DIGITO_2 INT;
    DECLARE VAR1 INT;
    DECLARE VAR2 INT;
    DECLARE DIGITO_1_CNPJ CHAR(1);
    DECLARE DIGITO_2_CNPJ CHAR(1);
    DECLARE NR_DOCUMENTO_AUX VARCHAR(14);
    
    SET SOMA = 0;
    SET INDICE = 1;
    SET VAR1 = 5;
    SET NR_DOCUMENTO_AUX = LTRIM(RTRIM(CNPJ));
    
    IF (NR_DOCUMENTO_AUX IN ('00000000000000', '11111111111111', '22222222222222', '33333333333333', '44444444444444', '55555555555555', '66666666666666', '77777777777777', '88888888888888', '99999999999999')) THEN
        RETURN 0;
    END IF;
    IF (LENGTH(NR_DOCUMENTO_AUX) <> 14) THEN
        RETURN 0;
    END IF;
    
    SET DIGITO_1_CNPJ = SUBSTRING(CNPJ, LENGTH(CNPJ) - 1, 1);
    SET DIGITO_2_CNPJ = SUBSTRING(CNPJ, LENGTH(CNPJ), 1);
    
    WHILE (INDICE <= 4 ) DO
        SET SOMA = SOMA + CAST(SUBSTRING(CNPJ, INDICE, 1) AS UNSIGNED) * VAR1;
        SET INDICE = INDICE + 1;
        SET VAR1 = VAR1 - 1;
    END WHILE;
    
    SET VAR2 = 9;
    WHILE (INDICE <= 12 ) DO
        SET SOMA = SOMA + CAST(SUBSTRING(CNPJ, INDICE, 1) AS UNSIGNED) * VAR2;
        SET INDICE = INDICE + 1;
        SET VAR2 = VAR2 - 1;
    END WHILE;
    
    SET DIGITO_1 = (SOMA % 11 );
    
    IF DIGITO_1 < 2 THEN
        SET DIGITO_1 = 0;
    ELSE
        SET DIGITO_1 = 11 - (SOMA % 11);
    END IF;
    
    SET INDICE = 1;
    SET SOMA = 0;
    SET VAR1 = 6;
    
    WHILE (INDICE <= 5 ) DO
        SET SOMA = SOMA + CAST(SUBSTRING(CNPJ, INDICE, 1) AS UNSIGNED) * VAR1;
        SET INDICE = INDICE + 1;
        SET VAR1 = VAR1 - 1;
    END WHILE;
    
    SET VAR2 = 9;
    WHILE (INDICE <= 13 ) DO
        SET SOMA = SOMA + CAST(SUBSTRING(CNPJ, INDICE, 1) AS UNSIGNED) * VAR2;
        SET INDICE = INDICE + 1;
        SET VAR2 = VAR2 - 1;
    END WHILE;
    
    SET DIGITO_2 = (SOMA % 11);
    
    IF DIGITO_2 < 2 THEN
        SET DIGITO_2 = 0;
    ELSE
        SET DIGITO_2 = 11 - (SOMA % 11);
    END IF;
    
    IF (DIGITO_1 = DIGITO_1_CNPJ) AND (DIGITO_2 = DIGITO_2_CNPJ) THEN
        RETURN 1;
    ELSE
        RETURN 0;
    END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function func_validar_cpf
-- -----------------------------------------------------

DELIMITER $$
USE `db_apae_estoque`$$
CREATE FUNCTION func_validar_cpf(CPF CHAR(11)) RETURNS INT
DETERMINISTIC
BEGIN
    DECLARE SOMA INT;
    DECLARE INDICE INT;
    DECLARE DIGITO_1 INT;
    DECLARE DIGITO_2 INT;
    DECLARE NR_DOCUMENTO_AUX VARCHAR(11);
    DECLARE DIGITO_1_CPF CHAR(1);
    DECLARE DIGITO_2_CPF CHAR(1);

    -- Remove os CPFs onde todos os números são iguais
    SET NR_DOCUMENTO_AUX = LTRIM(RTRIM(CPF));
    IF (NR_DOCUMENTO_AUX IN ('00000000000', '11111111111', '22222222222', '33333333333', 
                             '44444444444', '55555555555', '66666666666', '77777777777', 
                             '88888888888', '99999999999', '12345678909')) THEN
        RETURN 0;
    END IF;

    -- O CPF deve ter 11 caracteres
    IF (LENGTH(NR_DOCUMENTO_AUX) <> 11) THEN
        RETURN 0;
    ELSE
        -- Armazenando os dígitos verificadores do CPF informado
        SET DIGITO_1_CPF = SUBSTRING(NR_DOCUMENTO_AUX, 10, 1);
        SET DIGITO_2_CPF = SUBSTRING(NR_DOCUMENTO_AUX, 11, 1);

        -- Cálculo do primeiro dígito verificador
        SET SOMA = 0;
        SET INDICE = 1;
        WHILE (INDICE <= 9) DO
            SET SOMA = SOMA + CAST(SUBSTRING(NR_DOCUMENTO_AUX, INDICE, 1) AS UNSIGNED) * (11 - INDICE);
            SET INDICE = INDICE + 1;
        END WHILE;
        SET DIGITO_1 = 11 - (SOMA % 11);
        IF (DIGITO_1 > 9) THEN
            SET DIGITO_1 = 0;
        END IF;

        -- Cálculo do segundo dígito verificador
        SET SOMA = 0;
        SET INDICE = 1;
        WHILE (INDICE <= 10) DO
            SET SOMA = SOMA + CAST(SUBSTRING(NR_DOCUMENTO_AUX, INDICE, 1) AS UNSIGNED) * (12 - INDICE);
            SET INDICE = INDICE + 1;
        END WHILE;
        SET DIGITO_2 = 11 - (SOMA % 11);
        IF DIGITO_2 > 9 THEN
            SET DIGITO_2 = 0;
        END IF;

        -- Validando os dígitos verificadores calculados com os dígitos verificadores do CPF informado
        IF (DIGITO_1 = DIGITO_1_CPF) AND (DIGITO_2 = DIGITO_2_CPF) THEN
            RETURN 1;
        ELSE
            RETURN 0;
        END IF;
    END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure proc_validar_documento
-- -----------------------------------------------------

DELIMITER $$
USE `db_apae_estoque`$$
CREATE PROCEDURE proc_validar_documento (
    IN p_tipo_pessoa TINYINT(1),
    IN p_documento CHAR(14)
)
BEGIN
    DECLARE v_resultado INT;

    IF p_tipo_pessoa = 0 THEN
        -- Validação de CPF
        SET v_resultado = func_validar_cpf(p_documento);
        IF v_resultado = 0 THEN
            SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'CPF inválido.';
        END IF;
    ELSEIF p_tipo_pessoa = 1 THEN
        -- Validação de CNPJ
        SET v_resultado = func_validar_cnpj(p_documento);
        IF v_resultado = 0 THEN
            SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'CNPJ inválido.';
        END IF;
    ELSE
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Tipo de pessoa inválido.';
    END IF;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure proc_atualizar_e_mover_estoque
-- -----------------------------------------------------

DELIMITER $$
USE `db_apae_estoque`$$
CREATE PROCEDURE proc_atualizar_e_mover_estoque(
    IN estoque_id INT,
    IN novo_status TINYINT(1),
    IN observacao TEXT
)
BEGIN
    DECLARE v_quantidade DECIMAL(10,2);
    DECLARE v_insumos_id INT;
    DECLARE v_unidades_medida_id INT;
    DECLARE v_data_validade DATE;

    -- Obter a quantidade e outras informações necessárias antes da atualização
    SELECT quantidade, insumos_id, unidades_medida_id, data_validade
    INTO v_quantidade, v_insumos_id, v_unidades_medida_id, v_data_validade
    FROM `db_apae_estoque`.`estoque`
    WHERE id = estoque_id;

    -- Atualizar o status no estoque
    UPDATE `db_apae_estoque`.`estoque`
    SET `status` = novo_status
    WHERE `id` = estoque_id;

    -- Verificar o novo status e mover para a tabela apropriada
    IF novo_status = 2 THEN
        CALL proc_inserir_estoque_saida(
            v_insumos_id,
            v_quantidade,
            v_unidades_medida_id,
            observacao
        );
        DELETE FROM `db_apae_estoque`.`estoque` WHERE `id` = estoque_id;
    ELSEIF novo_status = 4 THEN
        CALL proc_inserir_estoque_vencido(
            v_insumos_id,
            v_quantidade,
            v_unidades_medida_id,
            v_data_validade
        );
        DELETE FROM `db_apae_estoque`.`estoque` WHERE `id` = estoque_id;
    END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- View `db_apae_estoque`.`view_estoque_fechado`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `db_apae_estoque`.`view_estoque_fechado`;
USE `db_apae_estoque`;
CREATE OR REPLACE VIEW `view_estoque_fechado` AS
SELECT 
    i.nome AS `nome_insumo`,
    SUM(e.quantidade) AS `quantidade_total`,
    um.nome AS `unidade_medida`,
    e.data_validade
FROM 
    `estoque` e
JOIN 
    `insumos` i ON e.insumos_id = i.id
JOIN 
    `unidades_medida` um ON e.unidades_medida_id = um.id
WHERE 
    e.status = 0
GROUP BY 
    i.nome, um.nome, e.data_validade;

-- -----------------------------------------------------
-- View `db_apae_estoque`.`view_estoque_aberto`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `db_apae_estoque`.`view_estoque_aberto`;
USE `db_apae_estoque`;
CREATE OR REPLACE VIEW `view_estoque_aberto` AS
SELECT 
    i.nome AS `nome_insumo`,
    SUM(e.quantidade) AS `quantidade_total`,
    um.nome AS `unidade_medida`,
    e.data_validade
FROM 
    `estoque` e
JOIN 
    `insumos` i ON e.insumos_id = i.id
JOIN 
    `unidades_medida` um ON e.unidades_medida_id = um.id
WHERE 
    e.status = 1
GROUP BY 
    i.nome, um.nome, e.data_validade;

-- -----------------------------------------------------
-- View `db_apae_estoque`.`view_estoque_vencendo_hoje`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `db_apae_estoque`.`view_estoque_vencendo_hoje`;
USE `db_apae_estoque`;
CREATE OR REPLACE VIEW `view_estoque_vencendo_hoje` AS
SELECT 
    i.nome AS `nome_insumo`,
    SUM(e.quantidade) AS `quantidade_total`,
    um.nome AS `unidade_medida`,
    e.data_validade
FROM 
    `estoque` e
JOIN 
    `insumos` i ON e.insumos_id = i.id
JOIN 
    `unidades_medida` um ON e.unidades_medida_id = um.id
WHERE 
    e.status = 3
GROUP BY 
    i.nome, um.nome, e.data_validade;

-- -----------------------------------------------------
-- View `db_apae_estoque`.`view_insumos_vencidos_descartados`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `db_apae_estoque`.`view_insumos_vencidos_descartados`;
USE `db_apae_estoque`;
CREATE OR REPLACE VIEW `view_insumos_vencidos_descartados` AS
SELECT 
    v.id AS estoque_vencido_id,
    v.insumos_id,  -- Include insumos_id
    i.nome AS `nome_insumo`,
    v.quantidade,
    um.nome AS `unidade_medida`,
    v.data_validade,
    v.descartado
FROM 
    `estoque_vencido` v
JOIN 
    `insumos` i ON v.insumos_id = i.id
JOIN 
    `unidades_medida` um ON v.unidades_medida_id = um.id
WHERE 
    v.descartado = 1;

-- -----------------------------------------------------
-- View `db_apae_estoque`.`view_pessoas_doacoes`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `db_apae_estoque`.`view_pessoas_doacoes`;
USE `db_apae_estoque`;
CREATE OR REPLACE VIEW `view_pessoas_doacoes` AS
SELECT 
    p.nome AS `nome_pessoa`,
    CASE 
        WHEN p.tipo_pessoa = 0 THEN 'pessoa física'
        WHEN p.tipo_pessoa = 1 THEN 'pessoa jurídica'
    END AS `tipo_pessoa`,
    COUNT(d.id) AS `numero_doacoes`
FROM 
    `pessoas` p
LEFT JOIN 
    `doacoes` d ON p.id = d.pessoas_id
GROUP BY 
    p.nome, p.tipo_pessoa;

-- -----------------------------------------------------
-- View `db_apae_estoque`.`view_estoque_saida`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `db_apae_estoque`.`view_estoque_saida`;
USE `db_apae_estoque`;
CREATE OR REPLACE VIEW `view_estoque_saida` AS
SELECT 
    es.id AS estoque_saida_id,
    es.insumos_id,
    i.nome AS nome_insumo,
    es.quantidade,
    um.nome AS unidade_medida,
    es.data_saida,
    es.observacao
FROM 
    estoque_saida es
JOIN 
    insumos i ON es.insumos_id = i.id
JOIN 
    unidades_medida um ON es.unidades_medida_id = um.id;

-- -----------------------------------------------------
-- View `db_apae_estoque`.`view_doacoes_pessoas`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `db_apae_estoque`.`view_doacoes_pessoas`;
USE `db_apae_estoque`;
CREATE OR REPLACE VIEW view_doacoes_pessoas AS
SELECT
    doacoes.id AS doacao_id,
    doacoes.pessoas_id,
    doacoes.descricao,
    doacoes.data_doacao,
    pessoas.nome AS pessoa_nome,
    pessoas.email AS pessoa_email
FROM
    doacoes
JOIN
    pessoas ON doacoes.pessoas_id = pessoas.id;

-- -----------------------------------------------------
-- View `db_apae_estoque`.`view_pedidos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `db_apae_estoque`.`view_pedidos`;
USE `db_apae_estoque`;
CREATE OR REPLACE VIEW view_pedidos AS
SELECT
    pedidos.id AS pedido_id,
    pedidos.usuarios_id,
    pedidos.pessoas_id,
    pedidos.descricao,
    pedidos.data_pedido,
    pessoas.nome AS pessoa_nome,
    usuarios.username AS usuario_nome
FROM
    pedidos
JOIN
    pessoas ON pedidos.pessoas_id = pessoas.id
JOIN
    usuarios ON pedidos.usuarios_id = usuarios.id;

-- -----------------------------------------------------
-- View `db_apae_estoque`.`view_doacoes_by_pedido`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `db_apae_estoque`.`view_doacoes_by_pedido`;
USE `db_apae_estoque`;
CREATE OR REPLACE VIEW view_doacoes_by_pedido AS
SELECT
  doacoes_has_pedidos.pedidos_id,
  doacoes.id AS doacao_id,
  doacoes.descricao AS doacao_descricao,
  doacoes.data_doacao
FROM
  doacoes
JOIN
  doacoes_has_pedidos ON doacoes.id = doacoes_has_pedidos.doacoes_id;

-- -----------------------------------------------------
-- View `db_apae_estoque`.`view_pedidos_by_doacao`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `db_apae_estoque`.`view_pedidos_by_doacao`;
USE `db_apae_estoque`;
CREATE OR REPLACE VIEW view_pedidos_by_doacao AS
SELECT
  doacoes_has_pedidos.doacoes_id,
  pedidos.id AS pedido_id,
  pedidos.descricao AS pedido_descricao,
  pedidos.data_pedido
FROM
  pedidos
JOIN
  doacoes_has_pedidos ON pedidos.id = doacoes_has_pedidos.pedidos_id;

-- -----------------------------------------------------
-- View `db_apae_estoque`.`view_itens_pedido`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `db_apae_estoque`.`view_itens_pedido`;
USE `db_apae_estoque`;
CREATE OR REPLACE VIEW view_itens_pedido AS
SELECT
  itens_pedido.id as item_id,
  itens_pedido.pedidos_id,
  itens_pedido.insumos_id,
  itens_pedido.quantidade,
  insumos.nome as insumo_nome,
  unidades_medida.nome as unidade_medida_nome
FROM
  itens_pedido
JOIN
  insumos ON itens_pedido.insumos_id = insumos.id
JOIN
  unidades_medida ON itens_pedido.unidades_medida_id = unidades_medida.id;

-- -----------------------------------------------------
-- View `db_apae_estoque`.`view_estoque_completo`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `db_apae_estoque`.`view_estoque_completo`;
USE `db_apae_estoque`;
CREATE OR REPLACE VIEW `view_estoque_completo` AS
SELECT 
    e.id AS estoque_id,
    i.nome AS nome_insumo,
    e.quantidade,
    um.nome AS unidade_medida,
    e.status,
    e.data_validade
FROM 
    estoque e
JOIN 
    insumos i ON e.insumos_id = i.id
JOIN 
    unidades_medida um ON e.unidades_medida_id = um.id;

-- -----------------------------------------------------
-- View `db_apae_estoque`.`view_insumos_vencidos_nao_descartados`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `db_apae_estoque`.`view_insumos_vencidos_nao_descartados`;
USE `db_apae_estoque`;
CREATE OR REPLACE VIEW `view_insumos_vencidos_nao_descartados` AS
SELECT 
    v.id AS estoque_vencido_id,
    v.insumos_id,
    i.nome AS `nome_insumo`,
    v.quantidade,
    um.nome AS `unidade_medida`,
    v.data_validade,
    v.descartado
FROM 
    `estoque_vencido` v
JOIN 
    `insumos` i ON v.insumos_id = i.id
JOIN 
    `unidades_medida` um ON v.unidades_medida_id = um.id
WHERE 
    v.descartado = 0;
USE `db_apae_estoque`;

DELIMITER $$
USE `db_apae_estoque`$$
CREATE DEFINER = CURRENT_USER TRIGGER `db_apae_estoque`.`trg_log_ai_usuarios` AFTER INSERT ON `usuarios` FOR EACH ROW
BEGIN
    -- Inserir na tabela principal de log
    INSERT INTO `log_usuarios_main` (
        `usuarios_id`,
        `revisao_atual`,
        `criado_por`,
        `data_criado`
    ) VALUES (
        NEW.id,
        1, -- Primeira revisão
        NEW.id, -- Usar o próprio ID do usuário recém-criado
        NOW()
    );
    
    -- Inserir na tabela de conteúdo de log
    INSERT INTO `log_usuarios_content` (
        `log_usuarios_main_usuarios_id`,
        `revisao`,
        `status`,
        `username`,
        `senha`,
        `email`,
        `funcao`,
        `modificado_por`,
        `data_modificacao`
    ) VALUES (
        NEW.id,
        1,
        1, -- Status padrão como ativo
        NEW.username,
        NEW.senha,
        NEW.email,
        NEW.funcao,
        NEW.id, -- Usar o próprio ID do usuário recém-criado
        NOW()
    );
END$$

USE `db_apae_estoque`$$
CREATE DEFINER = CURRENT_USER TRIGGER `db_apae_estoque`.`trg_log_au_usuarios` AFTER UPDATE ON `usuarios` FOR EACH ROW
BEGIN
    DECLARE nova_revisao INT;
    
    -- Incrementar o número da revisão
    SET nova_revisao = (SELECT revisao_atual FROM `log_usuarios_main` WHERE `usuarios_id` = OLD.id) + 1;
    
    -- Atualizar a tabela principal de log com a nova revisão
    UPDATE `log_usuarios_main` SET `revisao_atual` = nova_revisao WHERE `usuarios_id` = OLD.id;
    
    -- Criar uma nova versão na tabela de conteúdo de log
    INSERT INTO `log_usuarios_content` (
        `log_usuarios_main_usuarios_id`,
        `revisao`,
        `status`,
        `username`,
        `senha`,
        `email`,
        `funcao`,
        `modificado_por`,
        `data_modificacao`
    ) VALUES (
        NEW.id,
        nova_revisao,
        1, -- Status padrão como ativo
        NEW.username,
        NEW.senha,
        NEW.email,
        NEW.funcao,
        @user_id, -- ID do usuário que acionou o trigger
        NOW()
    );
END$$

USE `db_apae_estoque`$$
CREATE DEFINER = CURRENT_USER TRIGGER `db_apae_estoque`.`trg_log_ad_usuarios` AFTER DELETE ON `usuarios` FOR EACH ROW
BEGIN
    -- Criar uma versão final no log indicando que o registro foi excluído
    INSERT INTO `log_usuarios_content` (
        `log_usuarios_main_usuarios_id`,
        `revisao`,
        `status`,
        `username`,
        `senha`,
        `email`,
        `funcao`,
        `modificado_por`,
        `data_modificacao`
    ) VALUES (
        OLD.id,
        (SELECT revisao_atual FROM `log_usuarios_main` WHERE `usuarios_id` = OLD.id) + 1,
        0, -- Marcar como deletado
        OLD.username,
        OLD.senha,
        OLD.email,
        OLD.funcao,
        @user_id, -- ID do usuário que acionou o trigger
        NOW()
    );
END$$

USE `db_apae_estoque`$$
CREATE DEFINER = CURRENT_USER TRIGGER `db_apae_estoque`.`trg_log_ai_endereco` AFTER INSERT ON `endereco` FOR EACH ROW
BEGIN
    INSERT INTO `log_endereco_main` (
        `endereco_id`,
        `revisao_atual`,
        `criado_por`,
        `data_criado`
    ) VALUES (
        NEW.id,
        1, -- Primeira revisão
        @user_id,
        NOW()
    );
    
    INSERT INTO `log_endereco_content` (
        `log_endereco_main_endereco_id`,
        `revisao`,
        `status`,
        `tipo`,
        `logradouro`,
        `numero`,
        `complemento`,
        `bairro`,
        `cidade`,
        `estado`,
        `cep`,
        `modificado_por`,
        `data_modificacao`
    ) VALUES (
        NEW.id,
        1,
        1, -- Status padrão como ativo
        NEW.tipo,
        NEW.logradouro,
        NEW.numero,
        NEW.complemento,
        NEW.bairro,
        NEW.cidade,
        NEW.estado,
        NEW.cep,
        @user_id,
        NOW()
    );
END$$

USE `db_apae_estoque`$$
CREATE DEFINER = CURRENT_USER TRIGGER `db_apae_estoque`.`trg_log_au_endereco` AFTER UPDATE ON `endereco` FOR EACH ROW
BEGIN
    DECLARE nova_revisao INT;
    
    -- Incrementar o número da revisão
    SET nova_revisao = (SELECT revisao_atual FROM `log_endereco_main` WHERE `endereco_id` = OLD.id) + 1;
    
    -- Atualizar a tabela principal de log com a nova revisão
    UPDATE `log_endereco_main` SET `revisao_atual` = nova_revisao WHERE `endereco_id` = OLD.id;
    
    -- Criar uma nova versão na tabela de conteúdo de log
    INSERT INTO `log_endereco_content` (
        `log_endereco_main_endereco_id`,
        `revisao`,
        `status`,
        `tipo`,
        `logradouro`,
        `numero`,
        `complemento`,
        `bairro`,
        `cidade`,
        `estado`,
        `cep`,
        `modificado_por`,
        `data_modificacao`
    ) VALUES (
        NEW.id,
        nova_revisao,
        1, -- Status padrão como ativo
        NEW.tipo,
        NEW.logradouro,
        NEW.numero,
        NEW.complemento,
        NEW.bairro,
        NEW.cidade,
        NEW.estado,
        NEW.cep,
        @user_id,
        NOW()
    );
END$$

USE `db_apae_estoque`$$
CREATE DEFINER = CURRENT_USER TRIGGER `db_apae_estoque`.`trg_log_ad_endereco` AFTER DELETE ON `endereco` FOR EACH ROW
BEGIN
    -- Criar uma versão final no log indicando que o registro foi excluído
    INSERT INTO `log_endereco_content` (
        `log_endereco_main_endereco_id`,
        `revisao`,
        `status`,
        `tipo`,
        `logradouro`,
        `numero`,
        `complemento`,
        `bairro`,
        `cidade`,
        `estado`,
        `cep`,
        `modificado_por`,
        `data_modificacao`
    ) VALUES (
        OLD.id,
        (SELECT revisao_atual FROM `log_endereco_main` WHERE `endereco_id` = OLD.id) + 1,
        0, -- Marcar como deletado
        OLD.tipo,
        OLD.logradouro,
        OLD.numero,
        OLD.complemento,
        OLD.bairro,
        OLD.cidade,
        OLD.estado,
        OLD.cep,
        @user_id,
        NOW()
    );
END$$

USE `db_apae_estoque`$$
CREATE DEFINER = CURRENT_USER TRIGGER `db_apae_estoque`.`trg_bf_validar_documento` BEFORE INSERT ON `pessoas` FOR EACH ROW
BEGIN
    CALL proc_validar_documento(NEW.tipo_pessoa, NEW.documento);
END$$

USE `db_apae_estoque`$$
CREATE DEFINER = CURRENT_USER TRIGGER `db_apae_estoque`.`trg_log_ai_pessoas` AFTER INSERT ON `pessoas` FOR EACH ROW
BEGIN
    -- Inserir na tabela principal de log
    INSERT INTO `log_pessoas_main` (
        `pessoas_id`,
        `revisao_atual`,
        `criado_por`,
        `data_criado`
    ) VALUES (
        NEW.id,
        1, -- Primeira revisão
        @user_id, -- ID do usuário que acionou o trigger
        NOW()
    );
    
    -- Inserir na tabela de conteúdo de log
    INSERT INTO `log_pessoas_content` (
        `log_pessoas_main_pessoas_id`,
        `revisao`,
        `status`,
        `tipo_pessoa`,
        `nome`,
        `documento`,
        `data_nascimento`,
        `email`,
        `endereco_id`,
        `modificado_por`,
        `data_modificacao`
    ) VALUES (
        NEW.id,
        1,
        1, -- Status padrão como ativo
        NEW.tipo_pessoa,
        NEW.nome,
        NEW.documento,
        NEW.data_nascimento,
        NEW.email,
        NEW.endereco_id,
        @user_id, -- ID do usuário que acionou o trigger
        NOW()
    );
END$$

USE `db_apae_estoque`$$
CREATE DEFINER = CURRENT_USER TRIGGER `db_apae_estoque`.`trg_log_au_pessoas` AFTER UPDATE ON `pessoas` FOR EACH ROW
BEGIN
    DECLARE nova_revisao INT;
    
    -- Incrementar o número da revisão
    SET nova_revisao = (SELECT revisao_atual FROM `log_pessoas_main` WHERE `pessoas_id` = OLD.id) + 1;
    
    -- Atualizar a tabela principal de log com a nova revisão
    UPDATE `log_pessoas_main` SET `revisao_atual` = nova_revisao WHERE `pessoas_id` = OLD.id;
    
    -- Criar uma nova versão na tabela de conteúdo de log
    INSERT INTO `log_pessoas_content` (
        `log_pessoas_main_pessoas_id`,
        `revisao`,
        `status`,
        `tipo_pessoa`,
        `nome`,
        `documento`,
        `data_nascimento`,
        `email`,
        `endereco_id`,
        `modificado_por`,
        `data_modificacao`
    ) VALUES (
        NEW.id,
        nova_revisao,
        1, -- Status padrão como ativo
        NEW.tipo_pessoa,
        NEW.nome,
        NEW.documento,
        NEW.data_nascimento,
        NEW.email,
        NEW.endereco_id,
        @user_id, -- ID do usuário que acionou o trigger
        NOW()
    );
END$$

USE `db_apae_estoque`$$
CREATE DEFINER = CURRENT_USER TRIGGER `db_apae_estoque`.`trg_log_ad_pessoas` AFTER DELETE ON `pessoas` FOR EACH ROW
BEGIN
    -- Criar uma versão final no log indicando que o registro foi excluído
    INSERT INTO `log_pessoas_content` (
        `log_pessoas_main_pessoas_id`,
        `revisao`,
        `status`,
        `tipo_pessoa`,
        `nome`,
        `documento`,
        `data_nascimento`,
        `email`,
        `endereco_id`,
        `modificado_por`,
        `data_modificacao`
    ) VALUES (
        OLD.id,
        (SELECT revisao_atual FROM `log_pessoas_main` WHERE `pessoas_id` = OLD.id) + 1,
        0, -- Marcar como deletado
        OLD.tipo_pessoa,
        OLD.nome,
        OLD.documento,
        OLD.data_nascimento,
        OLD.email,
        OLD.endereco_id,
        @user_id, -- ID do usuário que acionou o trigger
        NOW()
    );
END$$

USE `db_apae_estoque`$$
CREATE DEFINER = CURRENT_USER TRIGGER `db_apae_estoque`.`trg_log_ai_telefone` AFTER INSERT ON `telefone` FOR EACH ROW
BEGIN
    -- Inserir na tabela principal de log
    INSERT INTO `log_telefone_main` (
        `telefone_id`,
        `revisao_atual`,
        `criado_por`,
        `data_criado`
    ) VALUES (
        NEW.id,
        1, -- Primeira revisão
        @user_id, -- ID do usuário que acionou o trigger
        NOW()
    );
    
    -- Inserir na tabela de conteúdo de log
    INSERT INTO `log_telefone_content` (
        `log_telefone_main_telefone_id`,
        `revisao`,
        `status`,
        `tipo`,
        `ddi`,
        `ddd`,
        `numero`,
        `modificado_por`,
        `data_modificacao`
    ) VALUES (
        NEW.id,
        1,
        1, -- Status padrão como ativo
        NEW.tipo,
        NEW.ddi,
        NEW.ddd,
        NEW.numero,
        @user_id, -- ID do usuário que acionou o trigger
        NOW()
    );
END$$

USE `db_apae_estoque`$$
CREATE DEFINER = CURRENT_USER TRIGGER `db_apae_estoque`.`trg_log_au_telefone` AFTER UPDATE ON `telefone` FOR EACH ROW
BEGIN
    DECLARE nova_revisao INT;
    
    -- Incrementar o número da revisão
    SET nova_revisao = (SELECT revisao_atual FROM `log_telefone_main` WHERE `telefone_id` = OLD.id) + 1;
    
    -- Atualizar a tabela principal de log com a nova revisão
    UPDATE `log_telefone_main` SET `revisao_atual` = nova_revisao WHERE `telefone_id` = OLD.id;
    
    -- Criar uma nova versão na tabela de conteúdo de log
    INSERT INTO `log_telefone_content` (
        `log_telefone_main_telefone_id`,
        `revisao`,
        `status`,
        `tipo`,
        `ddi`,
        `ddd`,
        `numero`,
        `modificado_por`,
        `data_modificacao`
    ) VALUES (
        NEW.id,
        nova_revisao,
        1, -- Status padrão como ativo
        NEW.tipo,
        NEW.ddi,
        NEW.ddd,
        NEW.numero,
        @user_id, -- ID do usuário que acionou o trigger
        NOW()
    );
END$$

USE `db_apae_estoque`$$
CREATE DEFINER = CURRENT_USER TRIGGER `db_apae_estoque`.`trg_log_ad_telefone` AFTER DELETE ON `telefone` FOR EACH ROW
BEGIN
    -- Criar uma versão final no log indicando que o registro foi excluído
    INSERT INTO `log_telefone_content` (
        `log_telefone_main_telefone_id`,
        `revisao`,
        `status`,
        `tipo`,
        `ddi`,
        `ddd`,
        `numero`,
        `modificado_por`,
        `data_modificacao`
    ) VALUES (
        OLD.id,
        (SELECT revisao_atual FROM `log_telefone_main` WHERE `telefone_id` = OLD.id) + 1,
        0, -- Marcar como deletado
        OLD.tipo,
        OLD.ddi,
        OLD.ddd,
        OLD.numero,
        @user_id, -- ID do usuário que acionou o trigger
        NOW()
    );
END$$

USE `db_apae_estoque`$$
CREATE DEFINER = CURRENT_USER TRIGGER `db_apae_estoque`.`trg_log_ai_categoria_insumos` AFTER INSERT ON `categoria_insumos` FOR EACH ROW
BEGIN
    DECLARE nova_revisao INT DEFAULT 1;

    -- Inserir na tabela main
    INSERT INTO `db_apae_estoque`.`log_categoria_insumos_main` (`categoria_insumos_id`, `revisao_atual`, `criado_por`)
    VALUES (NEW.id, nova_revisao, @user_id);

    -- Inserir na tabela content
    INSERT INTO `db_apae_estoque`.`log_categoria_insumos_content` (
        `log_categoria_insumos_main_categoria_insumos_id`,
        `revisao`,
        `nome`,
        `status`,
        `modificado_por`
    ) VALUES (
        NEW.id,
        nova_revisao,
        NEW.nome,
        1,
        @user_id
    );
END$$

USE `db_apae_estoque`$$
CREATE DEFINER = CURRENT_USER TRIGGER `db_apae_estoque`.`trg_log_au_categoria_insumos` AFTER UPDATE ON `categoria_insumos` FOR EACH ROW
BEGIN
    DECLARE nova_revisao INT;

    -- Atualizar a revisão atual na tabela main
    SET nova_revisao = (SELECT `revisao_atual` + 1 FROM `db_apae_estoque`.`log_categoria_insumos_main`
                        WHERE `categoria_insumos_id` = OLD.id);

    UPDATE `db_apae_estoque`.`log_categoria_insumos_main`
    SET `revisao_atual` = nova_revisao
    WHERE `categoria_insumos_id` = OLD.id;

    -- Inserir na tabela content
    INSERT INTO `db_apae_estoque`.`log_categoria_insumos_content` (
        `log_categoria_insumos_main_categoria_insumos_id`,
        `revisao`,
        `nome`,
        `status`,
        `modificado_por`
    ) VALUES (
        OLD.id,
        nova_revisao,
        NEW.nome,
        1,
        @user_id
    );
END$$

USE `db_apae_estoque`$$
CREATE DEFINER = CURRENT_USER TRIGGER `db_apae_estoque`.`trg_log_ad_categoria_insumos` AFTER DELETE ON `categoria_insumos` FOR EACH ROW
BEGIN
    DECLARE nova_revisao INT;

    -- Atualizar a revisão atual na tabela main
    SET nova_revisao = (SELECT `revisao_atual` + 1 FROM `db_apae_estoque`.`log_categoria_insumos_main`
                        WHERE `categoria_insumos_id` = OLD.id);

    UPDATE `db_apae_estoque`.`log_categoria_insumos_main`
    SET `revisao_atual` = nova_revisao
    WHERE `categoria_insumos_id` = OLD.id;

    -- Inserir na tabela content com status de deletado
    INSERT INTO `db_apae_estoque`.`log_categoria_insumos_content` (
        `log_categoria_insumos_main_categoria_insumos_id`,
        `revisao`,
        `nome`,
        `status`,
        `modificado_por`
    ) VALUES (
        OLD.id,
        nova_revisao,
        OLD.nome,
        0,  -- Status "Deletado"
        @user_id
    );
END$$

USE `db_apae_estoque`$$
CREATE DEFINER = CURRENT_USER TRIGGER `db_apae_estoque`.`trg_ai_novo_valor_nutricional` AFTER INSERT ON `insumos` FOR EACH ROW
BEGIN
	INSERT INTO `db_apae_estoque`.`valores_nutricionais` (`insumos_id`)
    VALUES (NEW.id);
END$$

USE `db_apae_estoque`$$
CREATE DEFINER = CURRENT_USER TRIGGER `db_apae_estoque`.`trg_log_ai_insumos` AFTER INSERT ON `insumos` FOR EACH ROW
BEGIN
    DECLARE nova_revisao INT DEFAULT 1;
    
    -- Inserir na tabela main
    INSERT INTO `db_apae_estoque`.`log_insumos_main` (`insumos_id`, `revisao_atual`, `criado_por`)
    VALUES (NEW.id, nova_revisao, @user_id);

    -- Inserir na tabela content
    INSERT INTO `db_apae_estoque`.`log_insumos_content` (
        `log_insumos_main_insumos_id`,
        `revisao`,
        `nome`,
        `categoria_insumos_id`,
        `observacoes`,
        `status`,
        `modificado_por`
    ) VALUES (
        NEW.id,
        nova_revisao,
        NEW.nome,
        NEW.categoria_insumos_id,
        NEW.observacoes,
        1,
        @user_id
    );
END$$

USE `db_apae_estoque`$$
CREATE DEFINER = CURRENT_USER TRIGGER `db_apae_estoque`.`trg_log_au_insumos` AFTER UPDATE ON `insumos` FOR EACH ROW
BEGIN
    DECLARE nova_revisao INT;
    
    -- Atualizar a revisão atual na tabela main
    SET nova_revisao = (SELECT `revisao_atual` + 1 FROM `db_apae_estoque`.`log_insumos_main`
                        WHERE `insumos_id` = OLD.id);
    
    UPDATE `db_apae_estoque`.`log_insumos_main`
    SET `revisao_atual` = nova_revisao
    WHERE `insumos_id` = OLD.id;
    
    -- Inserir na tabela content
    INSERT INTO `db_apae_estoque`.`log_insumos_content` (
        `log_insumos_main_insumos_id`,
        `revisao`,
        `nome`,
        `categoria_insumos_id`,
        `observacoes`,
        `status`,
        `modificado_por`
    ) VALUES (
        OLD.id,
        nova_revisao,
        NEW.nome,
        NEW.categoria_insumos_id,
        NEW.observacoes,
        1,
        @user_id
    );
END$$

USE `db_apae_estoque`$$
CREATE DEFINER = CURRENT_USER TRIGGER `db_apae_estoque`.`trg_log_ad_insumos` AFTER DELETE ON `insumos` FOR EACH ROW
BEGIN
    DECLARE nova_revisao INT;

    -- Atualizar a revisão atual na tabela main
    SET nova_revisao = (SELECT `revisao_atual` + 1 FROM `db_apae_estoque`.`log_insumos_main`
                        WHERE `insumos_id` = OLD.id);

    UPDATE `db_apae_estoque`.`log_insumos_main`
    SET `revisao_atual` = nova_revisao
    WHERE `insumos_id` = OLD.id;

    -- Inserir na tabela content com status de deletado
    INSERT INTO `db_apae_estoque`.`log_insumos_content` (
        `log_insumos_main_insumos_id`,
        `revisao`,
        `nome`,
        `categoria_insumos_id`,
        `observacoes`,
        `status`,
        `modificado_por`
    ) VALUES (
        OLD.id,
        nova_revisao,
        OLD.nome,
        OLD.categoria_insumos_id,
        OLD.observacoes,
        0,  -- Status "Deletado"
        @user_id
    );
END$$

USE `db_apae_estoque`$$
CREATE DEFINER = CURRENT_USER TRIGGER `db_apae_estoque`.`trg_log_ai_doacoes` AFTER INSERT ON `doacoes` FOR EACH ROW
BEGIN
    -- Inserir na tabela principal de log
    INSERT INTO `log_doacoes_main` (
        `doacoes_id`,
        `revisao_atual`,
        `criado_por`,
        `data_criado`
    ) VALUES (
        NEW.id,
        1, -- Primeira revisão
        @user_id, -- ID do usuário que acionou o trigger
        NOW()
    );
    
    -- Inserir na tabela de conteúdo de log
    INSERT INTO `log_doacoes_content` (
        `log_doacoes_main_doacoes_id`,
        `revisao`,
        `status`,
        `pessoas_id`,
        `descricao`,
        `data_doacao`,
        `modificado_por`,
        `data_modificacao`
    ) VALUES (
        NEW.id,
        1,
        1, -- Status padrão como ativo
        NEW.pessoas_id,
        NEW.descricao,
        NEW.data_doacao,
        @user_id, -- ID do usuário que acionou o trigger
        NOW()
    );
END$$

USE `db_apae_estoque`$$
CREATE DEFINER = CURRENT_USER TRIGGER `db_apae_estoque`.`trg_log_au_doacoes` AFTER UPDATE ON `doacoes` FOR EACH ROW
BEGIN
    DECLARE nova_revisao INT;
    
    -- Incrementar o número da revisão
    SET nova_revisao = (SELECT revisao_atual FROM `log_doacoes_main` WHERE `doacoes_id` = OLD.id) + 1;
    
    -- Atualizar a tabela principal de log com a nova revisão
    UPDATE `log_doacoes_main` SET `revisao_atual` = nova_revisao WHERE `doacoes_id` = OLD.id;
    
    -- Criar uma nova versão na tabela de conteúdo de log
    INSERT INTO `log_doacoes_content` (
        `log_doacoes_main_doacoes_id`,
        `revisao`,
        `status`,
        `pessoas_id`,
        `descricao`,
        `data_doacao`,
        `modificado_por`,
        `data_modificacao`
    ) VALUES (
        NEW.id,
        nova_revisao,
        1, -- Status padrão como ativo
        NEW.pessoas_id,
        NEW.descricao,
        NEW.data_doacao,
        @user_id, -- ID do usuário que acionou o trigger
        NOW()
    );
END$$

USE `db_apae_estoque`$$
CREATE DEFINER = CURRENT_USER TRIGGER `db_apae_estoque`.`trg_log_ad_doacoes` AFTER DELETE ON `doacoes` FOR EACH ROW
BEGIN
    -- Criar uma versão final no log indicando que o registro foi excluído
    INSERT INTO `log_doacoes_content` (
        `log_doacoes_main_doacoes_id`,
        `revisao`,
        `status`,
        `pessoas_id`,
        `descricao`,
        `data_doacao`,
        `modificado_por`,
        `data_modificacao`
    ) VALUES (
        OLD.id,
        (SELECT revisao_atual FROM `log_doacoes_main` WHERE `doacoes_id` = OLD.id) + 1,
        0, -- Marcar como deletado
        OLD.pessoas_id,
        OLD.descricao,
        OLD.data_doacao,
        @user_id, -- ID do usuário que acionou o trigger
        NOW()
    );
END$$

USE `db_apae_estoque`$$
CREATE DEFINER = CURRENT_USER TRIGGER `db_apae_estoque`.`trg_log_ai_pedidos` AFTER INSERT ON `pedidos` FOR EACH ROW
BEGIN
    -- Inserir na tabela principal de log
    INSERT INTO `log_pedidos_main` (
        `pedidos_id`,
        `revisao_atual`,
        `criado_por`,
        `data_criado`
    ) VALUES (
        NEW.id,
        1, -- Primeira revisão
        @user_id, -- ID do usuário que acionou o trigger
        NOW()
    );
    
    -- Inserir na tabela de conteúdo de log
    INSERT INTO `log_pedidos_content` (
        `log_pedidos_main_pedidos_id`,
        `revisao`,
        `status`,
        `usuarios_id`,
        `pessoas_id`,
        `descricao`,
        `data_pedido`,
        `modificado_por`,
        `data_modificacao`
    ) VALUES (
        NEW.id,
        1,
        1, -- Status padrão como ativo
        NEW.usuarios_id,
        NEW.pessoas_id,
        NEW.descricao,
        NEW.data_pedido,
        @user_id, -- ID do usuário que acionou o trigger
        NOW()
    );
END$$

USE `db_apae_estoque`$$
CREATE DEFINER = CURRENT_USER TRIGGER `db_apae_estoque`.`trg_log_au_pedidos` AFTER UPDATE ON `pedidos` FOR EACH ROW
BEGIN
    DECLARE nova_revisao INT;
    
    -- Incrementar o número da revisão
    SET nova_revisao = (SELECT revisao_atual FROM `log_pedidos_main` WHERE `pedidos_id` = OLD.id) + 1;
    
    -- Atualizar a tabela principal de log com a nova revisão
    UPDATE `log_pedidos_main` SET `revisao_atual` = nova_revisao WHERE `pedidos_id` = OLD.id;
    
    -- Criar uma nova versão na tabela de conteúdo de log
    INSERT INTO `log_pedidos_content` (
        `log_pedidos_main_pedidos_id`,
        `revisao`,
        `status`,
        `usuarios_id`,
        `pessoas_id`,
        `descricao`,
        `data_pedido`,
        `modificado_por`,
        `data_modificacao`
    ) VALUES (
        NEW.id,
        nova_revisao,
        1, -- Status padrão como ativo
        NEW.usuarios_id,
        NEW.pessoas_id,
        NEW.descricao,
        NEW.data_pedido,
        @user_id, -- ID do usuário que acionou o trigger
        NOW()
    );
END$$

USE `db_apae_estoque`$$
CREATE DEFINER = CURRENT_USER TRIGGER `db_apae_estoque`.`trg_log_ad_pedidos` AFTER DELETE ON `pedidos` FOR EACH ROW
BEGIN
    -- Criar uma versão final no log indicando que o registro foi excluído
    INSERT INTO `log_pedidos_content` (
        `log_pedidos_main_pedidos_id`,
        `revisao`,
        `status`,
        `usuarios_id`,
        `pessoas_id`,
        `descricao`,
        `data_pedido`,
        `modificado_por`,
        `data_modificacao`
    ) VALUES (
        OLD.id,
        (SELECT revisao_atual FROM `log_pedidos_main` WHERE `pedidos_id` = OLD.id) + 1,
        0, -- Marcar como deletado
        OLD.usuarios_id,
        OLD.pessoas_id,
        OLD.descricao,
        OLD.data_pedido,
        @user_id, -- ID do usuário que acionou o trigger
        NOW()
    );
END$$

USE `db_apae_estoque`$$
CREATE DEFINER = CURRENT_USER TRIGGER `db_apae_estoque`.`trg_log_ai_unidades_medida` AFTER INSERT ON `unidades_medida` FOR EACH ROW
BEGIN
    -- Insere na tabela log_unidades_medida_main
    INSERT INTO `log_unidades_medida_main` (
        `unidades_medida_id`,
        `revisao_atual`,
        `criado_por`,
        `data_criado`
    ) VALUES (
        NEW.id,
        1, -- Primeira revisão
        @user_id,
        NOW()
    );

    -- Insere na tabela de conteúdo do log com a primeira revisão
    INSERT INTO `log_unidades_medida_content` (
        `log_unidades_medida_main_unidades_medida_id`,
        `revisao`,
        `status`,
        `nome`,
        `modificado_por`,
        `data_modificacao`
    ) VALUES (
        NEW.id,
        1, -- Primeira revisão
        1, -- Ativo
        NEW.nome,
        @user_id,
        NOW()
    );
END$$

USE `db_apae_estoque`$$
CREATE DEFINER = CURRENT_USER TRIGGER `db_apae_estoque`.`trg_log_au_unidades_medida` AFTER UPDATE ON `unidades_medida` FOR EACH ROW
BEGIN
    DECLARE nova_revisao INT;

    -- Atualiza a revisão atual na tabela log_unidades_medida_main
    UPDATE `log_unidades_medida_main`
    SET revisao_atual = revisao_atual + 1
    WHERE `unidades_medida_id` = OLD.id;

    -- Recupera a nova revisão
    SELECT revisao_atual INTO nova_revisao
    FROM `log_unidades_medida_main`
    WHERE `unidades_medida_id` = OLD.id;

    -- Insere a nova versão na tabela log_unidades_medida_content
    INSERT INTO `log_unidades_medida_content` (
        `log_unidades_medida_main_unidades_medida_id`,
        `revisao`,
        `status`,
        `nome`,
        `modificado_por`,
        `data_modificacao`
    ) VALUES (
        OLD.id,
        nova_revisao,
        1, -- Ativo
        NEW.nome,
        @user_id,
        NOW()
    );
END$$

USE `db_apae_estoque`$$
CREATE DEFINER = CURRENT_USER TRIGGER `db_apae_estoque`.`trg_log_ad_unidades_medida` AFTER DELETE ON `unidades_medida` FOR EACH ROW
BEGIN
    DECLARE nova_revisao INT;

    -- Atualiza a revisão atual na tabela log_unidades_medida_main
    UPDATE `log_unidades_medida_main`
    SET revisao_atual = revisao_atual + 1
    WHERE `unidades_medida_id` = OLD.id;

    -- Recupera a nova revisão
    SELECT revisao_atual INTO nova_revisao
    FROM `log_unidades_medida_main`
    WHERE `unidades_medida_id` = OLD.id;

    -- Insere a nova versão na tabela log_unidades_medida_content com status de deletado
    INSERT INTO `log_unidades_medida_content` (
        `log_unidades_medida_main_unidades_medida_id`,
        `revisao`,
        `status`,
        `nome`,
        `modificado_por`,
        `data_modificacao`
    ) VALUES (
        OLD.id,
        nova_revisao,
        0, -- Deletado
        OLD.nome,
        @user_id,
        NOW()
    );
END$$

USE `db_apae_estoque`$$
CREATE DEFINER = CURRENT_USER TRIGGER `db_apae_estoque`.`trg_log_ai_itens_pedido` AFTER INSERT ON `itens_pedido` FOR EACH ROW
BEGIN
    -- Insere na tabela log_itens_pedido_main
    INSERT INTO `log_itens_pedido_main` (
        `itens_pedido_id`,
        `revisao_atual`,
        `criado_por`,
        `data_criado`
    ) VALUES (
        NEW.id,
        1, -- Primeira revisão
        @user_id,
        NOW()
    );

    -- Insere na tabela de conteúdo do log com a primeira revisão
    INSERT INTO `log_itens_pedido_content` (
        `log_itens_pedido_main_itens_pedido_id`,
        `revisao`,
        `status`,
        `pedidos_id`,
        `insumos_id`,
        `quantidade`,
        `unidades_medida_id`,
        `modificado_por`,
        `data_modificacao`
    ) VALUES (
        NEW.id,
        1, -- Primeira revisão
        1, -- Ativo
        NEW.pedidos_id,
        NEW.insumos_id,
        NEW.quantidade,
        NEW.unidades_medida_id,
        @user_id,
        NOW()
    );
END$$

USE `db_apae_estoque`$$
CREATE DEFINER = CURRENT_USER TRIGGER `db_apae_estoque`.`trg_log_au_itens_pedido` AFTER UPDATE ON `itens_pedido` FOR EACH ROW
BEGIN
    DECLARE nova_revisao INT;

    -- Atualiza a revisão atual na tabela log_itens_pedido_main
    UPDATE `log_itens_pedido_main`
    SET revisao_atual = revisao_atual + 1
    WHERE `itens_pedido_id` = OLD.id;

    -- Recupera a nova revisão
    SELECT revisao_atual INTO nova_revisao
    FROM `log_itens_pedido_main`
    WHERE `itens_pedido_id` = OLD.id;

    -- Insere a nova versão na tabela log_itens_pedido_content
    INSERT INTO `log_itens_pedido_content` (
        `log_itens_pedido_main_itens_pedido_id`,
        `revisao`,
        `status`,
        `pedidos_id`,
        `insumos_id`,
        `quantidade`,
        `unidades_medida_id`,
        `modificado_por`,
        `data_modificacao`
    ) VALUES (
        OLD.id,
        nova_revisao,
        1, -- Ativo
        NEW.pedidos_id,
        NEW.insumos_id,
        NEW.quantidade,
        NEW.unidades_medida_id,
        @user_id,
        NOW()
    );
END$$

USE `db_apae_estoque`$$
CREATE DEFINER = CURRENT_USER TRIGGER `db_apae_estoque`.`trg_log_ad_itens_pedido` AFTER DELETE ON `itens_pedido` FOR EACH ROW
BEGIN
    DECLARE nova_revisao INT;

    -- Atualiza a revisão atual na tabela log_itens_pedido_main
    UPDATE `log_itens_pedido_main`
    SET revisao_atual = revisao_atual + 1
    WHERE `itens_pedido_id` = OLD.id;

    -- Recupera a nova revisão
    SELECT revisao_atual INTO nova_revisao
    FROM `log_itens_pedido_main`
    WHERE `itens_pedido_id` = OLD.id;

    -- Insere a nova versão na tabela log_itens_pedido_content com status de deletado
    INSERT INTO `log_itens_pedido_content` (
        `log_itens_pedido_main_itens_pedido_id`,
        `revisao`,
        `status`,
        `pedidos_id`,
        `insumos_id`,
        `quantidade`,
        `unidades_medida_id`,
        `modificado_por`,
        `data_modificacao`
    ) VALUES (
        OLD.id,
        nova_revisao,
        0, -- Deletado
        OLD.pedidos_id,
        OLD.insumos_id,
        OLD.quantidade,
        OLD.unidades_medida_id,
        @user_id,
        NOW()
    );
END$$

USE `db_apae_estoque`$$
CREATE DEFINER = CURRENT_USER TRIGGER `db_apae_estoque`.`trg_ai_adicionar_estoque` AFTER INSERT ON `estoque_entrada` FOR EACH ROW
BEGIN
    CALL proc_inserir_estoque(
        NEW.insumos_id,
        NEW.quantidade,
        NEW.unidades_medida_id,
        0,  -- Status "Fechado"
        NEW.data_validade
    );
END$$

USE `db_apae_estoque`$$
CREATE DEFINER = CURRENT_USER TRIGGER `db_apae_estoque`.`trg_log_ai_estoque_entrada` AFTER INSERT ON `estoque_entrada` FOR EACH ROW
BEGIN
    -- Insere na tabela log_estoque_entrada_main
    INSERT INTO `log_estoque_entrada_main` (
        `estoque_entrada_id`,
        `revisao_atual`,
        `criado_por`,
        `data_criado`
    ) VALUES (
        NEW.id,
        1, -- Primeira revisão
        @user_id,
        NOW()
    );

    -- Insere na tabela de conteúdo do log com a primeira revisão
    INSERT INTO `log_estoque_entrada_content` (
        `log_estoque_entrada_main_estoque_entrada_id`,
        `revisao`,
        `status`,
        `insumos_id`,
        `doacoes_id`,
        `quantidade`,
        `unidades_medida_id`,
        `data_validade`,
        `data_entrada`,
        `modificado_por`,
        `data_modificacao`
    ) VALUES (
        NEW.id,
        1, -- Primeira revisão
        1, -- Ativo
        NEW.insumos_id,
        NEW.doacoes_id,
        NEW.quantidade,
        NEW.unidades_medida_id,
        NEW.data_validade,
        NEW.data_entrada,
        @user_id,
        NOW()
    );
END$$

USE `db_apae_estoque`$$
CREATE DEFINER = CURRENT_USER TRIGGER `db_apae_estoque`.`trg_log_au_estoque_entrada` AFTER UPDATE ON `estoque_entrada` FOR EACH ROW
BEGIN
    DECLARE nova_revisao INT;

    -- Atualiza a revisão atual na tabela log_estoque_entrada_main
    UPDATE `log_estoque_entrada_main`
    SET revisao_atual = revisao_atual + 1
    WHERE `estoque_entrada_id` = OLD.id;

    -- Recupera a nova revisão
    SELECT revisao_atual INTO nova_revisao
    FROM `log_estoque_entrada_main`
    WHERE `estoque_entrada_id` = OLD.id;

    -- Insere a nova versão na tabela log_estoque_entrada_content
    INSERT INTO `log_estoque_entrada_content` (
        `log_estoque_entrada_main_estoque_entrada_id`,
        `revisao`,
        `status`,
        `insumos_id`,
        `doacoes_id`,
        `quantidade`,
        `unidades_medida_id`,
        `data_validade`,
        `data_entrada`,
        `modificado_por`,
        `data_modificacao`
    ) VALUES (
        OLD.id,
        nova_revisao,
        1, -- Ativo
        NEW.insumos_id,
        NEW.doacoes_id,
        NEW.quantidade,
        NEW.unidades_medida_id,
        NEW.data_validade,
        NEW.data_entrada,
        @user_id,
        NOW()
    );
END$$

USE `db_apae_estoque`$$
CREATE DEFINER = CURRENT_USER TRIGGER `db_apae_estoque`.`trg_log_ad_estoque_entrada` AFTER DELETE ON `estoque_entrada` FOR EACH ROW
BEGIN
    DECLARE nova_revisao INT;

    -- Atualiza a revisão atual na tabela log_estoque_entrada_main
    UPDATE `log_estoque_entrada_main`
    SET revisao_atual = revisao_atual + 1
    WHERE `estoque_entrada_id` = OLD.id;

    -- Recupera a nova revisão
    SELECT revisao_atual INTO nova_revisao
    FROM `log_estoque_entrada_main`
    WHERE `estoque_entrada_id` = OLD.id;

    -- Insere a nova versão na tabela log_estoque_entrada_content com status de deletado
    INSERT INTO `log_estoque_entrada_content` (
        `log_estoque_entrada_main_estoque_entrada_id`,
        `revisao`,
        `status`,
        `insumos_id`,
        `doacoes_id`,
        `quantidade`,
        `unidades_medida_id`,
        `data_validade`,
        `data_entrada`,
        `modificado_por`,
        `data_modificacao`
    ) VALUES (
        OLD.id,
        nova_revisao,
        0, -- Deletado
        OLD.insumos_id,
        OLD.doacoes_id,
        OLD.quantidade,
        OLD.unidades_medida_id,
        OLD.data_validade,
        OLD.data_entrada,
        @user_id,
        NOW()
    );
END$$

USE `db_apae_estoque`$$
CREATE DEFINER = CURRENT_USER TRIGGER `db_apae_estoque`.`trg_log_ai_estoque` AFTER INSERT ON `estoque` FOR EACH ROW
BEGIN
    -- Insere na tabela log_estoque_main
    INSERT INTO `log_estoque_main` (
        `estoque_id`,
        `revisao_atual`,
        `criado_por`,
        `data_criado`
    ) VALUES (
        NEW.id,
        1, -- Primeira revisão
        @user_id,
        NOW()
    );

    -- Insere na tabela de conteúdo do log com a primeira revisão
    INSERT INTO `log_estoque_content` (
        `log_estoque_main_estoque_id`,
        `revisao`,
        `status`,
        `insumos_id`,
        `quantidade`,
        `unidades_medida_id`,
        `status_insumo`,
        `data_validade`,
        `modificado_por`,
        `data_modificacao`
    ) VALUES (
        NEW.id,
        1, -- Primeira revisão
        1, -- Ativo
        NEW.insumos_id,
        NEW.quantidade,
        NEW.unidades_medida_id,
        NEW.status,
        NEW.data_validade,
        @user_id,
        NOW()
    );
END$$

USE `db_apae_estoque`$$
CREATE DEFINER = CURRENT_USER TRIGGER `db_apae_estoque`.`trg_log_au_estoque` AFTER UPDATE ON `estoque` FOR EACH ROW
BEGIN
    DECLARE nova_revisao INT;

    -- Atualiza a revisão atual na tabela log_estoque_main
    UPDATE `log_estoque_main`
    SET revisao_atual = revisao_atual + 1
    WHERE `estoque_id` = OLD.id;

    -- Recupera a nova revisão
    SELECT revisao_atual INTO nova_revisao
    FROM `log_estoque_main`
    WHERE `estoque_id` = OLD.id;

    -- Insere a nova versão na tabela log_estoque_content
    INSERT INTO `log_estoque_content` (
        `log_estoque_main_estoque_id`,
        `revisao`,
        `status`,
        `insumos_id`,
        `quantidade`,
        `unidades_medida_id`,
        `status_insumo`,
        `data_validade`,
        `modificado_por`,
        `data_modificacao`
    ) VALUES (
        OLD.id,
        nova_revisao,
        1, -- Ativo
        NEW.insumos_id,
        NEW.quantidade,
        NEW.unidades_medida_id,
        NEW.status,
        NEW.data_validade,
        @user_id,
        NOW()
    );
END$$

USE `db_apae_estoque`$$
CREATE DEFINER = CURRENT_USER TRIGGER `db_apae_estoque`.`trg_log_ad_estoque` AFTER DELETE ON `estoque` FOR EACH ROW
BEGIN
    DECLARE nova_revisao INT;

    -- Atualiza a revisão atual na tabela log_estoque_main
    UPDATE `log_estoque_main`
    SET revisao_atual = revisao_atual + 1
    WHERE `estoque_id` = OLD.id;

    -- Recupera a nova revisão
    SELECT revisao_atual INTO nova_revisao
    FROM `log_estoque_main`
    WHERE `estoque_id` = OLD.id;

    -- Insere a nova versão na tabela log_estoque_content com status de deletado
    INSERT INTO `log_estoque_content` (
        `log_estoque_main_estoque_id`,
        `revisao`,
        `status`,
        `insumos_id`,
        `quantidade`,
        `unidades_medida_id`,
        `status_insumo`,
        `data_validade`,
        `modificado_por`,
        `data_modificacao`
    ) VALUES (
        OLD.id,
        nova_revisao,
        0, -- Deletado
        OLD.insumos_id,
        OLD.quantidade,
        OLD.unidades_medida_id,
        OLD.status,
        OLD.data_validade,
        @user_id,
        NOW()
    );
END$$

USE `db_apae_estoque`$$
CREATE DEFINER = CURRENT_USER TRIGGER `db_apae_estoque`.`trg_log_ai_pessoa_has_telefone` AFTER INSERT ON `pessoa_has_telefone` FOR EACH ROW
BEGIN
    INSERT INTO `log_pessoa_has_telefone` (
        `pessoa_id`,
        `telefone_id`,
        `acao`,
        `modificado_por`,
        `data_modificacao`
    ) VALUES (
        NEW.pessoa_id,
        NEW.telefone_id,
        'INSERT',
        @user_id,
        NOW()
    );
END$$

USE `db_apae_estoque`$$
CREATE DEFINER = CURRENT_USER TRIGGER `db_apae_estoque`.`trg_log_ad_pessoa_has_telefone` AFTER DELETE ON `pessoa_has_telefone` FOR EACH ROW
BEGIN
    INSERT INTO `log_pessoa_has_telefone` (
        `pessoa_id`,
        `telefone_id`,
        `acao`,
        `modificado_por`,
        `data_modificacao`
    ) VALUES (
        OLD.pessoa_id,
        OLD.telefone_id,
        'DELETE',
        @user_id,
        NOW()
    );
END$$

USE `db_apae_estoque`$$
CREATE DEFINER = CURRENT_USER TRIGGER `db_apae_estoque`.`trg_log_ai_valores_nutricionais` AFTER INSERT ON `valores_nutricionais` FOR EACH ROW
BEGIN
    DECLARE nova_revisao INT DEFAULT 1;

    -- Inserir na tabela main
    INSERT INTO `db_apae_estoque`.`log_valores_nutricionais_main` (`valores_nutricionais_insumos_id`, `revisao_atual`, `criado_por`)
    VALUES (NEW.insumos_id, nova_revisao, @user_id);

    -- Inserir na tabela content
    INSERT INTO `db_apae_estoque`.`log_valores_nutricionais_content` (
        `log_valores_nutricionais_main_valores_nutricionais_insumos_id`,
        `revisao`,
        `porcao`,
        `calorias`,
        `carboidratros`,
        `proteinas`,
        `gorduras_totais`,
        `gorduras_saturadas`,
        `gorduras_trans`,
        `fibras`,
        `acucares`,
        `sodio`,
        `colesterol`,
        `calcio`,
        `ferro`,
        `potassio`,
        `vitamina_a`,
        `vitamina_c`,
        `vitamina_d`,
        `vitamina_e`,
        `vitamina_k`,
        `vitamina_b1`,
        `vitamina_b2`,
        `vitamina_b3`,
        `vitamina_b6`,
        `vitamina_b12`,
        `acido_folico`,
        `percentual_valor_diario`,
        `status`,
        `modificado_por`
    ) VALUES (
        NEW.insumos_id,
        nova_revisao,
        NEW.porcao,
        NEW.calorias,
        NEW.carboidratros,
        NEW.proteinas,
        NEW.gorduras_totais,
        NEW.gorduras_saturadas,
        NEW.gorduras_trans,
        NEW.fibras,
        NEW.acucares,
        NEW.sodio,
        NEW.colesterol,
        NEW.calcio,
        NEW.ferro,
        NEW.potassio,
        NEW.vitamina_a,
        NEW.vitamina_c,
        NEW.vitamina_d,
        NEW.vitamina_e,
        NEW.vitamina_k,
        NEW.vitamina_b1,
        NEW.vitamina_b2,
        NEW.vitamina_b3,
        NEW.vitamina_b6,
        NEW.vitamina_b12,
        NEW.acido_folico,
        NEW.percentual_valor_diario,
        1,
        @user_id
    );
END$$

USE `db_apae_estoque`$$
CREATE DEFINER = CURRENT_USER TRIGGER `db_apae_estoque`.`trg_log_au_valores_nutricionais` AFTER UPDATE ON `valores_nutricionais` FOR EACH ROW
BEGIN
    DECLARE nova_revisao INT;

    -- Atualizar a revisão atual na tabela main
    SET nova_revisao = (SELECT `revisao_atual` + 1 FROM `db_apae_estoque`.`log_valores_nutricionais_main`
                        WHERE `valores_nutricionais_insumos_id` = OLD.insumos_id);

    UPDATE `db_apae_estoque`.`log_valores_nutricionais_main`
    SET `revisao_atual` = nova_revisao
    WHERE `valores_nutricionais_insumos_id` = OLD.insumos_id;

    -- Inserir na tabela content
    INSERT INTO `db_apae_estoque`.`log_valores_nutricionais_content` (
        `log_valores_nutricionais_main_valores_nutricionais_insumos_id`,
        `revisao`,
        `porcao`,
        `calorias`,
        `carboidratros`,
        `proteinas`,
        `gorduras_totais`,
        `gorduras_saturadas`,
        `gorduras_trans`,
        `fibras`,
        `acucares`,
        `sodio`,
        `colesterol`,
        `calcio`,
        `ferro`,
        `potassio`,
        `vitamina_a`,
        `vitamina_c`,
        `vitamina_d`,
        `vitamina_e`,
        `vitamina_k`,
        `vitamina_b1`,
        `vitamina_b2`,
        `vitamina_b3`,
        `vitamina_b6`,
        `vitamina_b12`,
        `acido_folico`,
        `percentual_valor_diario`,
        `status`,
        `modificado_por`
    ) VALUES (
        OLD.insumos_id,
        nova_revisao,
        NEW.porcao,
        NEW.calorias,
        NEW.carboidratros,
        NEW.proteinas,
        NEW.gorduras_totais,
        NEW.gorduras_saturadas,
        NEW.gorduras_trans,
        NEW.fibras,
        NEW.acucares,
        NEW.sodio,
        NEW.colesterol,
        NEW.calcio,
        NEW.ferro,
        NEW.potassio,
        NEW.vitamina_a,
        NEW.vitamina_c,
        NEW.vitamina_d,
        NEW.vitamina_e,
        NEW.vitamina_k,
        NEW.vitamina_b1,
        NEW.vitamina_b2,
        NEW.vitamina_b3,
        NEW.vitamina_b6,
        NEW.vitamina_b12,
        NEW.acido_folico,
        NEW.percentual_valor_diario,
        1,
        @user_id
    );
END$$

USE `db_apae_estoque`$$
CREATE DEFINER = CURRENT_USER TRIGGER `db_apae_estoque`.`trg_log_ad_valores_nutricionais` AFTER DELETE ON `valores_nutricionais` FOR EACH ROW
BEGIN
    DECLARE nova_revisao INT;

    -- Atualizar a revisão atual na tabela main
    SET nova_revisao = (SELECT `revisao_atual` + 1 FROM `db_apae_estoque`.`log_valores_nutricionais_main`
                        WHERE `valores_nutricionais_insumos_id` = OLD.insumos_id);

    UPDATE `db_apae_estoque`.`log_valores_nutricionais_main`
    SET `revisao_atual` = nova_revisao
    WHERE `valores_nutricionais_insumos_id` = OLD.insumos_id;

    -- Inserir na tabela content com status de deletado
    INSERT INTO `db_apae_estoque`.`log_valores_nutricionais_content` (
        `log_valores_nutricionais_main_valores_nutricionais_insumos_id`,
        `revisao`,
        `porcao`,
        `calorias`,
        `carboidratros`,
        `proteinas`,
        `gorduras_totais`,
        `gorduras_saturadas`,
        `gorduras_trans`,
        `fibras`,
        `acucares`,
        `sodio`,
        `colesterol`,
        `calcio`,
        `ferro`,
        `potassio`,
        `vitamina_a`,
        `vitamina_c`,
        `vitamina_d`,
        `vitamina_e`,
        `vitamina_k`,
        `vitamina_b1`,
        `vitamina_b2`,
        `vitamina_b3`,
        `vitamina_b6`,
        `vitamina_b12`,
        `acido_folico`,
        `percentual_valor_diario`,
        `status`,
        `modificado_por`
    ) VALUES (
        OLD.insumos_id,
        nova_revisao,
        OLD.porcao,
        OLD.calorias,
        OLD.carboidratros,
        OLD.proteinas,
        OLD.gorduras_totais,
        OLD.gorduras_saturadas,
        OLD.gorduras_trans,
        OLD.fibras,
        OLD.acucares,
        OLD.sodio,
        OLD.colesterol,
        OLD.calcio,
        OLD.ferro,
        OLD.potassio,
        OLD.vitamina_a,
        OLD.vitamina_c,
        OLD.vitamina_d,
        OLD.vitamina_e,
        OLD.vitamina_k,
        OLD.vitamina_b1,
        OLD.vitamina_b2,
        OLD.vitamina_b3,
        OLD.vitamina_b6,
        OLD.vitamina_b12,
        OLD.acido_folico,
        OLD.percentual_valor_diario,
        0,  -- Status "Deletado"
        @user_id
    );
END$$

USE `db_apae_estoque`$$
CREATE DEFINER = CURRENT_USER TRIGGER `db_apae_estoque`.`trg_log_ai_estoque_saida` AFTER INSERT ON `estoque_saida` FOR EACH ROW
BEGIN
    DECLARE nova_revisao INT DEFAULT 1;
    
    -- Inserir na tabela main
    INSERT INTO `db_apae_estoque`.`log_estoque_saida_main` (`estoque_saida_id`, `revisao_atual`, `criado_por`)
    VALUES (NEW.id, nova_revisao, @user_id);

    -- Inserir na tabela content
    INSERT INTO `db_apae_estoque`.`log_estoque_saida_content` (
        `log_estoque_saida_main_estoque_saida_id`,
        `revisao`,
        `insumos_id`,
        `quantidade`,
        `unidades_medida_id`,
        `data_saida`,
        `observacao`,
        `status`,
        `modificado_por`
    ) VALUES (
        NEW.id,
        nova_revisao,
        NEW.insumos_id,
        NEW.quantidade,
        NEW.unidades_medida_id,
        NEW.data_saida,
        NEW.observacao,
        1,
        @user_id
    );
END$$

USE `db_apae_estoque`$$
CREATE DEFINER = CURRENT_USER TRIGGER `db_apae_estoque`.`trg_log_au_estoque_saida` AFTER UPDATE ON `estoque_saida` FOR EACH ROW
BEGIN
    DECLARE nova_revisao INT;
    
    -- Atualizar a revisão atual na tabela main
    SET nova_revisao = (SELECT `revisao_atual` + 1 FROM `db_apae_estoque`.`log_estoque_saida_main`
                        WHERE `estoque_saida_id` = OLD.id);
    
    UPDATE `db_apae_estoque`.`log_estoque_saida_main`
    SET `revisao_atual` = nova_revisao
    WHERE `estoque_saida_id` = OLD.id;
    
    -- Inserir na tabela content
    INSERT INTO `db_apae_estoque`.`log_estoque_saida_content` (
        `log_estoque_saida_main_estoque_saida_id`,
        `revisao`,
        `insumos_id`,
        `quantidade`,
        `unidades_medida_id`,
        `data_saida`,
        `observacao`,
        `status`,
        `modificado_por`
    ) VALUES (
        OLD.id,
        nova_revisao,
        NEW.insumos_id,
        NEW.quantidade,
        NEW.unidades_medida_id,
        NEW.data_saida,
        NEW.observacao,
        1,
        @user_id
    );
END$$

USE `db_apae_estoque`$$
CREATE DEFINER = CURRENT_USER TRIGGER `db_apae_estoque`.`trg_log_ad_estoque_saida` AFTER DELETE ON `estoque_saida` FOR EACH ROW
BEGIN
    DECLARE nova_revisao INT;

    -- Atualizar a revisão atual na tabela main
    SET nova_revisao = (SELECT `revisao_atual` + 1 FROM `db_apae_estoque`.`log_estoque_saida_main`
                        WHERE `estoque_saida_id` = OLD.id);

    UPDATE `db_apae_estoque`.`log_estoque_saida_main`
    SET `revisao_atual` = nova_revisao
    WHERE `estoque_saida_id` = OLD.id;

    -- Inserir na tabela content com status de deletado
    INSERT INTO `db_apae_estoque`.`log_estoque_saida_content` (
        `log_estoque_saida_main_estoque_saida_id`,
        `revisao`,
        `insumos_id`,
        `quantidade`,
        `unidades_medida_id`,
        `data_saida`,
        `observacao`,
        `status`,
        `modificado_por`
    ) VALUES (
        OLD.id,
        nova_revisao,
        OLD.insumos_id,
        OLD.quantidade,
        OLD.unidades_medida_id,
        OLD.data_saida,
        OLD.observacao,
        0,  -- Status "Deletado"
        @user_id
    );
END$$

USE `db_apae_estoque`$$
CREATE DEFINER = CURRENT_USER TRIGGER `db_apae_estoque`.`trg_log_ai_estoque_vencido` AFTER INSERT ON `estoque_vencido` FOR EACH ROW
BEGIN
    DECLARE nova_revisao INT DEFAULT 1;
    
    -- Inserir na tabela main
    INSERT INTO `db_apae_estoque`.`log_estoque_vencido_main` (`estoque_vencido_id`, `revisao_atual`, `criado_por`)
    VALUES (NEW.id, nova_revisao, @user_id);

    -- Inserir na tabela content
    INSERT INTO `db_apae_estoque`.`log_estoque_vencido_content` (
        `log_estoque_vencido_main_estoque_vencido_id`,
        `revisao`,
        `insumos_id`,
        `quantidade`,
        `unidades_medida_id`,
        `data_validade`,
        `descartado`,
        `status`,
        `data_movido`,
        `data_atualizado`,
        `modificado_por`
    ) VALUES (
        NEW.id,
        nova_revisao,
        NEW.insumos_id,
        NEW.quantidade,
        NEW.unidades_medida_id,
        NEW.data_validade,
        NEW.descartado,
        1,
        NEW.data_movido,
        NEW.data_atualizado,
        @user_id
    );
END$$

USE `db_apae_estoque`$$
CREATE DEFINER = CURRENT_USER TRIGGER `db_apae_estoque`.`trg_log_au_estoque_vencido` AFTER UPDATE ON `estoque_vencido` FOR EACH ROW
BEGIN
    DECLARE nova_revisao INT;
    
    -- Atualizar a revisão atual na tabela main
    SET nova_revisao = (SELECT `revisao_atual` + 1 FROM `db_apae_estoque`.`log_estoque_vencido_main`
                        WHERE `estoque_vencido_id` = OLD.id);
    
    UPDATE `db_apae_estoque`.`log_estoque_vencido_main`
    SET `revisao_atual` = nova_revisao
    WHERE `estoque_vencido_id` = OLD.id;
    
    -- Inserir na tabela content
    INSERT INTO `db_apae_estoque`.`log_estoque_vencido_content` (
        `log_estoque_vencido_main_estoque_vencido_id`,
        `revisao`,
        `insumos_id`,
        `quantidade`,
        `unidades_medida_id`,
        `data_validade`,
        `descartado`,
        `status`,
        `data_movido`,
        `data_atualizado`,
        `modificado_por`
    ) VALUES (
        OLD.id,
        nova_revisao,
        NEW.insumos_id,
        NEW.quantidade,
        NEW.unidades_medida_id,
        NEW.data_validade,
        NEW.descartado,
        1,
        NEW.data_movido,
        NEW.data_atualizado,
        @user_id
    );
END$$

USE `db_apae_estoque`$$
CREATE DEFINER = CURRENT_USER TRIGGER `db_apae_estoque`.`trg_ad_log_estoque_vencido` AFTER DELETE ON `estoque_vencido` FOR EACH ROW
BEGIN
    DECLARE nova_revisao INT;

    -- Atualizar a revisão atual na tabela main
    SET nova_revisao = (SELECT `revisao_atual` + 1 FROM `db_apae_estoque`.`log_estoque_vencido_main`
                        WHERE `estoque_vencido_id` = OLD.id);

    UPDATE `db_apae_estoque`.`log_estoque_vencido_main`
    SET `revisao_atual` = nova_revisao
    WHERE `estoque_vencido_id` = OLD.id;

    -- Inserir na tabela content com status de deletado
    INSERT INTO `db_apae_estoque`.`log_estoque_vencido_content` (
        `log_estoque_vencido_main_estoque_vencido_id`,
        `revisao`,
        `insumos_id`,
        `quantidade`,
        `unidades_medida_id`,
        `data_validade`,
        `descartado`,
        `status`,
        `data_movido`,
        `data_atualizado`,
        `modificado_por`
    ) VALUES (
        OLD.id,
        nova_revisao,
        OLD.insumos_id,
        OLD.quantidade,
        OLD.unidades_medida_id,
        OLD.data_validade,
        OLD.descartado,
        0,  -- Status "Deletado"
        OLD.data_movido,
        OLD.data_atualizado,
        @user_id
    );
END$$

USE `db_apae_estoque`$$
CREATE DEFINER = CURRENT_USER TRIGGER `db_apae_estoque`.`trg_log_ai_doacoes_has_pedidos` AFTER INSERT ON `doacoes_has_pedidos` FOR EACH ROW
BEGIN
    -- Inserir na tabela de log
    INSERT INTO `log_doacoes_has_pedidos` (
        `doacoes_id`,
        `pedidos_id`,
        `acao`,
        `status`,
        `criado_por`,
        `data_criado`
    ) VALUES (
        NEW.doacoes_id,
        NEW.pedidos_id,
        'INSERT',
        1, -- Status padrão como ativo
        @user_id, -- ID do usuário que acionou o trigger
        NOW()
    );
END$$

USE `db_apae_estoque`$$
CREATE DEFINER = CURRENT_USER TRIGGER `db_apae_estoque`.`trg_log_au_doacoes_has_pedidos` AFTER UPDATE ON `doacoes_has_pedidos` FOR EACH ROW
BEGIN
    -- Inserir na tabela de log indicando a ação de atualização
    INSERT INTO `log_doacoes_has_pedidos` (
        `doacoes_id`,
        `pedidos_id`,
        `acao`,
        `status`,
        `criado_por`,
        `data_criado`
    ) VALUES (
        NEW.doacoes_id,
        NEW.pedidos_id,
        'UPDATE',
        1, -- Status padrão como ativo
        @user_id, -- ID do usuário que acionou o trigger
        NOW()
    );
END$$

USE `db_apae_estoque`$$
CREATE DEFINER = CURRENT_USER TRIGGER `db_apae_estoque`.`trg_log_ad_doacoes_has_pedidos` AFTER DELETE ON `doacoes_has_pedidos` FOR EACH ROW
BEGIN
    -- Inserir na tabela de log indicando a ação de exclusão
    INSERT INTO `log_doacoes_has_pedidos` (
        `doacoes_id`,
        `pedidos_id`,
        `acao`,
        `status`,
        `criado_por`,
        `data_criado`
    ) VALUES (
        OLD.doacoes_id,
        OLD.pedidos_id,
        'DELETE',
        0, -- Marcar como deletado
        @user_id, -- ID do usuário que acionou o trigger
        NOW()
    );
END$$


DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;


Nome do arquivo: backend\src\data\first_user.js
Conteúdo:
const knex = require("./connection"); // Adjust the path as necessary to your database connection
const bcrypt = require("bcryptjs");

async function createFirstUser() {
  // Define the first user's details
  const username = "Admin";
  const email = "admin@app.com";
  const password = "admin";
  const funcao = "administrador";

  // Hash the password
  const salt = bcrypt.genSaltSync(10);
  const hashedPassword = bcrypt.hashSync(password, salt);

  try {
    // Check if the user already exists
    const existingUser = await knex("usuarios").where({ email }).first();
    if (existingUser) {
      console.log("Admin user already exists.");
      return;
    }

    // Insert the new user into the database
    await knex("usuarios").insert({
      username: username,
      email: email,
      senha: hashedPassword, // Store the hashed password
      funcao: funcao
    });

    console.log("Admin user created successfully!");
  } catch (error) {
    console.error("Error creating first user:", error.message);
  } finally {
    knex.destroy(); // Close the database connection
  }
}

createFirstUser();


Nome do arquivo: backend\src\data\insert_completo.sql
Conteúdo:
-- Variavel de Sessão
SET @user_id = 1;

-- Unidades de medida
INSERT INTO `db_apae_estoque`.`unidades_medida` (`id`, `nome`)
VALUES
(1, 'grama'),
(2, 'quilograma'),
(3, 'miligrama'),
(4, 'litro'),
(5, 'mililitro'),
(6, 'unidade'),
(7, 'pacote'),
(8, 'caixa'),
(9, 'garrafa'),
(10, 'lata'),
(11, 'saco'),
(12, 'frasco'),
(13, 'barra'),
(14, 'pote');

-- Inserindo categorias na tabela `categoria_insumos`
INSERT INTO `db_apae_estoque`.`categoria_insumos` (`nome`)
VALUES
('Cereais'),
('Grãos'),
('Leguminosas'),
('Frutas'),
('Verduras'),
('Legumes'),
('Carnes'),
('Ovos'),
('Laticínios'),
('Oleaginosas'),
('Sementes'),
('Gorduras'),
('Óleos'),
('Açúcares'),
('Doces'),
('Bebidas'),
('Condimentos'),
('Especiarias');

-- Inserindo insumos na tabela `insumos`
-- Cereais
INSERT INTO `db_apae_estoque`.`insumos` (`nome`, `categoria_insumos_id`, `observacoes`)
VALUES
('Arroz', 1, NULL),
('Milho', 1, NULL),
('Trigo', 1, NULL);

-- Grãos
INSERT INTO `db_apae_estoque`.`insumos` (`nome`, `categoria_insumos_id`, `observacoes`)
VALUES
('Feijão', 2, NULL),
('Soja', 2, NULL),
('Grão-de-bico', 2, NULL);

-- Leguminosas
INSERT INTO `db_apae_estoque`.`insumos` (`nome`, `categoria_insumos_id`, `observacoes`)
VALUES
('Lentilha', 3, NULL),
('Ervilha', 3, NULL),
('Fava', 3, NULL);

-- Frutas
INSERT INTO `db_apae_estoque`.`insumos` (`nome`, `categoria_insumos_id`, `observacoes`)
VALUES
('Maçã', 4, NULL),
('Banana', 4, NULL),
('Laranja', 4, NULL);

-- Verduras
INSERT INTO `db_apae_estoque`.`insumos` (`nome`, `categoria_insumos_id`, `observacoes`)
VALUES
('Alface', 5, NULL),
('Espinafre', 5, NULL),
('Rúcula', 5, NULL);

-- Legumes
INSERT INTO `db_apae_estoque`.`insumos` (`nome`, `categoria_insumos_id`, `observacoes`)
VALUES
('Cenoura', 6, NULL),
('Brócolis', 6, NULL),
('Batata', 6, NULL);

-- Carnes
INSERT INTO `db_apae_estoque`.`insumos` (`nome`, `categoria_insumos_id`, `observacoes`)
VALUES
('Carne Bovina', 7, NULL),
('Carne de Frango', 7, NULL),
('Carne Suína', 7, NULL);

-- Ovos
INSERT INTO `db_apae_estoque`.`insumos` (`nome`, `categoria_insumos_id`, `observacoes`)
VALUES
('Ovo de Galinha', 8, NULL),
('Ovo de Codorna', 8, NULL),
('Ovo de Pato', 8, NULL);

-- Laticínios
INSERT INTO `db_apae_estoque`.`insumos` (`nome`, `categoria_insumos_id`, `observacoes`)
VALUES
('Leite Integral', 9, NULL),
('Queijo Muçarela', 9, NULL),
('Iogurte Natural', 9, NULL);

-- Oleaginosas
INSERT INTO `db_apae_estoque`.`insumos` (`nome`, `categoria_insumos_id`, `observacoes`)
VALUES
('Castanha-do-Pará', 10, NULL),
('Nozes', 10, NULL),
('Amêndoas', 10, NULL);

-- Sementes
INSERT INTO `db_apae_estoque`.`insumos` (`nome`, `categoria_insumos_id`, `observacoes`)
VALUES
('Semente de Chia', 11, NULL),
('Semente de Linhaça', 11, NULL),
('Semente de Girassol', 11, NULL);

-- Gorduras
INSERT INTO `db_apae_estoque`.`insumos` (`nome`, `categoria_insumos_id`, `observacoes`)
VALUES
('Azeite de Oliva', 12, NULL),
('Óleo de Soja', 12, NULL),
('Óleo de Milho', 12, NULL);

-- Óleos
INSERT INTO `db_apae_estoque`.`insumos` (`nome`, `categoria_insumos_id`, `observacoes`)
VALUES
('Margarina', 13, NULL),
('Banha de Porco', 13, NULL),
('Gordura Vegetal', 13, NULL);

-- Açúcares
INSERT INTO `db_apae_estoque`.`insumos` (`nome`, `categoria_insumos_id`, `observacoes`)
VALUES
('Açúcar Refinado', 14, NULL),
('Açúcar Mascavo', 14, NULL),
('Mel', 14, NULL);

-- Doces
INSERT INTO `db_apae_estoque`.`insumos` (`nome`, `categoria_insumos_id`, `observacoes`)
VALUES
('Chocolate', 15, NULL),
('Balas', 15, NULL),
('Biscoitos', 15, NULL);

-- Bebidas
INSERT INTO `db_apae_estoque`.`insumos` (`nome`, `categoria_insumos_id`, `observacoes`)
VALUES
('Suco de Laranja', 16, NULL),
('Refrigerante', 16, NULL),
('Água Mineral', 16, NULL);

-- Condimentos
INSERT INTO `db_apae_estoque`.`insumos` (`nome`, `categoria_insumos_id`, `observacoes`)
VALUES
('Sal', 17, NULL),
('Pimenta', 17, NULL),
('Alho', 17, NULL);

-- Especiarias
INSERT INTO `db_apae_estoque`.`insumos` (`nome`, `categoria_insumos_id`, `observacoes`)
VALUES
('Canela', 18, NULL),
('Cravo', 18, NULL),
('Cominho', 18, NULL);

-- Inserindo endereços na tabela `endereco`
INSERT INTO `db_apae_estoque`.`endereco` (`tipo`, `logradouro`, `numero`, `complemento`, `bairro`, `cidade`, `estado`, `cep`)
VALUES
('Residencial', 'Rua das Flores', '123', 'Apt 101', 'Jardim Primavera', 'São Paulo', 'SP', '01234567'),
('Comercial', 'Avenida Paulista', '987', 'Sala 202', 'Bela Vista', 'São Paulo', 'SP', '01310940'),
('Residencial', 'Rua dos Pinheiros', '456', NULL, 'Pinheiros', 'São Paulo', 'SP', '05422012'),
('Comercial', 'Avenida Brasil', '2345', 'Loja 5', 'Jardim América', 'Rio de Janeiro', 'RJ', '22250040'),
('Residencial', 'Rua das Acácias', '789', 'Casa', 'Centro', 'Curitiba', 'PR', '80010000'),
('Comercial', 'Rua XV de Novembro', '101', NULL, 'Centro', 'Curitiba', 'PR', '80020010'),
('Residencial', 'Avenida Atlântica', '456', NULL, 'Copacabana', 'Rio de Janeiro', 'RJ', '22070001'),
('Comercial', 'Avenida Rio Branco', '300', 'Sala 15', 'Centro', 'Rio de Janeiro', 'RJ', '20040001'),
('Residencial', 'Rua Augusta', '789', 'Apt 302', 'Consolação', 'São Paulo', 'SP', '01305000'),
('Comercial', 'Avenida Getúlio Vargas', '456', 'Loja 12', 'Funcionários', 'Belo Horizonte', 'MG', '30112001');

-- Inserindo telefones na tabela `telefone`
INSERT INTO `db_apae_estoque`.`telefone` (`tipo`, `ddi`, `ddd`, `numero`)
VALUES
('fixo', '+55', '11', '34567890'),
('celular', '+55', '11', '987654321'),
('fixo', '+55', '21', '23456789'),
('celular', '+55', '21', '998877665'),
('fixo', '+55', '41', '33445566'),
('celular', '+55', '41', '912345678'),
('fixo', '+55', '31', '22334455'),
('celular', '+55', '31', '998877665'),
('fixo', '+55', '51', '33445566'),
('celular', '+55', '51', '912345678'),
('fixo', '+55', '71', '22334455'),
('celular', '+55', '71', '987654321');

-- Inserção de pessoas físicas com novos CPFs válidos
INSERT INTO `db_apae_estoque`.`pessoas` (`tipo_pessoa`, `nome`, `documento`, `data_nascimento`, `email`, `endereco_id`)
VALUES
(0, 'João da Silva', '67021443005', '1980-05-15', 'joao.silva@example.com', 1),
(0, 'Maria Oliveira', '94905336023', '1975-03-22', 'maria.oliveira@example.com', 2),
(0, 'Carlos Souza', '13934437028', '1990-07-08', 'carlos.souza@example.com', 3),
(0, 'Ana Costa', '37489564018', '1985-10-10', 'ana.costa@example.com', 4),
(0, 'Paulo Lima', '48446983036', '1992-11-25', 'paulo.lima@example.com', 5);

-- Inserção de pessoas jurídicas
INSERT INTO `db_apae_estoque`.`pessoas` (`tipo_pessoa`, `nome`, `documento`, `data_nascimento`, `email`, `endereco_id`)
VALUES
(1, 'Empresa ABC Ltda', '95163056000173', '2005-09-12', 'contato@empresaabc.com.br', 6),
(1, 'Indústria XYZ S.A.', '13207455000124', '1998-06-30', 'contato@industriaxyz.com.br', 7),
(1, 'Comércio Beta Ltda', '67472714000173', '2010-01-19', 'contato@comerciobeta.com.br', 8),
(1, 'Serviços Delta ME', '76183697000145', '2015-04-07', 'contato@servicosdelta.com.br', 9),
(1, 'Construtora Gamma S.A.', '13289874000152', '2000-12-05', 'contato@construtoragamma.com.br', 10);

-- Relacionamento de pessoas físicas com telefones
INSERT INTO `db_apae_estoque`.`pessoa_has_telefone` (`pessoa_id`, `telefone_id`)
VALUES
(1, 1),
(2, 2),
(3, 3),
(4, 4),
(5, 5),
(1, 6); -- João da Silva possui dois números de telefone

-- Relacionamento de pessoas jurídicas com telefones
INSERT INTO `db_apae_estoque`.`pessoa_has_telefone` (`pessoa_id`, `telefone_id`)
VALUES
(6, 7),
(7, 8),
(8, 9),
(9, 10),
(10, 11),
(6, 12); -- Empresa ABC Ltda possui dois números de telefone

-- Inserção na tabela de doações
INSERT INTO `db_apae_estoque`.`doacoes` (`pessoas_id`, `descricao`, `data_doacao`)
VALUES
(1, 'Doação de arroz e feijão', '2023-08-01'),
(1, 'Doação de leite e derivados', '2023-08-15'),
(2, 'Doação de frutas e legumes', '2023-09-05'),
(2, 'Doação de carnes e ovos', '2023-09-10'),
(3, 'Doação de óleo de soja e azeite', '2023-12-01'),
(4, 'Doação de cereais e grãos', '2024-01-20'),
(5, 'Doação de açúcares e doces', '2024-02-15'),
(5, 'Doação de condimentos e especiarias', '2024-02-20');

INSERT INTO `db_apae_estoque`.`doacoes` (`pessoas_id`, `descricao`, `data_doacao`)
VALUES
(3, 'Doação de massas e pães', '2024-03-01'),
(4, 'Doação de sucos e bebidas', '2024-04-10'),
(1, 'Doação de verduras e hortaliças', '2024-05-05'),
(2, 'Doação de laticínios e queijos', '2024-06-01');

-- Inserção na tabela de usuários
-- INSERT INTO `db_apae_estoque`.`usuarios` (`username`, `senha`, `email`, `funcao`)
-- VALUES
-- ('admin01', SHA2('senhaAdmin123', 256), 'admin01@example.com', 'administrador'),
-- ('nutri01', SHA2('senhaNutri123', 256), 'nutri01@example.com', 'nutricionista'),
-- ('cozinheiro01', SHA2('senhaCozinha123', 256), 'cozinheiro01@example.com', 'cozinheiro');

-- Pedidos
INSERT INTO `db_apae_estoque`.`pedidos` (`usuarios_id`, `pessoas_id`, `descricao`, `data_pedido`)
VALUES 
(1, 1, 'Pedido de arroz e feijão', '2023-08-01'),
(1, 1, 'Pedido de leite e derivados', '2023-08-15'),
(1, 2, 'Pedido de frutas e legumes', '2023-09-05'),
(1, 2, 'Pedido de carnes e ovos', '2023-09-10'),
(1, 3, 'Pedido de óleo de soja e azeite', '2023-12-01'),
(1, 4, 'Pedido de cereais e grãos', '2024-01-20'),
(1, 5, 'Pedido de açúcares e doces', '2024-02-15'),
(1, 5, 'Pedido de condimentos e especiarias', '2024-02-20'),
(1, 3, 'Pedido de massas e pães', '2024-03-01'),
(1, 4, 'Pedido de sucos e bebidas', '2024-04-10'),
(1, 1, 'Pedido de verduras e hortaliças', '2024-05-05'),
(1, 2, 'Pedido de laticínios e queijos', '2024-06-01');

-- Associação entre doações e pedidos
INSERT INTO `db_apae_estoque`.`doacoes_has_pedidos` (`doacoes_id`, `pedidos_id`)
VALUES
(1, 1),
(2, 2),
(3, 3),
(4, 4),
(5, 5),
(6, 6),
(7, 7),
(8, 8),
(9, 9),
(10, 10);

-- Inserindo itens de pedido na tabela `itens_pedido`
INSERT INTO `db_apae_estoque`.`itens_pedido` (`pedidos_id`, `insumos_id`, `quantidade`, `unidades_medida_id`)
VALUES 
(1, 1, 20.00, 2),  -- Arroz
(1, 4, 10.00, 2),  -- Feijão
(2, 25, 50.00, 4),  -- Leite Integral
(2, 26, 20.00, 2),  -- Queijo Muçarela
(3, 10, 30.00, 6),  -- Maçã
(3, 17, 20.00, 2),  -- Brócolis
(4, 19, 50.00, 2),  -- Carne Bovina
(4, 22, 100.00, 6),  -- Ovo de Galinha
(5, 35, 30.00, 4),  -- Óleo de Soja
(5, 34, 50.00, 4),  -- Azeite de Oliva
(6, 2, 40.00, 2),  -- Milho
(6, 6, 25.00, 2),  -- Grão-de-bico
(7, 41, 50.00, 2),  -- Açúcar Mascavo
(7, 45, 10.00, 10),  -- Biscoitos
(8, 51, 20.00, 2),  -- Alho
(8, 53, 15.00, 2),  -- Cravo
(9, 3, 30.00, 2),  -- Trigo
(9, 7, 20.00, 2),  -- Lentilha
(10, 46, 100.00, 4),  -- Suco de Laranja
(10, 48, 200.00, 4),  -- Água Mineral
(11, 14, 50.00, 2),  -- Espinafre
(11, 17, 40.00, 2),  -- Brócolis
(12, 25, 70.00, 4),  -- Leite Integral
(12, 26, 50.00, 2);  -- Queijo Muçarela

-- Inserindo itens na tabela `estoque_entrada`
INSERT INTO `db_apae_estoque`.`estoque_entrada` (`insumos_id`, `doacoes_id`, `quantidade`, `unidades_medida_id`, `data_validade`)
VALUES 
(1, 1, 20.00, 2, '2024-08-01'),  -- Arroz (Doação 1)
(4, 1, 10.00, 2, '2024-08-01'),  -- Feijão (Doação 1)
(25, 2, 50.00, 4, '2024-08-15'),  -- Leite Integral (Doação 2)
(26, 2, 20.00, 2, '2024-08-15'),  -- Queijo Muçarela (Doação 2)
(10, 3, 30.00, 6, '2024-09-05'),  -- Maçã (Doação 3)
(17, 3, 20.00, 2, '2024-09-05'),  -- Brócolis (Doação 3)
(19, 4, 50.00, 2, '2024-09-10'),  -- Carne Bovina (Doação 4)
(22, 4, 100.00, 6, '2024-09-10'),  -- Ovo de Galinha (Doação 4)
(35, 5, 30.00, 4, '2024-12-01'),  -- Óleo de Soja (Doação 5)
(34, 5, 50.00, 4, '2024-12-01'),  -- Azeite de Oliva (Doação 5)
(2, 6, 40.00, 2, '2024-01-20'),  -- Milho (Doação 6)
(6, 6, 25.00, 2, '2024-01-20'),  -- Grão-de-bico (Doação 6)
(41, 7, 50.00, 2, '2024-02-15'),  -- Açúcar Mascavo (Doação 7)
(45, 7, 10.00, 10, '2024-02-15'),  -- Biscoitos (Doação 7)
(51, 8, 20.00, 2, '2024-02-20'),  -- Alho (Doação 8)
(53, 8, 15.00, 2, '2024-02-20');  -- Cravo (Doação 8)

-- Alterar o status para "Consumido" (2)
CALL proc_atualizar_e_mover_estoque(3, 2, 'Insumo consumido');
CALL proc_atualizar_e_mover_estoque(5, 2, 'Insumo consumido');

-- Alterar o status para "Vence hoje" (3)
CALL proc_atualizar_e_mover_estoque(7, 3, 'Insumo vence hoje');

-- Alterar o status para "Vencido" (4)
CALL proc_atualizar_e_mover_estoque(8, 4, 'Insumo vencido');
CALL proc_atualizar_e_mover_estoque(10, 4, 'Insumo vencido');

-- Alterar o status para "Aberto" (1)
CALL proc_atualizar_e_mover_estoque(2, 1, 'Insumo aberto');
CALL proc_atualizar_e_mover_estoque(6, 1, 'Insumo aberto');


Nome do arquivo: backend\src\routes\routes.js
Conteúdo:
// Define toda a estrutura de rotas.

const express = require("express");
const router = express.Router();

// Routers
const routerUsers = require("./rt_users.js");
const routerEnderecos = require("./rt_enderecos.js");
const routerTelefone = require("./rt_telefone.js");
const routerPessoas = require("./rt_pessoas.js");
const routerDoacoes = require("./rt_doacoes.js");
const routerPedidos = require("./rt_pedidos.js");
const routerItensPedidos = require("./rt_itensPedidos.js");
const routerUnidadeMedida = require("./rt_unidadeMedida.js");
const routerCategoriaInsumo = require("./rt_categoriaInsumo.js");
const routerValoresNutricionais = require("./rt_valoresNutricionais.js");
const routerInsumos = require("./rt_insumos.js");
const routerEstoqueEntrada = require("./rt_estoqueEntrada.js");
const routerEstoque = require("./rt_estoque.js");
const routerEstoqueSaida = require("./rt_estoqueSaida.js");
const routerEstoqueVencido = require("./rt_estoqueVencido.js");

// API
router.use("/users", routerUsers);
router.use("/enderecos", routerEnderecos);
router.use("/telefones", routerTelefone);
router.use("/pessoas", routerPessoas);
router.use("/doacoes", routerDoacoes);
router.use("/pedidos", routerPedidos);
router.use("/itens_pedidos", routerItensPedidos);
router.use("/unidade_medida", routerUnidadeMedida);
router.use("/categoria_insumo", routerCategoriaInsumo);
router.use("/valores_nutricionais", routerValoresNutricionais);
router.use("/insumos", routerInsumos);
router.use("/estoque_entrada", routerEstoqueEntrada);
router.use("/estoque", routerEstoque);
router.use("/estoque_saida", routerEstoqueSaida);
router.use("/estoque_vencido", routerEstoqueVencido);

// Custom 404
router.all("*", (req, res) => {
  res.status(404).send("404. Página não encontrada.");
});

module.exports = router;


Nome do arquivo: backend\src\routes\rt_categoriaInsumo.js
Conteúdo:
const express = require("express");
const router = express.Router();
const authMiddleware = require("../middlewares/authMiddleware.js");
const CategoriaInsumoController = require("../controllers/CategoriaInsumoController.js");

// Create a new categoria_insumo
router.post("/create", authMiddleware(), CategoriaInsumoController.create);

// Get all categoria_insumos
router.get("/", authMiddleware(), CategoriaInsumoController.findAll);

// Get categoria_insumo by ID
router.get("/:id", authMiddleware(), CategoriaInsumoController.findById);

// Update categoria_insumo by ID
router.put("/:id", authMiddleware(), CategoriaInsumoController.update);

// Delete categoria_insumo by ID
router.delete("/:id", authMiddleware("administrador"), CategoriaInsumoController.delete);

module.exports = router;


Nome do arquivo: backend\src\routes\rt_estoque.js
Conteúdo:
const express = require("express");
const router = express.Router();
const authMiddleware = require("../middlewares/authMiddleware.js");
const EstoqueController = require("../controllers/EstoqueController.js");

// Fetch all stock by view (fechado, aberto, vencendo_hoje)
router.get("/view/:view", authMiddleware(), EstoqueController.findByView);

// Fetch stock item by ID (uses view_estoque_completo)
router.get("/:id", authMiddleware(), EstoqueController.findById);

// Update stock by ID
router.put("/:id", authMiddleware(), EstoqueController.update);

module.exports = router;


Nome do arquivo: backend\src\routes\rt_doacoes.js
Conteúdo:
const express = require("express");
const router = express.Router();
const DoacoesController = require("../controllers/DoacoesController.js");
const authMiddleware = require("../middlewares/authMiddleware.js"); // Middleware to check authentication and authorization

// Create a new donation
router.post("/create", authMiddleware(), DoacoesController.create);

// Link a pedido to a doacao
router.post("/linkPedido", authMiddleware(), DoacoesController.linkPedido);

// Unlink a pedido from a doacao
router.post("/unlinkPedido", authMiddleware(), DoacoesController.unlinkPedido);

// Get all donations
router.get("/", authMiddleware(), DoacoesController.findAll);

// Get a specific donation by ID
router.get("/:id", authMiddleware(), DoacoesController.findById);

// Fetch all pedidos related to a specific doacao
router.get("/:doacao_id/pedidos", authMiddleware(), DoacoesController.findPedidosByDoacao);

// Update a donation by ID
router.put("/:id", authMiddleware(), DoacoesController.update);

// Delete a donation by ID
router.delete("/:id", authMiddleware("administrador"), DoacoesController.delete);

module.exports = router;


Nome do arquivo: backend\src\routes\rt_estoqueSaida.js
Conteúdo:
const express = require("express");
const router = express.Router();
const authMiddleware = require("../middlewares/authMiddleware.js");
const EstoqueSaidaController = require("../controllers/EstoqueSaidaController.js");

// Fetch all stock exits
router.get("/", authMiddleware(), EstoqueSaidaController.findAll);

// Fetch stock exits by estoque_saida ID
router.get("/:id", authMiddleware(), EstoqueSaidaController.findById);

// Fetch stock exits by insumo (material) ID
router.get("/insumo/:insumos_id", authMiddleware(), EstoqueSaidaController.findByInsumoId);

module.exports = router;


Nome do arquivo: backend\src\routes\rt_enderecos.js
Conteúdo:
// Define as rotas CRUD para Endereços

const express = require("express");
const router = express.Router();
const authMiddleware = require("../middlewares/authMiddleware.js")

const EnderecosController = require("../controllers/EnderecosController.js");

// Create Endereços
router.post("/create", authMiddleware(), EnderecosController.create);

// Read Endereços
router.get("/", authMiddleware(), EnderecosController.findAll);
router.get("/:id", authMiddleware(), EnderecosController.findById);

// Update Endereços
router.put("/:id", authMiddleware(), EnderecosController.update);

// Delete Endereços
router.delete("/:id", authMiddleware("administrador"), EnderecosController.delete);

module.exports = router;


Nome do arquivo: backend\src\routes\rt_estoqueEntrada.js
Conteúdo:
const express = require("express");
const router = express.Router();
const authMiddleware = require("../middlewares/authMiddleware.js");
const EstoqueEntradaController = require("../controllers/EstoqueEntradaController.js");

// Add new stock entry
router.post("/create", authMiddleware(), EstoqueEntradaController.create);

// Get all stock entries
router.get("/", authMiddleware(), EstoqueEntradaController.findAll);

// Get stock entry by ID
router.get("/:id", authMiddleware(), EstoqueEntradaController.findById);

// Update stock entry by ID
router.put("/:id", authMiddleware(), EstoqueEntradaController.update);

// Delete stock entry by ID
router.delete("/:id", authMiddleware(), EstoqueEntradaController.delete);

module.exports = router;


Nome do arquivo: backend\src\routes\rt_estoqueVencido.js
Conteúdo:
const express = require("express");
const router = express.Router();
const authMiddleware = require("../middlewares/authMiddleware");
const EstoqueVencidoController = require("../controllers/EstoqueVencidoController");

// Fetch all non-discarded expired items
router.get("/", authMiddleware(), EstoqueVencidoController.findAllNonDescartados);

// Fetch all discarded expired items
router.get("/descartados", authMiddleware(), EstoqueVencidoController.findAllDescartados);

// Fetch non-discarded expired item by ID
router.get("/:id", authMiddleware(), EstoqueVencidoController.findByIdNonDescartado);

// Fetch discarded expired item by ID
router.get("/descartados/:id", authMiddleware(), EstoqueVencidoController.findByIdDescartado);

// Fetch non-discarded expired items by Insumo ID
router.get("/insumo/:insumos_id", authMiddleware(), EstoqueVencidoController.findByInsumoIdNonDescartado);

// Fetch discarded expired items by Insumo ID
router.get("/descartados/insumo/:insumos_id", authMiddleware(), EstoqueVencidoController.findByInsumoIdDescartado);

// Update 'descartado' field for an expired item
router.put("/:id", authMiddleware(), EstoqueVencidoController.updateDescartado);

module.exports = router;


Nome do arquivo: backend\src\routes\rt_insumos.js
Conteúdo:
const express = require("express");
const router = express.Router();
const authMiddleware = require("../middlewares/authMiddleware.js");
const InsumosController = require("../controllers/InsumosController.js");

// Create a new insumo
router.post("/create", authMiddleware(), InsumosController.create);

// Get all insumos
router.get("/", authMiddleware(), InsumosController.findAll);

// Get insumo by ID
router.get("/:id", authMiddleware(), InsumosController.findById);

// Update insumo by ID
router.put("/:id", authMiddleware(), InsumosController.update);

// Delete insumo by ID
router.delete("/:id", authMiddleware("administrador"), InsumosController.delete);

module.exports = router;


Nome do arquivo: backend\src\routes\rt_pessoas.js
Conteúdo:
const express = require("express");
const router = express.Router();
const PessoasController = require("../controllers/PessoasController.js");
const authMiddleware = require("../middlewares/authMiddleware.js"); // Auth middleware

// Create a new person
router.post("/create", authMiddleware(), PessoasController.create);

// Get all people
router.get("/", authMiddleware(), PessoasController.findAll);

// Get a person by ID
router.get("/:id", authMiddleware(), PessoasController.findById);

// Get all details of a pessoa, including endereco and telefones
router.get("/:id/details", authMiddleware(), PessoasController.getDetails);

// Update a person by ID
router.put("/:id", authMiddleware(), PessoasController.update);

// Delete a person by ID
router.delete("/:id", authMiddleware("administrador"), PessoasController.delete);

module.exports = router;


Nome do arquivo: backend\src\routes\rt_telefone.js
Conteúdo:
const express = require("express");
const router = express.Router();
const TelefonesController = require("../controllers/TelefonesController.js");
const authMiddleware = require("../middlewares/authMiddleware.js"); // Auth middleware for checking user roles

// Create a new phone
router.post("/create", authMiddleware(), TelefonesController.create);

// Get all phones
router.get("/", authMiddleware(), TelefonesController.findAll);

// Get a phone by ID
router.get("/:id", authMiddleware(), TelefonesController.findById);

// Update a phone by ID
router.put("/:id", authMiddleware(), TelefonesController.update);

// Delete a phone by ID
router.delete("/:id", authMiddleware("administrador"), TelefonesController.delete);

module.exports = router;


Nome do arquivo: backend\src\routes\rt_itensPedidos.js
Conteúdo:
const express = require("express");
const router = express.Router();
const authMiddleware = require("../middlewares/authMiddleware.js");
const ItensPedidoController = require("../controllers/ItensPedidoController.js");

// Create a new item for a pedido
router.post("/create", authMiddleware(), ItensPedidoController.create);

// Get all items related to a specific pedido
router.get("/pedido/:pedidos_id", authMiddleware(), ItensPedidoController.findByPedido);

// Get a specific item by its item_id
router.get("/item/:item_id", authMiddleware(), ItensPedidoController.findById);

// Update an item for a pedido
router.put("/:id", authMiddleware(), ItensPedidoController.update);

// Delete an item from a pedido
router.delete("/:id", authMiddleware("administrador"), ItensPedidoController.delete);

module.exports = router;


Nome do arquivo: backend\src\routes\rt_pedidos.js
Conteúdo:
const express = require("express");
const router = express.Router();
const PedidosController = require("../controllers/PedidosController.js");
const authMiddleware = require("../middlewares/authMiddleware.js");

// Create a new pedido
router.post("/create", authMiddleware(), PedidosController.create);

// Link a doacao to a pedido
router.post("/linkDoacao", authMiddleware(), PedidosController.linkDoacao);

// Unlink a doacao from a pedido
router.post("/unlinkDoacao", authMiddleware(), PedidosController.unlinkDoacao);

// Get all pedidos
router.get("/", authMiddleware(), PedidosController.findAll);

// Get a specific pedido by ID
router.get("/:id", authMiddleware(), PedidosController.findById);

// Fetch all doacoes related to a specific pedido
router.get("/:pedido_id/doacoes", authMiddleware(), PedidosController.findDoacoesByPedido);

// Update a pedido by ID
router.put("/:id", authMiddleware(), PedidosController.update);

// Delete a pedido by ID
router.delete("/:id", authMiddleware("administrador"), PedidosController.delete);

module.exports = router;


Nome do arquivo: backend\src\routes\rt_unidadeMedida.js
Conteúdo:
const express = require("express");
const router = express.Router();
const authMiddleware = require("../middlewares/authMiddleware.js");
const UnidadeMedidaController = require("../controllers/UnidadeMedidaController.js");

// Create a new unidade_medida
router.post("/create", authMiddleware(), UnidadeMedidaController.create);

// Get all unidades_medida
router.get("/", authMiddleware(), UnidadeMedidaController.findAll);

// Get unidade_medida by ID
router.get("/:id", authMiddleware(), UnidadeMedidaController.findById);

// Update unidade_medida by ID
router.put("/:id", authMiddleware(), UnidadeMedidaController.update);

// Delete unidade_medida by ID
router.delete("/:id", authMiddleware("administrador"), UnidadeMedidaController.delete);

module.exports = router;


Nome do arquivo: backend\src\routes\rt_users.js
Conteúdo:
// Define as rotas CRUD para Users

const express = require("express");
const router = express.Router();
const authMiddleware = require("../middlewares/authMiddleware.js");

const UsersController = require("../controllers/UsersController.js");

// Login
router.post("/login", UsersController.login);

// Create Users
router.post("/create", authMiddleware(), UsersController.create);

// Read Users
router.get("/", authMiddleware(), UsersController.findAll);
router.get("/:id", authMiddleware(), UsersController.findById);

// Update Users
router.put("/:id", authMiddleware(), UsersController.update);

// Delete Users
router.delete("/:id", authMiddleware("administrador"), UsersController.delete);

module.exports = router;


Nome do arquivo: backend\src\routes\rt_valoresNutricionais.js
Conteúdo:
const express = require("express");
const router = express.Router();
const authMiddleware = require("../middlewares/authMiddleware");
const ValoresNutricionaisController = require("../controllers/ValoresNutricionaisController");

// Update valores_nutricionais for an insumo
router.put("/:insumos_id", authMiddleware(), ValoresNutricionaisController.update);

// Get all valores_nutricionais
router.get("/", authMiddleware(), ValoresNutricionaisController.findAll);

// Get valores_nutricionais by insumos_id
router.get("/:insumos_id", authMiddleware(), ValoresNutricionaisController.findByInsumo);

// Delete valores_nutricionais by insumos_id (if needed)
router.delete("/:insumos_id", authMiddleware("administrador"), ValoresNutricionaisController.delete);

module.exports = router;


Nome do arquivo: backend\src\models\BaseModel.js
Conteúdo:
const knex = require("../data/connection.js");

class BaseModel {
  constructor(tableName) {
    this.tableName = tableName;
  }

  // Set user session
  async setUserSession(trx, user_id) {
    if (!user_id) {
      console.error("User ID is undefined when setting session variable.");
    } else {
      console.log("Setting session variable for user_id:", user_id);
    }

    await trx.raw("SET @user_id = ?", [user_id]);
  }

  // Create new record with transaction
  async create(data, user_id) {
    const trx = await knex.transaction();
    try {
      await this.setUserSession(trx, user_id); // Set session
      const result = await trx(this.tableName).insert(data);
      await trx.commit();
      return { status: true, id: result[0] };
    } catch (error) {
      await trx.rollback();
      console.error("Error during create:", error.message); // Debugging log
      return { status: false, error: error.message };
    }
  }

  // Find all records
  async findAll(columns = ["*"]) {
    try {
      const result = await knex(this.tableName).select(columns);
      return { status: true, values: result };
    } catch (error) {
      console.error("Error during findAll:", error.message); // Debugging log
      return { status: false, error: error.message };
    }
  }

  // Find one record by ID
  async findById(id, columns = ["*"]) {
    try {
      const result = await knex(this.tableName)
        .select(columns)
        .where({ id })
        .first();
      if (!result) {
        return {
          status: false,
          message: `${this.tableName.slice(0, -1)} not found`,
        };
      }
      return { status: true, values: result };
    } catch (error) {
      console.error("Error during findById:", error.message); // Debugging log
      return { status: false, error: error.message };
    }
  }

  // Update record by ID with transaction
  async update(id, data, user_id) {
    const trx = await knex.transaction();
    try {
      // Debugging: Log user_id being set for session
      console.log("Setting session for user_id:", user_id);

      await this.setUserSession(trx, user_id); // Set session

      // Debugging: Log the updated fields
      console.log("Updating:", { id, data });

      const result = await trx(this.tableName).where({ id }).update(data);
      await trx.commit();

      if (result === 0) {
        return {
          status: false,
          message: `${this.tableName.slice(0, -1)} not found`,
        };
      }
      return {
        status: true,
        message: `${this.tableName.slice(0, -1)} updated successfully`,
      };
    } catch (error) {
      await trx.rollback();
      console.error("Error during update:", error.message); // Debugging log
      return { status: false, error: error.message };
    }
  }

  // Delete record by ID with transaction
  async delete(id, user_id) {
    const trx = await knex.transaction();
    try {
      // Set the user session with user_id
      await this.setUserSession(trx, user_id);

      // Debugging: Log the ID to be deleted and user_id
      console.log("Deleting record with ID:", id);
      console.log("User ID for session:", user_id);

      const result = await trx(this.tableName).where({ id }).del(); // Delete the record
      await trx.commit();

      if (result === 0) {
        return {
          status: false,
          message: `${this.tableName.slice(0, -1)} not found`,
        };
      }
      return {
        status: true,
        message: `${this.tableName.slice(0, -1)} deleted successfully`,
      };
    } catch (error) {
      await trx.rollback();
      console.error("Error during delete:", error.message); // Debugging log
      return { status: false, error: error.message };
    }
  }
}

module.exports = BaseModel;


Nome do arquivo: backend\src\models\CategoriaInsumo.js
Conteúdo:
const BaseModel = require("./BaseModel.js");

class CategoriaInsumo extends BaseModel {
  constructor() {
    super("categoria_insumos"); // Define the table name
  }

  // Additional methods specific to CategoriaInsumo can be added here if needed.
}

module.exports = new CategoriaInsumo();


Nome do arquivo: backend\src\models\Doacoes.js
Conteúdo:
const BaseModel = require("./BaseModel");
const knex = require("../data/connection");

class Doacoes extends BaseModel {
  constructor() {
    super("doacoes"); // Define the table name
  }

  // Fetch all donations, using the view to join data from pessoas
  async findAll() {
    try {
      // Query the view instead of the original tables
      const doacoes = await knex("view_doacoes_pessoas").select("*");

      return { status: true, values: doacoes };
    } catch (err) {
      return { status: false, err: err.message };
    }
  }

  // Fetch a specific donation by ID, using the view
  async findById(id) {
    try {
      // Query the view instead of the original tables
      const doacao = await knex("view_doacoes_pessoas")
        .where("doacao_id", id)
        .first();

      return doacao
        ? { status: true, values: doacao }
        : { status: false, message: "Doação não encontrada." };
    } catch (err) {
      return { status: false, err: err.message };
    }
  }

  // Custom update method for Doacoes
  async update(id, pessoas_id, descricao, data_doacao, user_id) {
    const updatedFields = {
      pessoas_id,
      descricao,
      data_doacao,
    };

    // Remove undefined fields
    Object.keys(updatedFields).forEach((key) => {
      if (!updatedFields[key]) delete updatedFields[key];
    });

    try {
      // Use BaseModel's update method
      return await super.update(id, updatedFields, user_id); // Call BaseModel's update method
    } catch (err) {
      return { status: false, err: err.message };
    }
  }

  // Delete donation by ID (no need to recreate, just use BaseModel's delete)

  // Fetch all pedidos related to a specific doacao (using the view)
  async findPedidosByDoacao(doacao_id) {
    try {
      const pedidos = await knex("view_pedidos_by_doacao")
        .where("doacoes_id", doacao_id)
        .select("pedido_id", "pedido_descricao", "data_pedido");

      return { status: true, values: pedidos };
    } catch (err) {
      return { status: false, err: err.message };
    }
  }

  // Link a doacao with a pedido (set the criado_por using transaction)
  async linkPedido(doacoes_id, pedidos_id, user_id) {
    const trx = await knex.transaction(); // Start transaction
    try {
      // Set the session for the user ID (who's performing the operation)
      await trx.raw("SET @user_id = ?", [user_id]);

      // Insert the link into doacoes_has_pedidos table with a transaction
      await trx("doacoes_has_pedidos").insert({
        doacoes_id,
        pedidos_id,
      });

      await trx.commit(); // Commit the transaction
      return { status: true, message: "Pedido linked to Doacao successfully!" };
    } catch (err) {
      await trx.rollback(); // Rollback in case of error
      return { status: false, err: err.message };
    }
  }

  // Unlink a doacao from a pedido (set the user performing the action)
  async unlinkPedido(doacoes_id, pedidos_id, user_id) {
    const trx = await knex.transaction(); // Start transaction
    try {
      // Set the session for the user ID (who's performing the operation)
      await trx.raw("SET @user_id = ?", [user_id]);

      // Delete the link from doacoes_has_pedidos with a transaction
      await trx("doacoes_has_pedidos").where({ doacoes_id, pedidos_id }).del();

      await trx.commit(); // Commit the transaction
      return {
        status: true,
        message: "Pedido unlinked from Doacao successfully!",
      };
    } catch (err) {
      await trx.rollback(); // Rollback in case of error
      return { status: false, err: err.message };
    }
  }
}

module.exports = new Doacoes();


Nome do arquivo: backend\src\models\EstoqueEntrada.js
Conteúdo:
const BaseModel = require("./BaseModel.js");
const knex = require("../data/connection.js");

class EstoqueEntrada extends BaseModel {
  constructor() {
    super("estoque_entrada"); // Define the table name
  }

  // Custom method to add stock entry
  async addStockEntry(data, user_id) {
    const trx = await knex.transaction();
    try {
      await this.setUserSession(trx, user_id); // Set session

      const result = await trx(this.tableName).insert(data);
      await trx.commit();
      return { status: true, id: result[0] };
    } catch (error) {
      await trx.rollback();
      console.error("Error during stock entry creation:", error.message);
      return { status: false, err: error.message };
    }
  }

  // Method to retrieve all stock entries
  async findAllWithDetails() {
    try {
      const results = await knex(this.tableName)
        .join("insumos", "estoque_entrada.insumos_id", "=", "insumos.id")
        .join(
          "unidades_medida",
          "estoque_entrada.unidades_medida_id",
          "=",
          "unidades_medida.id"
        )
        .select(
          "estoque_entrada.*",
          "insumos.nome as insumo_nome",
          "unidades_medida.nome as unidade_medida_nome"
        );
      return { status: true, values: results };
    } catch (error) {
      console.error("Error fetching stock entries:", error.message);
      return { status: false, err: error.message };
    }
  }
}

module.exports = new EstoqueEntrada();


Nome do arquivo: backend\src\models\Endereco.js
Conteúdo:
const BaseModel = require("./BaseModel.js");

class Endereco extends BaseModel {
  constructor() {
    super("endereco"); // Set the table name for the model
  }

  // Custom create method for Endereco (call BaseModel's create method)
  async create(
    tipo,
    logradouro,
    numero,
    complemento,
    bairro,
    cidade,
    estado,
    cep,
    user_id // Pass user_id to set session variable
  ) {
    const data = {
      tipo,
      logradouro,
      numero,
      complemento,
      bairro,
      cidade,
      estado,
      cep,
    };

    try {
      // Call the create method from BaseModel to avoid recursion
      return await super.create(data, user_id); // Use "super.create" to call BaseModel's method
    } catch (err) {
      return { status: false, err: err.message };
    }
  }

  // Custom update method for Endereco
  async update(
    id,
    tipo,
    logradouro,
    numero,
    complemento,
    bairro,
    cidade,
    estado,
    cep,
    user_id // Pass user_id to set session variable
  ) {
    const updatedFields = {
      tipo,
      logradouro,
      numero,
      complemento,
      bairro,
      cidade,
      estado,
      cep,
    };

    // Remove undefined fields
    Object.keys(updatedFields).forEach((key) => {
      if (!updatedFields[key]) delete updatedFields[key];
    });

    try {
      // Call the update method from BaseModel to avoid recursion
      return await super.update(id, updatedFields, user_id); // Use "super.update" to call BaseModel's method
    } catch (err) {
      return { status: false, err: err.message };
    }
  }

  // The other methods (findAll, findById, delete) are inherited from BaseModel
}

module.exports = new Endereco();


Nome do arquivo: backend\src\models\Estoque.js
Conteúdo:
const BaseModel = require("./BaseModel.js");
const knex = require("../data/connection.js");

class Estoque extends BaseModel {
  constructor() {
    super("estoque"); // Define the table name
  }

  // Fetch stock by ID using the view
  async findById(id) {
    try {
      const result = await knex("view_estoque_completo")
        .where("estoque_id", id)
        .first();

      return result
        ? { status: true, values: result }
        : { status: false, message: "Stock item not found." };
    } catch (err) {
      return { status: false, err: err.message };
    }
  }

  // Fetch all stock entries using views (fechado, aberto, vencendo hoje)
  async findAllByView(viewName) {
    try {
      const result = await knex(viewName).select("*");
      return { status: true, values: result };
    } catch (err) {
      return { status: false, err: err.message };
    }
  }

  // Update stock by calling the stored procedure
  async updateStockUsingProcedure(id, novo_status, observacao, user_id) {
    const trx = await knex.transaction();
    try {
      await this.setUserSession(trx, user_id); // Set session for auditing

      // Call the stored procedure for updating and moving stock
      await trx.raw("CALL proc_atualizar_e_mover_estoque(?, ?, ?)", [
        id,
        novo_status,
        observacao,
      ]);

      await trx.commit();
      return { status: true, message: "Stock updated and moved successfully." };
    } catch (err) {
      await trx.rollback();
      console.error("Error during stock update:", err.message);
      return { status: false, err: err.message };
    }
  }
}

module.exports = new Estoque();


Nome do arquivo: backend\src\models\EstoqueSaida.js
Conteúdo:
const BaseModel = require("./BaseModel.js");
const knex = require("../data/connection.js");

class EstoqueSaida extends BaseModel {
  constructor() {
    super("estoque_saida"); // Define the table name
  }

  // Fetch all stock exit records (using view or table)
  async findAll() {
    try {
      const result = await knex("view_estoque_saida").select("*");
      return { status: true, values: result };
    } catch (err) {
      return { status: false, err: err.message };
    }
  }

  // Fetch a specific stock exit by estoque_saida ID
  async findById(id) {
    try {
      const result = await knex("view_estoque_saida")
        .where("estoque_saida_id", id)
        .first();

      return result
        ? { status: true, values: result }
        : { status: false, message: "Stock exit not found." };
    } catch (err) {
      return { status: false, err: err.message };
    }
  }

  // Fetch stock exit records by insumo ID (all exits related to a specific insumo)
  async findByInsumoId(insumos_id) {
    try {
      const result = await knex("view_estoque_saida")
        .where("insumos_id", insumos_id)
        .select("*");

      return result.length > 0
        ? { status: true, values: result }
        : {
            status: false,
            message: "No stock exit records found for this insumo.",
          };
    } catch (err) {
      return { status: false, err: err.message };
    }
  }
}

module.exports = new EstoqueSaida();


Nome do arquivo: backend\src\models\EstoqueVencido.js
Conteúdo:
const BaseModel = require("./BaseModel.js");
const knex = require("../data/connection.js");

class EstoqueVencido extends BaseModel {
  constructor() {
    super("estoque_vencido");
  }

  // Fetch all non-discarded expired items
  async findAllNonDescartados() {
    try {
      const result = await knex("view_insumos_vencidos_nao_descartados").select(
        "*"
      );
      return { status: true, values: result };
    } catch (err) {
      return { status: false, err: err.message };
    }
  }

  // Fetch all discarded expired items
  async findAllDescartados() {
    try {
      const result = await knex("view_insumos_vencidos_descartados").select(
        "*"
      );
      return { status: true, values: result };
    } catch (err) {
      return { status: false, err: err.message };
    }
  }

  // Fetch a specific non-discarded item by its ID
  async findByIdNonDescartado(id) {
    try {
      const result = await knex("view_insumos_vencidos_nao_descartados")
        .where("estoque_vencido_id", id)
        .first();

      return result
        ? { status: true, values: result }
        : {
            status: false,
            message: "Expired item (não descartado) not found.",
          };
    } catch (err) {
      return { status: false, err: err.message };
    }
  }

  // Fetch a specific discarded item by its ID
  async findByIdDescartado(id) {
    try {
      const result = await knex("view_insumos_vencidos_descartados")
        .where("estoque_vencido_id", id)
        .first();

      return result
        ? { status: true, values: result }
        : { status: false, message: "Expired item (descartado) not found." };
    } catch (err) {
      return { status: false, err: err.message };
    }
  }

  // Fetch non-discarded expired items by Insumo ID
  async findByInsumoIdNonDescartado(insumos_id) {
    try {
      const result = await knex("view_insumos_vencidos_nao_descartados")
        .where("insumos_id", insumos_id)
        .select("*");

      return result.length > 0
        ? { status: true, values: result }
        : {
            status: false,
            message: "No non-discarded expired items found for this insumo.",
          };
    } catch (err) {
      return { status: false, err: err.message };
    }
  }

  // Fetch discarded expired items by Insumo ID
  async findByInsumoIdDescartado(insumos_id) {
    try {
      const result = await knex("view_insumos_vencidos_descartados")
        .where("insumos_id", insumos_id)
        .select("*");

      return result.length > 0
        ? { status: true, values: result }
        : {
            status: false,
            message: "No discarded expired items found for this insumo.",
          };
    } catch (err) {
      return { status: false, err: err.message };
    }
  }

  // Update the 'descartado' field for an expired item
  async updateDescartado(id, descartado) {
    const trx = await knex.transaction();
    try {
      await this.setUserSession(trx, null); // Use the session method
      await trx("estoque_vencido").where({ id }).update({ descartado });
      await trx.commit();
      return {
        status: true,
        message: "Descartado field updated successfully!",
      };
    } catch (err) {
      await trx.rollback();
      return { status: false, err: err.message };
    }
  }
}

module.exports = new EstoqueVencido();


Nome do arquivo: backend\src\models\Pedidos.js
Conteúdo:
const BaseModel = require("./BaseModel.js");
const knex = require("../data/connection.js");

class Pedidos extends BaseModel {
  constructor() {
    super("pedidos"); // Define the table name for create, update, delete
  }

  // Fetch all pedidos, including related pessoa and usuario info
  async findAll() {
    try {
      const pedidos = await knex("view_pedidos").select("*"); // Query the view
      return { status: true, values: pedidos };
    } catch (err) {
      return { status: false, err: err.message };
    }
  }

  // Fetch a specific pedido by ID, using the view
  async findById(id) {
    try {
      const pedido = await knex("view_pedidos").where("pedido_id", id).first();
      return pedido
        ? { status: true, values: pedido }
        : { status: false, message: "Pedido não encontrado." };
    } catch (err) {
      return { status: false, err: err.message };
    }
  }

  // Custom update method for Pedidos
  async update(id, usuarios_id, pessoas_id, descricao, data_pedido, user_id) {
    const updatedFields = {
      usuarios_id,
      pessoas_id,
      descricao,
      data_pedido,
    };

    // Remove undefined fields
    Object.keys(updatedFields).forEach((key) => {
      if (!updatedFields[key]) delete updatedFields[key];
    });

    try {
      return await super.update(id, updatedFields, user_id); // Call BaseModel's update method
    } catch (err) {
      return { status: false, err: err.message };
    }
  }

  // Fetch all doacoes related to a specific pedido (using the view)
  async findDoacoesByPedido(pedido_id) {
    try {
      const doacoes = await knex("view_doacoes_by_pedido")
        .where("pedidos_id", pedido_id)
        .select("doacao_id", "doacao_descricao", "data_doacao");

      return { status: true, values: doacoes };
    } catch (err) {
      return { status: false, err: err.message };
    }
  }

  // Link a pedido with a doacao (set the user_id using a transaction)
  async linkDoacao(pedidos_id, doacoes_id, user_id) {
    const trx = await knex.transaction(); // Start transaction
    try {
      // Set the session for the user ID
      await trx.raw("SET @user_id = ?", [user_id]);

      // Insert the link into doacoes_has_pedidos with a transaction
      await trx("doacoes_has_pedidos").insert({
        pedidos_id,
        doacoes_id,
      });

      await trx.commit(); // Commit the transaction
      return { status: true, message: "Doacao linked to Pedido successfully!" };
    } catch (err) {
      await trx.rollback(); // Rollback in case of error
      return { status: false, err: err.message };
    }
  }

  // Unlink a pedido from a doacao (set the user_id using a transaction)
  async unlinkDoacao(pedidos_id, doacoes_id, user_id) {
    const trx = await knex.transaction(); // Start transaction
    try {
      // Set the session for the user ID
      await trx.raw("SET @user_id = ?", [user_id]);

      // Delete the link from doacoes_has_pedidos with a transaction
      await trx("doacoes_has_pedidos").where({ pedidos_id, doacoes_id }).del();

      await trx.commit(); // Commit the transaction
      return {
        status: true,
        message: "Doacao unlinked from Pedido successfully!",
      };
    } catch (err) {
      await trx.rollback(); // Rollback in case of error
      return { status: false, err: err.message };
    }
  }
}

module.exports = new Pedidos();


Nome do arquivo: backend\src\models\Insumos.js
Conteúdo:
const BaseModel = require("./BaseModel.js");

class Insumos extends BaseModel {
  constructor() {
    super("insumos"); // Define the table name
  }

  // Custom methods specific to Insumos can be added if needed
}

module.exports = new Insumos();


Nome do arquivo: backend\src\models\Telefone.js
Conteúdo:
const BaseModel = require("./BaseModel.js"); // Inherit from BaseModel

class Telefone extends BaseModel {
  constructor() {
    super("telefone"); // Define the table name
  }

  // Custom create method for telefone
  async create(tipo, ddi, ddd, numero, user_id) {
    const data = {
      tipo,
      ddi,
      ddd,
      numero,
    };

    try {
      // Use BaseModel's create method
      return await super.create(data, user_id);
    } catch (err) {
      return { status: false, err: err.message };
    }
  }

  // Custom update method for telefone
  async update(id, tipo, ddi, ddd, numero, user_id) {
    const updatedFields = {
      tipo,
      ddi,
      ddd,
      numero,
    };

    // Remove undefined fields
    Object.keys(updatedFields).forEach((key) => {
      if (!updatedFields[key]) delete updatedFields[key];
    });

    try {
      // Use BaseModel's update method
      return await super.update(id, updatedFields, user_id);
    } catch (err) {
      return { status: false, err: err.message };
    }
  }

  // Other methods (findAll, findById, delete) will be inherited from BaseModel
}

module.exports = new Telefone();


Nome do arquivo: backend\src\models\Pessoa.js
Conteúdo:
const knex = require("../data/connection.js");
const BaseModel = require("./BaseModel.js");

class Pessoa extends BaseModel {
  constructor() {
    super("pessoas"); // Define the table name
  }

  // Custom create method for Pessoa
  async create(
    tipo_pessoa,
    nome,
    documento,
    data_nascimento,
    email,
    endereco_id,
    user_id
  ) {
    const data = {
      tipo_pessoa,
      nome,
      documento,
      data_nascimento,
      email,
      endereco_id,
    };

    try {
      // Use BaseModel's create method
      return await super.create(data, user_id);
    } catch (err) {
      return { status: false, err: err.message };
    }
  }

  // Custom update method for Pessoa
  async update(
    id,
    tipo_pessoa,
    nome,
    documento,
    data_nascimento,
    email,
    endereco_id,
    user_id
  ) {
    const updatedFields = {
      tipo_pessoa,
      nome,
      documento,
      data_nascimento,
      email,
      endereco_id,
    };

    // Remove undefined fields
    Object.keys(updatedFields).forEach((key) => {
      if (!updatedFields[key]) delete updatedFields[key];
    });

    try {
      // Use BaseModel's update method
      return await super.update(id, updatedFields, user_id);
    } catch (err) {
      return { status: false, err: err.message };
    }
  }

  // Other methods (findAll, findById, delete) are inherited from BaseModel

  // Get all details for a Pessoa, including Endereco and Telefones
  async getPessoaWithDetails(id) {
    try {
      // Fetch the basic pessoa details
      const pessoa = await knex("pessoas").where({ id }).first();
      if (!pessoa) {
        return { status: false, message: "Pessoa not found." };
      }

      // Fetch the associated Endereco
      const endereco = await this.getEndereco(pessoa.endereco_id);

      // Fetch the associated Telefones
      const telefones = await this.getTelefones(id);

      // Return the full details, including endereco and telefones
      return {
        status: true,
        pessoa: pessoa,
        endereco: endereco,
        telefones: telefones,
      };
    } catch (err) {
      return { status: false, message: err.message };
    }
  }

  // Get the Endereco associated with a Pessoa
  async getEndereco(endereco_id) {
    try {
      const endereco = await knex("endereco")
        .where({ id: endereco_id })
        .first();
      return endereco || null;
    } catch (err) {
      console.error("Error fetching endereco:", err.message);
      return null;
    }
  }

  // Get all Telefones associated with a Pessoa
  async getTelefones(pessoa_id) {
    try {
      // Fetch all telefones related to the pessoa via pessoa_has_telefone
      const telefones = await knex("pessoa_has_telefone")
        .join("telefone", "pessoa_has_telefone.telefone_id", "=", "telefone.id")
        .where("pessoa_has_telefone.pessoa_id", pessoa_id)
        .select("telefone.*");

      return telefones || [];
    } catch (err) {
      console.error("Error fetching telefones:", err.message);
      return [];
    }
  }
}

module.exports = new Pessoa();


Nome do arquivo: backend\src\models\ItensPedido.js
Conteúdo:
const BaseModel = require("./BaseModel.js");
const knex = require("../data/connection.js");

class ItensPedido extends BaseModel {
  constructor() {
    super("itens_pedido"); // Define the table name
  }

  // Fetch all items related to a specific pedido using the view
  async findByPedido(pedidos_id) {
    try {
      const itens = await knex("view_itens_pedido")
        .where("pedidos_id", pedidos_id)
        .select("item_id", "insumo_nome", "quantidade", "unidade_medida_nome");

      return { status: true, values: itens };
    } catch (err) {
      return { status: false, err: err.message };
    }
  }

  // Fetch a specific item by its item_id using the view
  async findById(item_id) {
    try {
      const item = await knex("view_itens_pedido")
        .where("item_id", item_id)
        .first();

      return item
        ? { status: true, values: item }
        : { status: false, message: "Item not found" };
    } catch (err) {
      return { status: false, err: err.message };
    }
  }

  // Custom update method for ItensPedido
  async update(id, insumos_id, quantidade, unidades_medida_id, user_id) {
    const updatedFields = {
      insumos_id,
      quantidade,
      unidades_medida_id,
    };

    // Remove undefined fields
    Object.keys(updatedFields).forEach((key) => {
      if (!updatedFields[key]) delete updatedFields[key];
    });

    try {
      // Use BaseModel's update method
      return await super.update(id, updatedFields, user_id);
    } catch (err) {
      return { status: false, err: err.message };
    }
  }

  // Link a new item to a pedido
  async createItem(
    pedidos_id,
    insumos_id,
    quantidade,
    unidades_medida_id,
    user_id
  ) {
    const trx = await knex.transaction();
    try {
      // Set the session for the user ID
      await this.setUserSession(trx, user_id);

      const result = await trx("itens_pedido").insert({
        pedidos_id,
        insumos_id,
        quantidade,
        unidades_medida_id,
      });

      await trx.commit(); // Commit the transaction
      return { status: true, id: result[0] };
    } catch (err) {
      await trx.rollback();
      return { status: false, err: err.message };
    }
  }

  // Delete an item from a pedido
  async deleteItem(id, user_id) {
    const trx = await knex.transaction();
    try {
      // Set the session for the user ID
      await this.setUserSession(trx, user_id);

      const result = await trx("itens_pedido").where({ id }).del();

      await trx.commit(); // Commit the transaction
      return { status: true, message: "Item deleted successfully!" };
    } catch (err) {
      await trx.rollback();
      return { status: false, err: err.message };
    }
  }
}

module.exports = new ItensPedido();


Nome do arquivo: backend\src\models\Users.js
Conteúdo:
const bcrypt = require("bcryptjs");
const knex = require("../data/connection.js");
const BaseModel = require("./BaseModel.js");

class User extends BaseModel {
  constructor() {
    super("usuarios"); // Pass the table name
  }

  // Override the 'create' method to handle password hashing and unique checks
  async new(username, email, password, funcao, user_id) {
    let salt = bcrypt.genSaltSync(10);
    let hashedPassword = bcrypt.hashSync(password, salt);

    // Check if email or username already exists
    let existingUser = await knex(this.tableName)
      .where({ email })
      .orWhere({ username })
      .first();

    if (existingUser) {
      return {
        status: false,
        err: "E-mail ou nome de usuário já cadastrado.",
      };
    }

    // Use the BaseModel's 'create' method to insert the new user
    return await this.create(
      {
        username,
        email,
        senha: hashedPassword,
        funcao,
      },
      user_id
    );
  }

  // Find a user by their email (specific to users)
  async findByEmail(email) {
    try {
      // Make sure to select the 'id' along with other fields
      let user = await knex(this.tableName)
        .select(["id", "email", "senha", "funcao"]) // Include 'id' here
        .where({ email })
        .first();

      return user
        ? { status: true, values: user }
        : { status: false, message: "E-mail não encontrado." };
    } catch (err) {
      return { status: false, err: err.message };
    }
  }
}

module.exports = new User();


Nome do arquivo: backend\src\models\ValoresNutricionais.js
Conteúdo:
const BaseModel = require("./BaseModel.js");
const knex = require("../data/connection.js");

class ValoresNutricionais extends BaseModel {
  constructor() {
    super("valores_nutricionais"); // Define the table name
  }

  // Find by insumo_id
  async findById(insumos_id, columns = ["*"]) {
    try {
      const result = await knex(this.tableName)
        .select(columns)
        .where({ insumos_id }) // Use insumos_id instead of id
        .first();
      if (!result) {
        return {
          status: false,
          message: `Valores nutricionais not found for insumo_id: ${insumos_id}`,
        };
      }
      return { status: true, values: result };
    } catch (error) {
      console.error("Error during findById:", error.message);
      return { status: false, err: error.message };
    }
  }

  // Update by insumo_id
  async update(insumos_id, data, user_id) {
    const trx = await knex.transaction();
    try {
      await this.setUserSession(trx, user_id); // Set session for user actions

      const result = await trx(this.tableName)
        .where({ insumos_id })
        .update(data);
      await trx.commit();

      if (result === 0) {
        return {
          status: false,
          message: `Valores nutricionais not found for insumo_id: ${insumos_id}`,
        };
      }
      return {
        status: true,
        message: `Valores nutricionais updated successfully for insumo_id: ${insumos_id}`,
      };
    } catch (error) {
      await trx.rollback();
      console.error("Error during update:", error.message);
      return { status: false, err: error.message };
    }
  }

  // Delete by insumo_id
  async delete(insumos_id, user_id) {
    const trx = await knex.transaction();
    try {
      await this.setUserSession(trx, user_id); // Set session for user actions

      const result = await trx(this.tableName).where({ insumos_id }).del();
      await trx.commit();

      if (result === 0) {
        return {
          status: false,
          message: `Valores nutricionais not found for insumo_id: ${insumos_id}`,
        };
      }
      return {
        status: true,
        message: `Valores nutricionais deleted successfully for insumo_id: ${insumos_id}`,
      };
    } catch (error) {
      await trx.rollback();
      console.error("Error during delete:", error.message);
      return { status: false, err: error.message };
    }
  }
}

module.exports = new ValoresNutricionais();


Nome do arquivo: backend\src\models\UnidadeMedida.js
Conteúdo:
const BaseModel = require("./BaseModel.js");

class UnidadeMedida extends BaseModel {
  constructor() {
    super("unidades_medida"); // Define the table name
  }

  // Additional methods for UnidadeMedida can be added here if needed.
}

module.exports = new UnidadeMedida();


Nome do arquivo: frontend\.editorconfig
Conteúdo:
# Editor configuration, see https://editorconfig.org
root = true

[*]
charset = utf-8
indent_style = space
indent_size = 2
insert_final_newline = true
trim_trailing_whitespace = true

[*.ts]
quote_type = single

[*.md]
max_line_length = off
trim_trailing_whitespace = false


Nome do arquivo: frontend\.gitignore
Conteúdo:
# See https://docs.github.com/get-started/getting-started-with-git/ignoring-files for more about ignoring files.

# Compiled output
/dist
/tmp
/out-tsc
/bazel-out

# Node
/node_modules
npm-debug.log
yarn-error.log

# IDEs and editors
.idea/
.project
.classpath
.c9/
*.launch
.settings/
*.sublime-workspace

# Visual Studio Code
.vscode/*
!.vscode/settings.json
!.vscode/tasks.json
!.vscode/launch.json
!.vscode/extensions.json
.history/*

# Miscellaneous
/.angular/cache
.sass-cache/
/connect.lock
/coverage
/libpeerconnection.log
testem.log
/typings

# System files
.DS_Store
Thumbs.db


Nome do arquivo: frontend\angular.json
Conteúdo:
{
  "$schema": "./node_modules/@angular/cli/lib/config/schema.json",
  "version": 1,
  "newProjectRoot": "projects",
  "projects": {
    "frontend": {
      "projectType": "application",
      "schematics": {
        "@schematics/angular:component": {
          "standalone": false
        },
        "@schematics/angular:directive": {
          "standalone": false
        },
        "@schematics/angular:pipe": {
          "standalone": false
        }
      },
      "root": "",
      "sourceRoot": "src",
      "prefix": "app",
      "architect": {
        "build": {
          "builder": "@angular-devkit/build-angular:application",
          "options": {
            "outputPath": "dist/frontend",
            "index": "src/index.html",
            "browser": "src/main.ts",
            "polyfills": [
              "zone.js"
            ],
            "tsConfig": "tsconfig.app.json",
            "assets": [
              "src/favicon.ico",
              "src/assets"
            ],
            "styles": [
              "src/styles.css",
              "node_modules/bootstrap/dist/css/bootstrap.min.css",
              "node_modules/bootstrap-icons/font/bootstrap-icons.css"

            ], 
            "stylePreprocessorOptions": {
              "includePaths": ["src"]
            },
            "scripts": [
              "node_modules/bootstrap/dist/js/bootstrap.bundle.min.js"
            ]
          },
          "configurations": {
            "production": {
              "budgets": [
                {
                  "type": "initial",
                  "maximumWarning": "500kb",
                  "maximumError": "1mb"
                },
                {
                  "type": "anyComponentStyle",
                  "maximumWarning": "2kb",
                  "maximumError": "4kb"
                }
              ],
              "outputHashing": "all"
            },
            "development": {
              "optimization": false,
              "extractLicenses": false,
              "sourceMap": true
            }
          },
          "defaultConfiguration": "production"
        },
        "serve": {
          "builder": "@angular-devkit/build-angular:dev-server",
          
          "configurations": {
            "production": {
              "buildTarget": "frontend:build:production"
            },
            "development": {
              "buildTarget": "frontend:build:development"
            }
          },
          "defaultConfiguration": "development"
          
        },
        "extract-i18n": {
          "builder": "@angular-devkit/build-angular:extract-i18n",
          "options": {
            "buildTarget": "frontend:build"
          }
        },
        "test": {
          "builder": "@angular-devkit/build-angular:karma",
          "options": {
            "polyfills": [
              "zone.js",
              "zone.js/testing"
            ],
            "tsConfig": "tsconfig.spec.json",
            "assets": [
              "src/favicon.ico",
              "src/assets"
            ],
            "styles": [
              "src/styles.css"
            ],
            "scripts": []
          }
        }
      }
    }
  },
  "cli": {
    "analytics": false
  }
}


Nome do arquivo: frontend\postcss.config.js
Conteúdo:
module.exports = {
    plugins: {
      tailwindcss: {},
      autoprefixer: {},
    }
  }

Nome do arquivo: frontend\README.md
Conteúdo:
# Frontend

This project was generated with [Angular CLI](https://github.com/angular/angular-cli) version 17.3.11.

## Development server

Run `ng serve` for a dev server. Navigate to `http://localhost:4200/`. The application will automatically reload if you change any of the source files.

## Code scaffolding

Run `ng generate component component-name` to generate a new component. You can also use `ng generate directive|pipe|service|class|guard|interface|enum|module`.

## Build

Run `ng build` to build the project. The build artifacts will be stored in the `dist/` directory.

## Running unit tests

Run `ng test` to execute the unit tests via [Karma](https://karma-runner.github.io).

## Running end-to-end tests

Run `ng e2e` to execute the end-to-end tests via a platform of your choice. To use this command, you need to first add a package that implements end-to-end testing capabilities.

## Further help

To get more help on the Angular CLI use `ng help` or go check out the [Angular CLI Overview and Command Reference](https://angular.io/cli) page.


Nome do arquivo: frontend\package.json
Conteúdo:
{
  "name": "frontend",
  "version": "0.0.0",
  "scripts": {
    "ng": "ng",
    "start": "ng serve --host 0.0.0.0 --port 4200",
    "build": "ng build",
    "watch": "ng build --watch --configuration development",
    "test": "ng test"
  },
  "private": true,
  "dependencies": {
    "@angular/animations": "^17.3.0",
    "@angular/common": "^17.3.0",
    "@angular/compiler": "^17.3.0",
    "@angular/core": "^17.3.0",
    "@angular/forms": "^17.3.0",
    "@angular/platform-browser": "^17.3.0",
    "@angular/platform-browser-dynamic": "^17.3.0",
    "@angular/router": "^17.3.0",
    "bootstrap": "^5.3.3",
    "bootstrap-icons": "^1.11.3",
    "icons": "^1.0.0",
    "jquery": "^3.7.1",
    "ngx-filter-pipe": "^3.0.1",
    "rxjs": "~7.8.0",
    "tslib": "^2.3.0",
    "zone.js": "~0.14.3"
  },
  "devDependencies": {
    "@angular-devkit/build-angular": "^17.3.11",
    "@angular/cli": "^17.3.11",
    "@angular/compiler-cli": "^17.3.0",
    "@types/jasmine": "~5.1.0",
    "autoprefixer": "^10.4.20",
    "jasmine-core": "~5.1.0",
    "karma": "~6.4.0",
    "karma-chrome-launcher": "~3.2.0",
    "karma-coverage": "~2.2.0",
    "karma-jasmine": "~5.1.0",
    "karma-jasmine-html-reporter": "~2.1.0",
    "postcss": "^8.4.49",
    "tailwindcss": "^3.4.14",
    "typescript": "~5.4.2"
  }
}


Nome do arquivo: frontend\tailwind.config.js
Conteúdo:
// tailwind.config.js
module.exports = {
  content: ["./src/**/*.{html,ts}"], // ajuste conforme necessário
  theme: {
    extend: {
      backgroundImage: {
        'custom-gradient': ' linear-gradient(45deg,  rgb(162, 208, 252)  50%, rgb(234, 238, 250) 90% )'
      },
    },
  },
  plugins: [],
}


Nome do arquivo: frontend\tsconfig.json
Conteúdo:
/* To learn more about this file see: https://angular.io/config/tsconfig. */
{
  "compileOnSave": false,
  "compilerOptions": {
    "outDir": "./dist/out-tsc",
    "strict": true,
    "noImplicitOverride": true,
    "noPropertyAccessFromIndexSignature": true,
    "noImplicitReturns": true,
    "noFallthroughCasesInSwitch": true,
    "skipLibCheck": true,
    "esModuleInterop": true,
    "sourceMap": true,
    "declaration": false,
    "experimentalDecorators": true,
    "moduleResolution": "node",
    "importHelpers": true,
    "target": "ES2022",
    "module": "ES2022",
    "useDefineForClassFields": false,
    "lib": [
      "ES2022",
      "dom"
    ]
  },
  "angularCompilerOptions": {
    "enableI18nLegacyMessageIdFormat": false,
    "strictInjectionParameters": true,
    "strictInputAccessModifiers": true,
    "strictTemplates": true
  }
}


Nome do arquivo: frontend\tsconfig.spec.json
Conteúdo:
/* To learn more about this file see: https://angular.io/config/tsconfig. */
{
  "extends": "./tsconfig.json",
  "compilerOptions": {
    "outDir": "./out-tsc/spec",
    "types": [
      "jasmine"
    ]
  },
  "include": [
    "src/**/*.spec.ts",
    "src/**/*.d.ts"
  ]
}


Nome do arquivo: frontend\tsconfig.app.json
Conteúdo:
/* To learn more about this file see: https://angular.io/config/tsconfig. */
{
  "extends": "./tsconfig.json",
  "compilerOptions": {
    "outDir": "./out-tsc/app",
    "types": []
  },
  "files": [
    "src/main.ts"
  ],
  "include": [
    "src/**/*.d.ts"
  ]
}


Nome do arquivo: frontend\src\cors.interceptor.ts
Conteúdo:
// cors.interceptor.ts
import { Injectable } from '@angular/core';
import { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';
import { Observable } from 'rxjs';

@Injectable()
export class CorsInterceptor implements HttpInterceptor {
    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {
        const modifiedReq = req.clone({
            headers: req.headers.set('Access-Control-Allow-Origin', '*')
                .set('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS')
                .set('Access-Control-Allow-Headers', 'Content-Type, Authorization'),
        });
        return next.handle(modifiedReq);
    }
}


Nome do arquivo: frontend\src\index.html
Conteúdo:
<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>APAE</title>
  <base href="/">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="icon" type="image/x-icon" href="favicon.ico">
</head>
<body>
  <app-root></app-root>
</body>
</html>


Nome do arquivo: frontend\src\main.ts
Conteúdo:
import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';

import { AppModule } from './app/app.module';


platformBrowserDynamic().bootstrapModule(AppModule)
  .catch(err => console.error(err));


Nome do arquivo: frontend\src\styles.css
Conteúdo:
@tailwind base;
@tailwind components;
@tailwind utilities;


Nome do arquivo: frontend\src\environments\enviroments.ts
Conteúdo:
export const environment = {
    production: false,
    apiUrl: 'http://100.26.207.194'
  };
  

Nome do arquivo: frontend\src\assets\.gitkeep
Conteúdo:


Nome do arquivo: frontend\src\app\app.component.html
Conteúdo:
<router-outlet></router-outlet>

Nome do arquivo: frontend\src\app\app.component.css
Conteúdo:


Nome do arquivo: frontend\src\app\app-routing.module.ts
Conteúdo:
import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { LoginComponent } from './pages/login/login.component';
import { RecsenhaComponent } from './pages/recsenha/recsenha.component';
import { RedsenhaComponent } from './pages/redsenha/redsenha.component';
import { HomeComponent } from './pages/home/home.component';
import { AdminComponent } from './pages/admin/admin.component';
import { EstoqueComponent } from './pages/estoque/estoque.component';
import { DoacaoComponent } from './pages/doacao/doacao.component';
import { AdminuserComponent } from './pages/adminuser/adminuser.component';

const routes: Routes = [

  {path:'', component: LoginComponent},
  {path:'redsenha', component: RedsenhaComponent},
  {path:'recsenha', component: RecsenhaComponent},
  {path:'home', component: HomeComponent},
  {path:'admin', component: AdminComponent},
  {path:'adminuser', component: AdminuserComponent},
  {path:'estoque', component: EstoqueComponent},
  {path:'doacao', component: DoacaoComponent},
];

@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})
export class AppRoutingModule { }


Nome do arquivo: frontend\src\app\app.component.spec.ts
Conteúdo:
import { TestBed } from '@angular/core/testing';
import { RouterTestingModule } from '@angular/router/testing';
import { AppComponent } from './app.component';

describe('AppComponent', () => {
  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [
        RouterTestingModule
      ],
      declarations: [
        AppComponent
      ],
    }).compileComponents();
  });

  it('should create the app', () => {
    const fixture = TestBed.createComponent(AppComponent);
    const app = fixture.componentInstance;
    expect(app).toBeTruthy();
  });

  it(`should have as title 'frontend'`, () => {
    const fixture = TestBed.createComponent(AppComponent);
    const app = fixture.componentInstance;
    expect(app.title).toEqual('frontend');
  });

  it('should render title', () => {
    const fixture = TestBed.createComponent(AppComponent);
    fixture.detectChanges();
    const compiled = fixture.nativeElement as HTMLElement;
    expect(compiled.querySelector('h1')?.textContent).toContain('Hello, frontend');
  });
});


Nome do arquivo: frontend\src\app\app.component.ts
Conteúdo:
import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrl: './app.component.css'
})
export class AppComponent {
  title = 'frontend';
}


Nome do arquivo: frontend\src\app\app.module.ts
Conteúdo:
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';

import { AppRoutingModule } from './app-routing.module';
import { AppComponent } from './app.component';
import { LoginComponent } from './pages/login/login.component';
import { RecsenhaComponent } from './pages/recsenha/recsenha.component';
import { RedsenhaComponent } from './pages/redsenha/redsenha.component';
import { HomeComponent } from './pages/home/home.component';
import { AdminComponent } from './pages/admin/admin.component';
import { EstoqueComponent } from './pages/estoque/estoque.component';
import { DoacaoComponent } from './pages/doacao/doacao.component';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';
import { AdminuserComponent } from './pages/adminuser/adminuser.component';
import { HttpClientModule } from '@angular/common/http'; // Adicionado para HttpClient
import { FilterPipeModule } from 'ngx-filter-pipe';


import { HTTP_INTERCEPTORS } from '@angular/common/http';
import { CorsInterceptor } from '../cors.interceptor';

@NgModule({
  declarations: [
    AppComponent,
    LoginComponent,
    RecsenhaComponent,
    RedsenhaComponent,
    HomeComponent,
    AdminComponent,
    EstoqueComponent,
    DoacaoComponent,
    AdminuserComponent
  ],
  imports: [
    BrowserModule,
    AppRoutingModule,
    ReactiveFormsModule,
    HttpClientModule, 
    CommonModule, 
    FormsModule, 
    ReactiveFormsModule,
    FilterPipeModule
  ],
  providers: [{ provide: HTTP_INTERCEPTORS, useClass: CorsInterceptor, multi: true },],
  bootstrap: [AppComponent]
})

export class AppModule { }


Nome do arquivo: frontend\src\app\pages\admin\admin.component.css
Conteúdo:
@import url('https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700&family=Ubuntu:ital,wght@0,300;0,400;0,500;0,700;1,300;1,400;1,500;1,700&display=swap');

body {
    font-family: "Ubuntu", sans-serif;
    background-color: #2A455A;
    height: 100vh; 
}

label{
    font-weight: 700;
    color: #2A455A;
}

#white {
    background-color: #F8F8F8;
    width: 1080px;
    height: 622px;
    left: 50%;
    top: 50%;
    position: absolute;
    transform: translate(-39%, -50%);
    display: flex;
    justify-items: center;
    align-items: center;
    row-gap: 10px;
    flex-direction: column;
    text-align: center;
    color: #2f4858;
}


.divider {
    border-left: 2px solid #ddd;
    height: 100%;
}


.container-form{
    width: 80%;
    margin-left: 85px;
    color: #000000;
    text-align: start;
}

#change {
    width: 22px; 
    height: 27px;
    cursor: pointer; 
    transition: transform 0.3s ease; 
    margin-left: 3px;
    margin-bottom: 3px;
}

#change:hover {
    transform: scale(1.1); 
    opacity: 0.8; 
}

.row{
    margin-top: 6vh;
}


#save{
    background-color: #2c3e50;
    color: white;
    border: none;
    width: 20%;
    font-weight: bold;
    border-radius: 5px;
    margin-top: 1.3rem;
    margin-left: 19.2rem;
}

.form-label{
    margin-bottom: 0.15rem;
}

#principal_logo {
    width: 185px;
    height: 265px;
}

#name_profile {
    font-size: 65px;
}

#logo-aside{
    width: 95px;
    height: 133px;
    transform: translate(76%, 0%);
    cursor: pointer;
}


.sidenav {
    height: 100%;
    width: 220px;
    position: fixed;
    z-index: 1;
    top: 0;
    left: 0;
    background-color: #2A455A;
    overflow-x: hidden;
    padding-top: 20px;
}
  
.sidenav button {
    justify-items: center;
    margin-top: 60px;
    height: 50px;
    width: 190px;
    margin-left: 25px;
    font-size: 20px;
    background-color: #2A455A;
    border-color: #2A455A;
    border-radius: 10px;
    color: white;
    padding: 0;
}

.sidenav button:hover {
    background-color: #d4d4d444;
    transition: all 0.3s ease-in-out;
}

.line {
    border-top: 1px solid #ffffff; 
    margin: 65px auto;
    margin-left: 10px;
}

#name {

    padding-left: 60px;
    padding-top: 20px;
    font-size: 14px;
    color: white;
    margin: 0;
}

#job {
    font-size: 12px;
    margin-left: 72px;
    color: white;
}

#out {
    margin-left: 180px;
    height: 27px;
    width: 30px;
    margin-bottom: 32px;
    transform: translate(-12%, -180%);
    cursor: pointer;

}

#profile {
    height: 43px;
    width: 43px;
    transform: translate(5%, -265%);
}

.main {
    margin-left: 160px;
    font-size: 28px;
    padding: 0px 10px;
}

.modal-body h5 {
    font-size: 1.5rem;
    font-weight: bold;
    color: black;
    margin-top: 20px;
    margin-bottom: 20px;

}

.modal-footer .btn-success {
    background-color: #28a745;
    border-color: #28a745;
    
    font-size: 1rem;
    font-weight: bold;
    padding: 10px 20px;
}

.modal-footer .btn-danger {
    background-color: #dc3545;
    border-color: #dc3545;
    font-size: 1rem;
    font-weight: bold;
    padding: 10px 20px;
}

.modal-footer .btn-success:hover {
    background-color: #218838;
    border-color: #1e7e34;
}

.modal-footer .btn-danger:hover {
    background-color: #c82333;
    border-color: #bd2130;
}




Nome do arquivo: frontend\src\app\pages\admin\admin.component.html
Conteúdo:
<body>
    <aside>
        <div class="sidenav">
            <img routerLink="/home" src="assets/logo-apae.png" alt="logo-apae" id="logo-aside">
            <button  routerLink="/admin"   type="button" class="btn btn-dark" data-bs-toggle="button">ADMINISTRAÇÃO</button>
            <button  routerLink="/estoque" type="button" class="btn btn-dark" data-bs-toggle="button">ESTOQUE</button>
            <button  routerLink="/doacao"  type="button" class="btn btn-dark" data-bs-toggle="button">DOAÇÃO</button>
            <div class="line">
                <p id="name"><strong>Leticia Campos</strong></p>
                <p id="job">Nutricionista</p>
                <img (click)="abrirModal()" src="assets/sair.png" alt="" id="out">
                <img src="assets/Foto.png" alt="p" id="profile">
            </div>
        </div>
    </aside>

    <main>
        <div id="white">
            <div class="form-title" style=" color: #2A455A; margin-bottom: 1.3rem; font-size: 2.1rem; font-weight: bold; margin-right: 10px; margin-top: 25px;">CADASTRO DE DOADOR
            <img  routerLink="/adminuser" src="assets/exchange.png" alt="" id="change">
            </div>
          
<div class="container-form">
    <form [formGroup]="formulario" method="POST" class="formLogin" style="margin-bottom: 12rem;">
        <div class="row mb-3">
            <div class="col-md-5">
                <div class="mb-2">
                    <label for="nomeDoador" class="form-label">Nome Doador / Empresa</label>
                    <input formControlName="nome" type="text" class="form-control" id="nomeDoador" placeholder="Digite seu nome">
                </div>
                <div class="mb-3 form-check form-check-inline">
                    <input class="form-check-input" type="radio" name="tipoPessoa" id="pessoaFisica" value="fisica">
                    <label class="form-check-label" for="pessoaFisica">Pessoa Física</label>
                </div>
                <div class="mb-3 form-check form-check-inline">
                    <input class="form-check-input" type="radio" name="tipoPessoa" id="pessoaJuridica" value="juridica">
                    <label class="form-check-label" for="pessoaJuridica">Pessoa Jurídica</label>
                </div>
                <div class="mb-3">
                    <label for="cpfCnpj" class="form-label">CPF / CNPJ</label>
                    <input formControlName="cpf" type="text" class="form-control" id="cpfCnpj" placeholder="Digite seu CPF ou CNPJ">
                </div>
                <div class="mb-3">
                    <label for="dataNascimento" class="form-label">Data de Nascimento</label>
                    <input formControlName="data" type="date" class="form-control" id="dataNascimento">
                </div>
                <div class="mb-3">
                    <label for="telefone" class="form-label">Telefone</label>
                    <input  formControlName="telefone" type="tel" class="form-control" id="telefone" placeholder="Digite seu telefone">
                </div>
            </div>

        
            <div class="col-md-1 d-flex align-items-center justify-content-center">
                <div class="divider"></div>
            </div>

            <div class="col-md-5" style="padding-top: 25px;">
                <div class="mb-3">
                    <label for="endereco" class="form-label">Endereço</label>
                    <input formControlName="end" type="text" class="form-control" id="endereco" placeholder="Digite seu endereço">
                </div>
                <div class="mb-3">
                    <label for="cidadeEstado" class="form-label">Cidade / Estado</label>
                    <input formControlName="cidade" type="text" class="form-control" id="cidadeEstado" placeholder="Digite sua cidade e estado">
                </div>
                <div class="mb-3">
                    <label for="email" class="form-label">Email</label>
                    <input formControlName="email" type="email" class="form-control" id="email" placeholder="Digite seu email">
                </div>
                <div class="mb-3">
                    <label for="lorem" class="form-label">Lorem</label>
                    <input type="text" class="form-control" id="lorem" placeholder="Digite algo">
                </div>
            </div>
        </div>
        <button type="submit" class="btn" id="save" (click)="confirmarCadDonation()" [disabled]="formulario.invalid">SALVAR</button>
    </form>


    <div *ngIf="isConfirmDonationModal" class="modal show d-block"  tabindex="-1" role="dialog" style="background: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-dialog-centered modal-sm">
          <div class="modal-content text-center">
            <div class="modal-body">
              <h5 class="modal-title mb-3">Cadastrado salvo com sucesso!</h5>
              <img src="assets/circle-check.png" alt="Ícone de confirmação" style="width: 60px; margin-top: 10px;">
            </div>
          </div>
        </div>
      </div>

        <div *ngIf="isModalOpen" class="modal show d-block" tabindex="-1" role="dialog" style="background: rgba(0,0,0,0.5);">
          <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
              <div class="modal-body text-center">
                <h5>Atenção, você está saindo da sua conta, deseja realmente continuar?</h5>
              </div>
              <div class="modal-footer d-flex justify-content-center">
                <button routerLink="/" type="button" class="btn btn-success"  style="margin-right: 35px;">Sim, desejo sair</button>
                <button type="button" class="btn btn-danger" (click)="fecharModal()">Não, desejo ficar</button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
   </main>
</body>

Nome do arquivo: frontend\src\app\pages\admin\admin.component.ts
Conteúdo:
import { Component } from '@angular/core';
import { FormGroup, Validators } from '@angular/forms';
import { FormControl } from '@angular/forms';

@Component({
  selector: 'app-admin',
  templateUrl: './admin.component.html',
  styleUrl: './admin.component.css'
})

export class AdminComponent {

  isModalOpen = false;
  isConfirmDonationModal = false;

  

  abrirModal() {
    this.isModalOpen = true;
  }

  fecharModal() {
    this.isModalOpen = false;
  }


 ngOnInit(): void {
  if (localStorage.getItem('cadastroSucesso') === 'true') {
    this.isConfirmDonationModal = true;
    localStorage.removeItem('cadastroSucesso');


  setTimeout(() => {
    this.isConfirmDonationModal = false;
   },2000)
  }
}


confirmarCadDonation(): void {
  localStorage.setItem('cadastroSucesso', 'true');
  location.reload();
  }


  formulario = new FormGroup({
    nome: new FormControl ('', [Validators.required]),
    cpf: new FormControl ('', [Validators.required]),
    data: new FormControl ('', [Validators.required]),
    telefone: new FormControl ('', [Validators.required]),
    end: new FormControl ('', [Validators.required]),
    cidade: new FormControl ('', [Validators.required]),
    email: new FormControl ('', [Validators.required, Validators.email]),
  })
}


Nome do arquivo: frontend\src\app\pages\admin\admin.component.spec.ts
Conteúdo:
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { AdminComponent } from './admin.component';

describe('AdminComponent', () => {
  let component: AdminComponent;
  let fixture: ComponentFixture<AdminComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [AdminComponent]
    })
    .compileComponents();
    
    fixture = TestBed.createComponent(AdminComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


Nome do arquivo: frontend\src\app\pages\doacao\doacao.component.css
Conteúdo:
@import url('https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&family=Ubuntu:ital,wght@0,300;0,400;0,500;0,700;1,300;1,400;1,500;1,700&display=swap');   

body {
    font-family: "Ubuntu", sans-serif;
    background-color: #2A455A;
    height: 100vh; 
}

#white {
    background-color: #F8F8F8;
    width: 1080px;
    height: 623px;
    left: 50%;
    top: 50%;
    position: absolute;
    transform: translate(-39%, -50%);
    

}

h2{
    display: flex;
    align-items: center;
    justify-content: center;
    padding-top: 1.7rem;
}

label{
    font-weight: 700;
    color: #2c3e50;
}

.form-container {
    padding: 13%;
    margin-top: -2rem;

}


.form-title {
    font-size: 1rem;
    font-weight: bold;
    color: #2c3e50;
    
}

.form-control {
    height: 2.3rem;
    border-color: #ced4da;
}

.form-control:focus {
    border-color: #007bff;
    box-shadow: none;
}


.textarea-custom {
    height: 10rem;
    resize: none;
}

.btn-custom {
    background-color: #2c3e50;
    color: white;
    border: none;
    width: 22.2%;
    font-weight: bold;
    border-radius: 5px;
    margin-top: 2.5rem;
    margin-left: 19.2rem;
}

#logo-aside{
    width: 95px;
    height: 133px;
    transform: translate(76%, 0%);
    cursor: pointer;
}

.sidenav {
    height: 100%;
    width: 220px;
    position: fixed;
    z-index: 1;
    top: 0;
    left: 0;
    background-color: #2A455A;
    overflow-x: hidden;
    padding-top: 20px;
}
  
.sidenav button {
    justify-items: center;
    margin-top: 60px;
    height: 50px;
    width: 190px;
    margin-left: 25px;
    font-size: 20px;
    background-color: #2A455A;
    border-color: #2A455A;
    border-radius: 10px;
    color: white;
    padding: 0;
}

.sidenav button:hover {
    background-color: #d4d4d444;
    transition: all 0.3s ease-in-out;
}

.line {
    border-top: 1px solid #ffffff; 
    margin: 65px auto;
    margin-left: 10px;
}

#name {

    padding-left: 60px;
    padding-top: 20px;
    font-size: 14px;
    color: white;
    margin: 0;
}

#job {
    font-size: 12px;
    margin-left: 72px;
    color: white;
}

#out {
    margin-left: 180px;
    height: 27px;
    width: 30px;
    margin-bottom: 32px;
    transform: translate(-12%, -180%);
    cursor: pointer;

}

#profile {
    height: 43px;
    width: 43px;
    transform: translate(5%, -265%);
}

.main {
    margin-left: 160px;
    font-size: 28px;
    padding: 0px 10px;
}

.modal-body h5 {
    font-size: 1.5rem;
    font-weight: bold;
    color: black;
    margin-bottom: 20px;
}

.modal-footer .btn-success {
    background-color: #28a745;
    border-color: #28a745;
    font-size: 1rem;
    font-weight: bold;
    padding: 10px 20px;
}

.modal-footer .btn-danger {
    background-color: #dc3545;
    border-color: #dc3545;
    font-size: 1rem;
    font-weight: bold;
    padding: 10px 20px;
}

.modal-footer .btn-success:hover {
    background-color: #218838;
    border-color: #1e7e34;
}

.modal-footer .btn-danger:hover {
    background-color: #c82333;
    border-color: #bd2130;
}

Nome do arquivo: frontend\src\app\pages\doacao\doacao.component.spec.ts
Conteúdo:
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { DoacaoComponent } from './doacao.component';

describe('DoacaoComponent', () => {
  let component: DoacaoComponent;
  let fixture: ComponentFixture<DoacaoComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [DoacaoComponent]
    })
    .compileComponents();
    
    fixture = TestBed.createComponent(DoacaoComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


Nome do arquivo: frontend\src\app\pages\doacao\doacao.component.ts
Conteúdo:
// doacao.component.ts
import { Component, OnInit } from '@angular/core';
import { FormGroup, Validators, FormControl } from '@angular/forms';
import { DoaService } from './doacao.service'; // Atualize o caminho conforme necessário

@Component({
  selector: 'app-doacao',
  templateUrl: './doacao.component.html',
  styleUrls: ['./doacao.component.css']
})
export class DoacaoComponent implements OnInit {

  isModalOpen = false;
  isConfirmDonModal = false;
  errorMessage = '';
  successMessage = '';

  // Formulário de doação
  formulario = new FormGroup({
    id: new FormControl('', [Validators.required]),
    data: new FormControl('', [Validators.required]),
    desc: new FormControl('', [Validators.required]),
  });

  constructor(private doaService: DoaService) {}

  ngOnInit(): void {
    if (localStorage.getItem('cadastroSucesso') === 'true') {
      this.isConfirmDonModal = true;
      localStorage.removeItem('cadastroSucesso');

      setTimeout(() => {
        this.isConfirmDonModal = false;
      }, 2000);
    }
  }

  abrirModal() {
    this.isModalOpen = true;
  }

  fecharModal() {
    this.isModalOpen = false;
  }

  confirmarDon(): void {
    if (this.formulario.invalid) {
      this.errorMessage = 'Por favor, preencha todos os campos obrigatórios.';
      return;
    }

    // Limpa mensagens anteriores
    this.errorMessage = '';
    this.successMessage = '';

    const { id, data, desc } = this.formulario.value;

    this.doaService.postDocao(id!, desc!, data!).subscribe({
      next: () => {
        this.successMessage = 'Doação salva com sucesso!';
        this.formulario.reset();
        this.isConfirmDonModal = true;
        localStorage.setItem('cadastroSucesso', 'true');

        setTimeout(() => {
          this.isConfirmDonModal = false;
        }, 2000);
      },
      error: (error: { message: string; }) => {
        this.errorMessage = error?.message || 'Erro ao salvar a doação.';
      }
    });
  }
}


Nome do arquivo: frontend\src\app\pages\doacao\doacao.component.html
Conteúdo:
<body>
    <aside>
      <div class="sidenav">
        <img routerLink="/home" src="assets/logo-apae.png" alt="logo-apae" id="logo-aside" />
        <button routerLink="/admin" type="button" class="btn btn-dark" data-bs-toggle="button"> ADMINISTRAÇÃO</button>
        <button routerLink="/estoque" type="button" class="btn btn-dark" data-bs-toggle="button">ESTOQUE</button>
        <button routerLink="doacao" type="button" class="btn btn-dark" data-bs-toggle="button"> DOAÇÃO</button>
        <div class="line">
          <p id="name"><strong>Leticia Campos</strong></p>
          <p id="job">Nutricionista</p>
          <img (click)="abrirModal()  "src="assets/sair.png" alt="" id="out" />
          <img src="assets/Foto.png" alt="p" id="profile" />
        </div>
      </div>
    </aside>
  
  
    <main>
      <div id="white">
        <h2 class="form-title" style=" color: #2A455A; font-size: 2.1rem; text-align: center;">DOAÇÃO</h2>
        <div class="form-container">
          <form [formGroup]="formulario" method="POST" class="formLogin">
            <div class="d-flex justify-content-between mb-3">
              <div class="imput group">
                <label for="donorId" class="form-label mb-0">ID do Doador</label>
                <input formControlName="id" type="text" class="form-control " id="donorId" placeholder="Digite o ID"/>
              </div>
              <div class="imput group mb-3">
                <label for="donationDate" class="form-label mb-0">Data da Doação</label >
                <input formControlName="data" type="date" class="form-control" id="donationDate" />
              </div>
            </div>
            <div class="imput group">
              <label for="description" class="form-label mb-1" >Descrição</label>
              <textarea formControlName="desc" class="form-control textarea-custom" id="description"  placeholder="Escreva uma descrição..."></textarea>
            </div>
            <button type="submit" class="btn btn-custom" id="button" (click)="confirmarDon()" [disabled]="formulario.invalid">SALVAR</button>
          </form>

          <div *ngIf="isConfirmDonModal" class="modal show d-block"  tabindex="-1" role="dialog" style="background: rgba(0,0,0,0.5);">
            <div class="modal-dialog modal-dialog-centered modal-sm">
              <div class="modal-content text-center">
                <div class="modal-body">
                  <h5 class="modal-title mb-3">Doação salva com sucesso!</h5>
                  <img src="assets/circle-check.png" alt="Ícone de confirmação" style="width: 60px; margin-top: 10px;">
                </div>
              </div>
            </div>
          </div>

          
       
  
      <div *ngIf="isModalOpen" class="modal show d-block" tabindex="-1" role="dialog" style="background: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-dialog-centered" role="document">
          <div class="modal-content">
            <div class="modal-body text-center" style="margin-top: 20px;">
              <h5>Atenção, você está saindo da sua conta, deseja realmente continuar?</h5>
            </div>

            <div class="modal-footer d-flex justify-content-center" id="btn">
              <button  routerLink="/" type="button" class="btn btn-success" style="margin-right: 35px;">Sim, desejo sair</button>
              <button type="button" class="btn btn-danger" (click)="fecharModal()">Não, desejo ficar</button>
            </div>
          </div>
        </div>
      </div>
    </div>
    </div>
    </main>
  </body>

Nome do arquivo: frontend\src\app\pages\doacao\doacao.service.ts
Conteúdo:
// auth.service.ts
import { Injectable, OnInit } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Observable, throwError } from 'rxjs';
import { catchError } from 'rxjs/operators';
import { environment } from '../../../environments/enviroments'

@Injectable({
  providedIn: 'root'
})

export class DoaService {

  private endPoint = `${environment.apiUrl}/api/doacoes/create`;

  constructor(private http: HttpClient) {}

  postDocao(pessoas_id: string, descricao: string, data_doacao: string): Observable<any> {
    const token = localStorage.getItem('authToken')
    const headers = new HttpHeaders({
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${token}`
    });

    const body =  { pessoas_id:pessoas_id, 
      descricao:descricao, 
      data_doacao:data_doacao}

    return this.http.post(this.endPoint, body, { headers }).pipe( 
      catchError((error) => {
        console.error('Login error:', error);
        return throwError(() => new Error(error.error?.message || 'Server Error'));
      })
    );

}
}

Nome do arquivo: frontend\src\app\pages\adminuser\adminuser.component.css
Conteúdo:
@import url('https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700&family=Ubuntu:ital,wght@0,300;0,400;0,500;0,700;1,300;1,400;1,500;1,700&display=swap');

body {
    font-family: "Ubuntu", sans-serif;
    background-color: #2A455A;
    height: 100vh; 
}

label{
    font-weight: 700;
    color: #2A455A;
}

#white {
    background-color: #F8F8F8;
    width: 1080px;
    height: 622px;
    left: 50%;
    top: 50%;
    position: absolute;
    transform: translate(-39%, -50%);
    display: flex;
    justify-items: center;
    align-items: center;
    row-gap: 10px;
    flex-direction: column;
    text-align: center;
    color: #2f4858;
}


.divider {
    border-left: 2px solid #ddd;
    height: 100%;
}


.container-form{
    width: 80%;
    margin-left: 85px;
    color: #000000;
    text-align: start;
}

.row{
    margin-top: 15vh;
}

#change {
    width: 22px; 
    height: 27px;
    cursor: pointer; 
    transition: transform 0.3s ease; 
    margin-left: 3px;
    margin-bottom: 3px;
}

#change:hover {
    transform: scale(1.1); 
    opacity: 0.8; 
}

#save{
    background-color: #2c3e50;
    color: white;
    border: none;
    width: 20%;
    font-weight: bold;
    border-radius: 5px;
    margin-top: 5.2rem;
    margin-left: 19.2rem;
}

.form-label{
    margin-bottom: 0.15rem;
}

#principal_logo {
    width: 185px;
    height: 265px;
}

#name_profile {
    font-size: 65px;
}

#logo-aside{
    width: 95px;
    height: 133px;
    transform: translate(76%, 0%);
    cursor: pointer;
}

.sidenav {
    height: 100%;
    width: 220px;
    position: fixed;
    z-index: 1;
    top: 0;
    left: 0;
    background-color: #2A455A;
    overflow-x: hidden;
    padding-top: 20px;
}
  
.sidenav button {
    justify-items: center;
    margin-top: 60px;
    height: 50px;
    width: 190px;
    margin-left: 25px;
    font-size: 20px;
    background-color: #2A455A;
    border-color: #2A455A;
    border-radius: 10px;
    color: white;
    padding: 0;
}

.sidenav button:hover {
    background-color: #d4d4d444;
    transition: all 0.3s ease-in-out;
}

.line {
    border-top: 1px solid #ffffff; 
    margin: 65px auto;
    margin-left: 10px;
}

#name {
    padding-left: 60px;
    padding-top: 20px;
    font-size: 14px;
    color: white;
    margin: 0;
}

#job {
    font-size: 12px;
    margin-left: 72px;
    color: white;
}

#out {
    margin-left: 180px;
    height: 27px;
    width: 30px;
    margin-bottom: 32px;
    transform: translate(-12%, -180%);
    cursor: pointer;
}

#profile {
    height: 43px;
    width: 43px;
    transform: translate(5%, -265%);
}

.main {
    margin-left: 160px;
    font-size: 28px;
    padding: 0px 10px;
}

.modal-body h5 {
    font-size: 1.5rem;
    font-weight: bold;
    color: black;
    margin-top: 20px;
    margin-bottom: 20px;

}

.modal-footer .btn-success {
    background-color: #28a745;
    border-color: #28a745;
    font-size: 1rem;
    font-weight: bold;
    padding: 10px 20px;
}

.modal-footer .btn-danger {
    background-color: #dc3545;
    border-color: #dc3545;
    font-size: 1rem;
    font-weight: bold;
    padding: 10px 20px;
}

.modal-footer .btn-success:hover {
    background-color: #218838;
    border-color: #1e7e34;
}

.modal-footer .btn-danger:hover {
    background-color: #c82333;
    border-color: #bd2130;
}




Nome do arquivo: frontend\src\app\pages\adminuser\adminuser.component.html
Conteúdo:
<body>
    <aside>
        <div class="sidenav">
            <img routerLink="/home" src="assets/logo-apae.png" alt="logo-apae" id="logo-aside">
            <button  routerLink="/admin"   type="button" class="btn btn-dark" data-bs-toggle="button">ADMINISTRAÇÃO</button>
            <button  routerLink="/estoque" type="button" class="btn btn-dark" data-bs-toggle="button">ESTOQUE</button>
            <button  routerLink="/doacao"  type="button" class="btn btn-dark" data-bs-toggle="button">DOAÇÃO</button>
            <div class="line">
                <p id="name"><strong>Leticia Campos</strong></p>
                <p id="job">Nutricionista</p>
                <img (click)="abrirModal()" src="assets/sair.png" alt="" id="out">
                <img src="assets/Foto.png" alt="p" id="profile">
            </div>
        </div>
    </aside>

    <main>
        <div id="white">
            <div class="form-title" style=" color: #2A455A; margin-bottom: 1.3rem; font-size: 2.1rem; font-weight: bold; margin-right: 10px; margin-top: 25px;">CADASTRO DE USUARIO
            <img  routerLink="/admin" src="assets/exchange.png" alt="" id="change">
            </div>
<div class="container-form">
    <form [formGroup]="formulario" method="POST" class="formLogin">
        <div class="row mb-3">
            <div class="col-md-5">
                <div class="mb-3">
                    <label for="nomeDoador" class="form-label">Nome e Sobrenome</label>
                    <input formControlName="nome" type="text" class="form-control" id="nomeDoador" placeholder="Digite seu nome">
                </div>
                <div class="mb-3">
                    <label for="senha" class="form-label">Senha</label>
                    <input  formControlName="senha" type="password" class="form-control" id="senha" placeholder="Crie sua senha">
                </div>
                <div class="mb-3">
                    <label for="dataNascimento" class="form-label">Data de Nascimento</label>
                    <input formControlName="data" type="date" class="form-control" id="dataNascimento">
                </div>
            </div>

        
            <div class="col-md-1 d-flex align-items-center justify-content-center">
                <div class="divider"></div>
            </div>

        
            <div class="col-md-5" style="padding-top: 2px;">
                <div class="mb-3">
                   <label for="email" class="form-label">Email</label>
                   <input formControlName="email" type="email" class="form-control" id="email" placeholder="Digite seu email">
                </div>
                <div class="mb-3">
                    <label for="telefone" class="form-label">Telefone</label>
                    <input formControlName="telefone" type="tel" class="form-control" id="telefone" placeholder="Digite seu telefone">
                </div>
                <div class="mb-3">
                    <label for="cpfCnpj" class="form-label">CPF</label>
                    <input formControlName="cpf"type="text" class="form-control" id="cpfCnpj" placeholder="Digite seu CPF">
                </div>
            </div>
        </div>
        <button type="submit" class="btn" id="save" (click)="confirmarUserDonation()" [disabled]="formulario.invalid">SALVAR</button>
    </form>


    <div *ngIf="isConfirmUserModal" class="modal show d-block"  tabindex="-1" role="dialog" style="background: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-dialog-centered modal-sm">
          <div class="modal-content text-center">
            <div class="modal-body">
              <h5 class="modal-title mb-3">Cadastrado salvo com sucesso!</h5>
              <img src="assets/circle-check.png" alt="Ícone de confirmação" style="width: 60px; margin-top: 10px;">
            </div>
          </div>
        </div>
      </div>

        <div *ngIf="isModalOpen" class="modal show d-block" tabindex="-1" role="dialog" style="background: rgba(0,0,0,0.5);">
          <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
              <div class="modal-body text-center">
                <h5>Atenção, você está saindo da sua conta, deseja realmente continuar?</h5>
              </div>
              <div class="modal-footer d-flex justify-content-center">
                <button routerLink="/" type="button" class="btn btn-success" style="margin-right: 35px;">Sim, desejo sair</button>
                <button type="button" class="btn btn-danger" (click)="fecharModal()">Não, desejo ficar</button>
              </div>
            </div>
          </div>
        </div>
         </div>
        </div>
    </main>
</body>

Nome do arquivo: frontend\src\app\pages\adminuser\adminuser.component.ts
Conteúdo:
import { Component } from '@angular/core';
import { FormGroup, Validators } from '@angular/forms';
import { FormControl } from '@angular/forms';

@Component({
  selector: 'app-adminuser',
  templateUrl: './adminuser.component.html',
  styleUrl: './adminuser.component.css'
})
export class AdminuserComponent {

  isModalOpen = false;
  isConfirmUserModal = false;

  abrirModal() {
    this.isModalOpen = true;
  }

  fecharModal() {
    this.isModalOpen = false;
  }

  ngOnInit(): void {
    if (localStorage.getItem('cadastroSucesso') === 'true') {
      this.isConfirmUserModal = true;
      localStorage.removeItem('cadastroSucesso');
  
  
    setTimeout(() => {
      this.isConfirmUserModal = false;
     },2000)
    }
  }
  
  
  confirmarUserDonation(): void {
    localStorage.setItem('cadastroSucesso', 'true');
    location.reload();
    }


    formulario = new FormGroup({
      nome: new FormControl ('', [Validators.required]),
      senha: new FormControl ('', [Validators.required, Validators.minLength(4)]),
      data: new FormControl ('', [Validators.required]),
      email: new FormControl ('', [Validators.required, Validators.email]),
      telefone: new FormControl ('', [Validators.required]),
      cpf: new FormControl ('', [Validators.required]),
    })
  }



Nome do arquivo: frontend\src\app\pages\adminuser\adminuser.component.spec.ts
Conteúdo:
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { AdminuserComponent } from './adminuser.component';

describe('AdminuserComponent', () => {
  let component: AdminuserComponent;
  let fixture: ComponentFixture<AdminuserComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [AdminuserComponent]
    })
    .compileComponents();
    
    fixture = TestBed.createComponent(AdminuserComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


Nome do arquivo: frontend\src\app\pages\estoque\estoque.component.css
Conteúdo:
@import url('https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700&family=Ubuntu:ital,wght@0,300;0,400;0,500;0,700;1,300;1,400;1,500;1,700&display=swap');

body {
    font-family: "Ubuntu", sans-serif;
    background-color: #2A455A;
    height: 100vh; 
}

#white {
    background-color: #F8F8F8;
    width: 1080px;
    height: 622px;
    left: 50%;
    top: 50%;
    position: absolute;
    transform: translate(-39%, -50%);
    color: #2f4858;
}

.header-title {
    font-weight: bold;
    font-size: 2.1rem;
    color: #2c3e50;
    text-align: center;
    margin-bottom: 13vh;
}

.input-group{
    margin-left: 65px;
}

#btn-acess{
    margin-right: 13vh;
    margin-right: 35px;
    padding: 8px px;
    font-size: 0.85rem;
    border: none;
    display: inline;
}

#result{
    padding-left: 9vh;
    padding-top: 10px;
}

#filter{
    margin-right: 10vh;    
}
  
.search-bar input {
    border-radius: 8px;
    padding: 10px;
    font-size: 0.9rem;
    width: 100%;
  }

.btn {
    margin-right: 35px;
    padding: 8px px;
    font-size: 0.90rem;
    border: none;
    display: inline;
    justify-content: space-between;
}

#green, #red{
 margin: 0;
}

.item-list {
    margin-top: 5px;
    align-items: center;
}

h3{
    font-weight: 700;
}

label{
    font-weight: 800;
}

.form-label{
    margin-bottom: 0.15rem;
}
  
.item-card {
    display: flex;
    align-items: center;
    padding: 15px;
    margin-bottom: 20px;
    margin-left: 3rem;
    margin-right: 3rem;
    border-radius: 8px;
    background-color: #e9ecef;
    border: 2px solid transparent;
    transition: border-color 0.3s;
    color: #2c3e50;
}
  
.item-card:hover {
    border-color: #007bff;
  }
  
.item-icon {
    font-size: 2rem;
    margin-right: 15px;
}
  
.item-status {
    padding: 3px 10px;
    border-radius: 5px;
    color: white;
    font-weight: bold;
    font-size: 0.85rem;
}
  
.item-status.aberto {
    background-color: #28a745;
}
  
.item-status.fechado {
    background-color: #dc3545;
}
  
#principal_logo {
    width: 185px;
    height: 265px;
}

#name_profile {
    font-size: 65px;
}

#logo-aside {
    width: 95px;
    height: 133px;
    transform: translate(76%, 0%);
    cursor: pointer;
}

.sidenav {
    height: 100%;
    width: 220px;
    position: fixed;
    z-index: 1;
    top: 0;
    left: 0;
    background-color: #2A455A;
    overflow-x: hidden;
    padding-top: 20px;
}
  
.sidenav button {
    justify-items: center;
    margin-top: 60px;
    height: 50px;
    width: 190px;
    margin-left: 25px;
    font-size: 20px;
    background-color: #2A455A;
    border-color: #2A455A;
    border-radius: 10px;
    color: white;
    padding: 0;
}

.sidenav button:hover {
    background-color: #d4d4d444;
    transition: all 0.3s ease-in-out;
}

.line {
    border-top: 1px solid #ffffff; 
    margin: 65px auto;
    margin-left: 10px;
}

#name {
    padding-left: 60px;
    padding-top: 20px;
    font-size: 14px;
    color: white;
    margin: 0;
}

#job {
    font-size: 12px;
    margin-left: 72px;
    color: white;
}

#out {
    margin-left: 180px;
    height: 27px;
    width: 30px;
    margin-bottom: 32px;
    transform: translate(-12%, -180%);
    cursor: pointer;
}

#profile {
    height: 43px;
    width: 43px;
    transform: translate(5%, -265%);
}

.main {
    margin-left: 160px;
    font-size: 28px;
    padding: 0px 10px;
}

.modal-body h5 {
    font-size: 1.5rem;
    font-weight: bold;
    color: black;
    margin-top: 20px;
    margin-bottom: 20px;
}

.modal-footer .btn-success {
    background-color: #28a745;
    border-color: #28a745;
    font-size: 1rem;
    font-weight: bold;
    padding: 10px 20px;
}

.modal-footer .btn-danger {
    background-color: #dc3545;
    border-color: #dc3545;
    font-size: 1rem;
    font-weight: bold;
    padding: 10px 20px;
}

.modal-footer .btn-success:hover {
    background-color: #218838;
    border-color: #1e7e34;
}

.modal-footer .btn-danger:hover {
    background-color: #c82333;
    border-color: #bd2130;
}

#filter{
    padding-right: 15px;
}





Nome do arquivo: frontend\src\app\pages\estoque\estoque.component.spec.ts
Conteúdo:
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { EstoqueComponent } from './estoque.component';

describe('EstoqueComponent', () => {
  let component: EstoqueComponent;
  let fixture: ComponentFixture<EstoqueComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [EstoqueComponent]
    })
    .compileComponents();
    
    fixture = TestBed.createComponent(EstoqueComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


Nome do arquivo: frontend\src\app\pages\estoque\estoque.component.ts
Conteúdo:
import { Component, OnInit } from '@angular/core';
import { EstoqueService } from './estoque.service';
import { ItemEstoque } from './item-estoque';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';


@Component({
  selector: 'app-estoque',
  templateUrl: './estoque.component.html',
  styleUrl: './estoque.component.css'
})

export class EstoqueComponent implements OnInit {
  isModalOpen = false;
  isAddItemModalOpen = false;
  isRemoveItemModalOpen = false;  
  estoqueItems: ItemEstoque[] = [];
  addItemForm!: FormGroup;
  itemParaRemover: ItemEstoque | null = null;
  filtroSelecionado = 'nome'; // Opções: 'nome', 'validade', 'quantidade', 'status'
  pesquisa = '';
  isConfirmAddModal: any;
  isConfirmRemoveModal: any;
  formulario!: FormGroup<any>;

  constructor(private estoqueService: EstoqueService, private fb: FormBuilder) { }

  ngOnInit(): void {
      this.getEstoqueItems();
      this.addItemForm = this.fb.group({
          nome: ['', Validators.required],
          quantidade: ['', Validators.required],
          validade: ['', Validators.required],
          status: ['Aberto', Validators.required] // Valor padrão 'Aberto'
      });
  }

  getEstoqueItems(): void {
    this.estoqueService.getItens().subscribe(
        (itens) => {
            this.estoqueItems = itens;
            console.log(itens)
        },
        (error) => {
            console.error('Erro ao buscar itens do estoque:', error);
            // Trate o erro adequadamente, talvez exibindo uma mensagem na interface
        }
    );
}

confirmarRemoveItem(item: ItemEstoque) {
  this.itemParaRemover = item; // Define o item a ser removido
  this.abrirRemoveItemModal();  // Abre o modal de confirmação
}

  abrirModal() {
    this.isModalOpen = true;
  }

  fecharModal() {
    this.isModalOpen = false;
  }


  abrirAddItemModal() {
    this.isAddItemModalOpen = true;
  }

  fecharAddItemModal() {
    this.isAddItemModalOpen = false;
  }

  abrirRemoveItemModal() {
    this.isRemoveItemModalOpen = true;
  }

  fecharRemoveItemModal() {
    this.isRemoveItemModalOpen = false;
  }

  removerItemDoEstoque() {
    if (this.itemParaRemover) {
      this.estoqueService.deleteItem(this.itemParaRemover.id).subscribe(
        () => {
          console.log('Item removido com sucesso!');
          this.getEstoqueItems(); // Atualiza a lista após a remoção
          this.fecharRemoveItemModal();
          this.itemParaRemover = null; // Limpa a variável
        },
        (error) => {
          console.error('Erro ao remover item:', error);
          // Lide com o erro de forma apropriada
        }
      );
    }
  }

  confirmarAddItem(): void {
    if (this.addItemForm.valid) {
      this.estoqueService.createItem(this.addItemForm.value).subscribe(
        () => {
          this.getEstoqueItems(); // Atualiza a lista após a adição
          this.addItemForm.reset(); // Limpa o formulário
          this.fecharAddItemModal();
        },
        (error) => {
          console.error('Erro ao adicionar item:', error);
          // Lide com o erro de forma apropriada
        }
      );
    }
  
  
  }

  getFilteredItems(): ItemEstoque[] {
    if (!this.pesquisa || !this.filtroSelecionado) {
        return this.estoqueItems;
    }
    const pesquisaLower = this.pesquisa.toLowerCase();
    return this.estoqueItems.filter(item => {
        const fieldValue = (item as any)[this.filtroSelecionado]?.toString().toLowerCase();
        return fieldValue.includes(pesquisaLower);
    });
}



}


Nome do arquivo: frontend\src\app\pages\estoque\estoque.component.html
Conteúdo:
<body>
  <aside>
    <div class="sidenav">
      <img routerLink="/home" src="assets/logo-apae.png" alt="logo-apae" id="logo-aside">
      <button routerLink="/admin"   type="button" class="btn btn-dark" data-bs-toggle="button">ADMINISTRAÇÃO</button>
      <button routerLink="/estoque"  type="button" class="btn btn-dark" data-bs-toggle="button">ESTOQUE</button>
      <button routerLink="/doacao"  type="button" class="btn btn-dark" data-bs-toggle="button">DOAÇÃO</button>
      <div class="line">
        <p id="name"><strong>Leticia Campos</strong></p>
        <p id="job">Nutricionista</p>
        <img (click)="abrirModal()" src="assets/sair.png" alt="" id="out">
        <img src="assets/Foto.png" alt="p" id="profile"/>
      </div>
    </div>
  </aside>

  <main>
    <div id="white">
      <div class="container mt-4">
        <div class="header-title">QUADRO DE ESTOQUE</div>

        <div class="d-flex justify-content-between mb-5">
          <div class="input-group" style="width: 30%;">
            <span class="input-group-text">
              <i class="bi bi-search"></i>
            </span>
            <input type="text" class="form-control" placeholder="Procure pelo item desejado">
          </div>

          <div id="btn-acess">
            <button class="btn btn-primary" style="font-weight: bold;" (click)="abrirAddItemModal()">+ Adicionar Item</button>
            <button class="btn btn-primary" style="font-weight: bold;" (click)="abrirRemoveItemModal()">- Remover Item</button>
            <button type="button" class="btn btn-primary dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false"><strong>Filtro</strong></button>
           

      <div *ngIf="isAddItemModalOpen" class="modal show d-block" tabindex="-1" role="dialog" style="background: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-dialog-centered modal-lg">
          <div class="modal-content">
            <div class="modal-header justify-content-center">
              <h3 class="modal-title">NOVO ITEM</h3>
            </div>
          <div class="modal-body">
              <form [formGroup]="formulario" method="POST" class="formLogin">
                  <div class="row mb-3">
                      <div class="col">
                          <label for="inputInsumoId" class="form-label">ID do Insumo</label>
                          <input formControlName="idcons" type="text" class="form-control" id="inputInsumoId" placeholder="Insira o ID do Insumo">
                      </div>
                      <div class="col">
                          <label for="inputDoacaoId" class="form-label">ID da Doação</label>
                          <input formControlName="iddoacao" type="text" class="form-control" id="inputDoacaoId" placeholder="Insira o ID da Doação">
                      </div>
                  </div>
                  <div class="row mb-3">
                      <div class="col">
                          <label for="inputQuantidade" class="form-label">Quantidade</label>
                          <input formControlName="quant" type="number" class="form-control" id="inputQuantidade" placeholder="Insira a Quantidade">
                      </div>
                      <div class="col">
                          <label for="inputDataEntrada" class="form-label">Data de Entrada</label>
                          <input formControlName="dataentrada" type="date" class="form-control" id="inputDataEntrada">
                      </div>
                  </div>
                  <div class="row mb-4">
                      <div class="col">
                          <label for="inputUnidadeMedida" class="form-label">Unidade de Medida</label>
                          <input formControlName="unidade" type="text" class="form-control" id="inputUnidadeMedida" placeholder="Informe a Unidade de Medida">
                      </div>
                      <div class="col">
                          <label for="inputDataValidade" class="form-label">Data de Validade</label>
                          <input formControlName="dataval" type="date" class="form-control" id="inputDataValidade">
                      </div>
                  </div>
              </form>
          </div>
          <div class="modal-footer justify-content-center">
              <button type="button" class="btn btn-danger" data-bs-dismiss="modal" (click)="fecharAddItemModal()">VOLTAR</button>
              <button type="submit" class="btn btn-success" id="save" (click)="confirmarAddItem()" [disabled]="formulario.invalid">SALVAR</button>
          </div>
        </div>
      </div>
    </div>
  </div>


    <div *ngIf="isRemoveItemModalOpen" class="modal show d-block" tabindex="-1" role="dialog" style="background: rgba(0,0,0,0.5);">
      <div class="modal-dialog modal-dialog-centered modal-lg">
        <div class="modal-content">
          <div class="modal-header justify-content-center">
            <h3 class="modal-title">REMOVER ITEM</h3>
          </div>
        <div class="modal-body">
          <form>
            <div class="row mb-3">
              <div class="col-md-6">
                <label for="inputInsumoId" class="form-label">ID do Insumo</label>
                <input type="text" class="form-control" id="inputInsumoId" placeholder="Insira o ID de consumo">
              </div>
              <div class="col-md-6">
                <label for="inputQuantidade" class="form-label">Quantidade</label>
                <input type="number" class="form-control" id="inputQuantidade" placeholder="Insira a quantidade">
              </div>
            </div>
            <div class="row mb-3">
              <div class="col-md-6">
                <label for="inputDataSaida" class="form-label">Data de Saida</label>
                <input type="date" class="form-control" id="inputDataSaida">
              </div>
              <div class="col-md-6">
                <label for="inputUnidadeMedida" class="form-label">Unidade de Medida</label>
                <input type="text" class="form-control" id="inputUnidadeMedida" placeholder="Informe a Unidade de Medida">
              </div>
            </div>
            <div class="mb-3">
              <label for="inputObservacoes" class="form-label">Observações</label>
              <textarea class="form-control" id="inputObservacoes" rows="3"></textarea>
            </div>
          </form>
        </div>
        <div class="modal-footer justify-content-center">
            <button type="button" class="btn btn-danger" data-bs-dismiss="modal" (click)="fecharRemoveItemModal()">VOLTAR</button>
            <!-- <button type="submit" class="btn btn-success" id="save" (click)="confirmarRemoveItem()">SALVAR</button> -->
        </div>
      </div>
    </div>
  </div>
</div>

<div *ngIf="isConfirmAddModal" class="modal show d-block"  tabindex="-1" role="dialog" style="background: rgba(0,0,0,0.5);">
  <div class="modal-dialog modal-dialog-centered modal-sm">
    <div class="modal-content text-center">
      <div class="modal-body">
        <h5 class="modal-title mb-3">Item cadastrado com sucesso!</h5>
        <img src="assets/circle-check.png" alt="Ícone de confirmação" style="width: 60px; margin-top: 10px;">
      </div>
    </div>
  </div>
</div>

<div *ngIf="isConfirmRemoveModal" class="modal show d-block"  tabindex="-1" role="dialog" style="background: rgba(0,0,0,0.5);">
  <div class="modal-dialog modal-dialog-centered modal-sm">
    <div class="modal-content text-center">
      <div class="modal-body">
        <h5 class="modal-title mb-3">Item removido com sucesso!</h5>
        <img src="assets/circle-check.png" alt="Ícone de confirmação" style="width: 60px; margin-top: 10px;">
      </div>
    </div>
  </div>
</div>
</div>

        <div class="d-flex justify-content-between align-items-center mb-2">
          <span id="result">Foram achados <strong>9</strong> itens</span>
          <div id="filter">
            <p *ngIf="!filtroSelecionado" >Nenhum filtro aplicado</p>
            <p *ngIf="filtroSelecionado">Filtra por: <a class="text-decoration-none">{{ filtroSelecionado }}</a></p>
          </div>
        </div>
        
        <div id="item-list" style="width: 100%; overflow-y: scroll; max-height: 300px;">
          

          <div class="item-card">
            <div>
              <div style="font-weight: 700;">Cenoura <span class="item-status fechado ms-2">Fechado</span></div>
            </div>
            <div class="ms-auto text-end">
              <div>Quantidade: 19x</div>
              <small>Vencimento: 12/12/2024</small>
            </div>
          </div>

          <div class="item-card">
            <div>
              <div style="font-weight: 700;">Batata<span class="item-status aberto ms-2">Fechado</span></div>
            </div>
            <div class="ms-auto text-end">
              <div>Quantidade: 29x</div>
              <small>Vencimento: 18/11/2024</small>
            </div>
          </div>

          <div class="item-card">
            <div>
              <div style="font-weight: 700;">Bolacha<span class="item-status fechado ms-2">Fechado</span></div>
            </div>
            <div class="ms-auto text-end">
              <div>Quantidade: 5x</div>
              <small>Vencimento: 25/01/2025</small>
            </div>
          </div>

          <div class="item-card">
            <div>
              <div style="font-weight: 700;">Carne Vermelha <span class="item-status fechado ms-2">Fechado</span></div>
            </div>
            <div class="ms-auto text-end">
              <div>Quantidade: 3x</div>
              <small>Vencimento: 25/11/2024</small>
            </div>
          </div>

          <div class="item-card"><div>
              <div style="font-weight: 700;">Peixe <span class="item-status aberto ms-2">Aberto</span></div>
            </div>
            <div class="ms-auto text-end">
              <div>Quantidade: 10x</div>
              <small>Vencimento: 15/09/2024</small>
            </div>
          </div>

          <div *ngIf="isModalOpen" class="modal show d-block" tabindex="-1" role="dialog" style="background: rgba(0,0,0,0.5);">
            <div class="modal-dialog modal-dialog-centered" role="document">
              <div class="modal-content">
                <div class="modal-body text-center">
                  <h5>Atenção, você está saindo da sua conta, deseja realmente continuar?</h5>
                </div>
                <div class="modal-footer d-flex justify-content-center">
                  <button routerLink="/" type="button" class="btn btn-success" style="margin-right: 35px;" id="green">Sim, desejo sair</button>
                  <button type="button" class="btn btn-danger" (click)="fecharModal()" id="red">Não, desejo ficar</button>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
  </main>
</body>

<link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-icons/1.10.0/font/bootstrap-icons.min.css" rel="stylesheet">

Nome do arquivo: frontend\src\app\pages\estoque\item-estoque.ts
Conteúdo:
export interface ItemEstoque {
    id: number;
    nome: string;
    quantidade: number;
    validade: string;
    status: string;
  }

Nome do arquivo: frontend\src\app\pages\estoque\estoque.service.ts
Conteúdo:
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { environment } from '../../../environments/enviroments';
import { ItemEstoque } from './item-estoque'; // Crie este arquivo de interface


@Injectable({
    providedIn: 'root'
})
export class EstoqueService {
    private apiUrl = `${environment.apiUrl}/api/estoque`; // URL da sua API

    constructor(private http: HttpClient) {}

    getItens(): Observable<ItemEstoque[]> {
        return this.http.get<ItemEstoque[]>(`${this.apiUrl}`);
    }

    createItem(item: any): Observable<any> {
        return this.http.post(`${this.apiUrl}/create`, item);
    }

    deleteItem(id: number): Observable<any> {
        return this.http.delete(`${this.apiUrl}/${id}`);
    }

}

Nome do arquivo: frontend\src\app\pages\home\home.component.css
Conteúdo:
@import url('https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700&family=Ubuntu:ital,wght@0,300;0,400;0,500;0,700;1,300;1,400;1,500;1,700&display=swap');

body {
    font-family: "Ubuntu", sans-serif;
    background-color: #2A455A;
    height: 100vh; 
}

#white {
    background-color: #F8F8F8;
    width: 1080px;
    height: 622px;
    position: absolute;
    left: 50%;
    top: 50%;
    transform: translate(-39%, -50%);
    display: flex;
    justify-items: center;
    align-items: center;
    row-gap: 10px;
    flex-direction: column;
    text-align: center;
    font-size: 2.5rem;
    padding-top: 120px;



}

#principal_logo {
    width: 185px;
    height: 265px;
}

#name_profile {
    font-size: 65px;

}

#logo-aside {
    width: 95px;
    height: 133px;
    transform: translate(76%, 0%);
}

.sidenav {
    height: 100%;
    width: 220px;
    position: fixed;
    z-index: 1;
    top: 0;
    left: 0;
    background-color: #2A455A;
    overflow-x: hidden;
    padding-top: 20px;
}
  
.sidenav button {
    justify-items: center;
    margin-top: 60px;
    height: 50px;
    width: 190px;
    margin-left: 25px;
    font-size: 20px;
    background-color: #2A455A;
    border-color: #2A455A;
    border-radius: 10px;
    color: white;
    padding: 0;
}

.sidenav button:hover {
    background-color: #d4d4d444;
    transition: all 0.3s ease-in-out;
}

.line {
    border-top: 1px solid #ffffff; 
    margin: 65px auto;
    margin-left: 10px;
}

#name {

    padding-left: 60px;
    padding-top: 20px;
    font-size: 14px;
    color: white;
    margin: 0;
}

#job {
    font-size: 12px;
    margin-left: 72px;
    color: white;
}

#out {
    margin-left: 180px;
    height: 27px;
    width: 30px;
    margin-bottom: 32px;
    transform: translate(-12%, -180%);
    cursor: pointer;

}

#profile {
    height: 43px;
    width: 43px;
    transform: translate(5%, -265%);
}

.main {
    margin-left: 160px;
    font-size: 28px;
    padding: 0px 10px;
}


.modal-body h5 {
    font-size: 1.5rem;
    font-weight: bold;
    color: black;
    margin-bottom: 20px;
}

.modal-footer .btn-success {
    background-color: #28a745;
    border-color: #28a745;
    font-size: 1rem;
    font-weight: bold;
    padding: 10px 20px;
}

.modal-footer .btn-danger {
    background-color: #dc3545;
    border-color: #dc3545;
    font-size: 1rem;
    font-weight: bold;
    padding: 10px 20px;
}

.modal-footer .btn-success:hover {
    background-color: #218838;
    border-color: #1e7e34;
}

.modal-footer .btn-danger:hover {
    background-color: #c82333;
    border-color: #bd2130;
}

Nome do arquivo: frontend\src\app\pages\home\home.component.spec.ts
Conteúdo:
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { HomeComponent } from './home.component';

describe('HomeComponent', () => {
  let component: HomeComponent;
  let fixture: ComponentFixture<HomeComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [HomeComponent]
    })
    .compileComponents();
    
    fixture = TestBed.createComponent(HomeComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


Nome do arquivo: frontend\src\app\pages\home\home.component.ts
Conteúdo:
import { Component, OnInit } from '@angular/core';
import { Router } from '@angular/router';
import { CommonModule } from '@angular/common';
import { HomeSerevice } from './home.service';
@Component({
  selector: 'app-home',
  templateUrl: './home.component.html',
})
export  class  HomeComponent  implements OnInit {

  isModalOpen = false;
  name: string = "";

  constructor(private homeService: HomeSerevice){}

  ngOnInit() {
    this.homeService.getName().subscribe({
      next: (response) => {
        // Ajuste para corresponder à estrutura do objeto retornado.
        this.name = response.message.username;

      },
      error: (err) => {
        console.error('Erro ao obter o nome do usuário:', err);
        this.name = 'erro';
      }
    });
  }

  abrirModal() {
    this.isModalOpen = true;
  }

  fecharModal() {
    this.isModalOpen = false;
  }

}


Nome do arquivo: frontend\src\app\pages\home\home.component.html
Conteúdo:
<body class="bg-[#2A455A] h-screen">
  <aside class="fixed top-0 left-0 w-fit h-100 bg-[#2A455A] flex flex-col items-center justify-center px-3 border-r-[1px] border-white">
    <img src="assets/logo-apae.png" alt="logo-apae" class="w-[95px] h-[133px] mb-4">
    
    <button class="w-[190px] h-[50px] mt-6 bg-[#2A455A] border-none rounded-lg text-white text-lg hover:bg-[#d4d4d444] transition duration-300" routerLink="/admin">
      ADMINISTRAÇÃO
    </button>
    
    <button class="w-[190px] h-[50px] mt-6 bg-[#2A455A] border-none rounded-lg text-white text-lg hover:bg-[#d4d4d444] transition duration-300" routerLink="/estoque">
      ESTOQUE
    </button>
    
    <button class="w-[190px] h-[50px] mt-6 bg-[#2A455A] border-none rounded-lg text-white text-lg hover:bg-[#d4d4d444] transition duration-300" routerLink="/doacao">
      DOAÇÃO
    </button>
    
    <div class="w-full border-t border-white mt-10 px-5 flex flex-col items-center">
      <p class="text-white text-sm mt-5 font-bold">{{name}}</p>
      <p class="text-white text-xs">Nutricionista</p>
      <div class="flex items-center gap-4 mt-4">
        <img src="assets/sair.png" alt="logout" class="w-7 h-7 cursor-pointer" (click)="abrirModal()">
        <img src="assets/Foto.png" alt="profile" class="w-[43px] h-[43px] rounded-full">
      </div>
    </div>
  </aside>
  
  <main class="flex flex-col items-center justify-center h-5/6 bg-[#F8F8F8] text-center px-8">
    <h1 class="text-5xl font-bold">BOM DIA, <p *ngIf="name">{{ name }}</p></h1>
    <img src="assets/logo-apae.png" alt="principal logo" class="w-[185px] h-[265px] mt-8">
  </main>
  
  <!-- Modal -->
  <div *ngIf="isModalOpen" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center">
    <div class="bg-white rounded-lg shadow-lg p-8 w-[400px]">
      <div class="text-center mb-4">
        <h5 class="text-xl font-bold">Atenção, você está saindo da sua conta, deseja realmente continuar?</h5>
      </div>
      <div class="flex justify-center gap-8">
        <button routerLink="/" class="px-5 py-2 bg-green-600 text-white font-bold rounded-lg hover:bg-green-700 transition duration-200">Sim, desejo sair</button>
        <button (click)="fecharModal()" class="px-5 py-2 bg-red-600 text-white font-bold rounded-lg hover:bg-red-700 transition duration-200">Não, desejo ficar</button>
      </div>
    </div>
  </div>
</body>


Nome do arquivo: frontend\src\app\pages\home\home.service.ts
Conteúdo:
// auth.service.ts
import { Injectable, OnInit } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Observable, throwError } from 'rxjs';
import { catchError } from 'rxjs/operators';
import { environment } from '../../../environments/enviroments'

@Injectable({
  providedIn: 'root'
})
export class HomeSerevice {

  private endPoint = `${environment.apiUrl}/api/users/` + localStorage.getItem('user');

  constructor(private http: HttpClient) {}

  getName(): Observable<any> {
    const token = localStorage.getItem('authToken')
    const headers = new HttpHeaders({
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${token}`
    });

    return this.http.get(this.endPoint, { headers }).pipe( 
      catchError((error) => {
        console.error('Login error:', error);
        return throwError(() => new Error(error.error?.message || 'Server Error'));
      })
    );

}
}

Nome do arquivo: frontend\src\app\pages\redsenha\redsenha.component.spec.ts
Conteúdo:
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { RedsenhaComponent } from './redsenha.component';

describe('RedsenhaComponent', () => {
  let component: RedsenhaComponent;
  let fixture: ComponentFixture<RedsenhaComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [RedsenhaComponent]
    })
    .compileComponents();
    
    fixture = TestBed.createComponent(RedsenhaComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


Nome do arquivo: frontend\src\app\pages\redsenha\redsenha.component.html
Conteúdo:
<body class="h-screen bg-custom-gradient flex items-center justify-center">
  <div
    class="w-1/3 max-w-screen-sm h-fit shadow-lg rounded-xl bg-blue-100 p-11 flex justify-center items-center"
  >
    <form
      [formGroup]="formulario"
      method="POST"
      class="flex flex-col items-center justify-center w-full h-100"
    >
      <h2 class="font-bold text-2xl text-black mb-4 text-center">
        Redefinição de Senha
      </h2>
      <p id="texto" class="text-center font-semibold text-gray-700 mb-4">
        Insira o código enviado por e-mail e redefina sua nova senha.
      </p>

      <input
        type="text"
        placeholder="Insira o Código"
        autofocus="true"
        class="w-full p-3 text-lg border border-gray-300 rounded-lg mb-4 focus:outline-none focus:border-green-500 transition-all duration-150"
      />

      <input
        formControlName="senha"
        type="password"
        placeholder="Digite sua nova senha"
        class="w-full p-3 text-lg border border-gray-300 rounded-lg mb-4 focus:outline-none focus:border-green-500 transition-all duration-150"
      />
      
      <input
        formControlName="confirmarSenha"
        type="password"
        placeholder="Digite novamente sua senha"
        class="w-full p-3 text-lg border border-gray-300 rounded-lg mb-4 focus:outline-none focus:border-green-500 transition-all duration-150"
      />

      <ng-container *ngIf="formulario.get('senha')?.hasError('minlength') && formulario.get('senha')?.touched; else senhasNaoIguais" >
        <p
          class="w-100 p-2 mx-auto text-center font-bold bg-red-200 text-red-800 rounded"
        >
          A senha precisa conter no mínimo 4 caracteres.
        </p>
      </ng-container>

      <ng-template  #senhasNaoIguais>
        <ng-container *ngIf="
        formulario.hasError('senhasNaoIguais') &&
        formulario.get('confirmarSenha')?.touched
      ">
          <p class="w-100 p-2 mx-auto text-center font-bold bg-red-200 text-red-800 rounded">
    
              As senhas não coincidem.
            </p>

        </ng-container>
      </ng-template>

      <div
        class="flex flex-col w-full md:flex-row gap-4 mt-4 justify-between p-3"
      >
        <input
          routerLink="/"
          type="submit"
          value="Redefinir Senha"
          class="bg-green-600 text-white font-bold transition-all duration-150 cursor-pointer h-14 w-full md:w-48 rounded-lg hover:scale-105 hover:bg-green-700 disabled:hover:scale-100 disabled:bg-gray-400 disabled:hover:bg-gray-400 hover:scale-105 disabled:cursor-not-allowed"
          [disabled]="formulario.invalid"
        />

        <button
          routerLink="/"
          type="button"
          class="bg-red-600 text-white font-bold transition-all duration-150 cursor-pointer h-14 w-full md:w-48 rounded-lg hover:scale-105 hover:bg-red-700"
        >
          Voltar à tela de login
        </button>
      </div>
    </form>
  </div>
</body>


Nome do arquivo: frontend\src\app\pages\redsenha\redsenha.component.ts
Conteúdo:
import { Component } from '@angular/core';
import { FormGroup, Validators, FormBuilder } from '@angular/forms';
import { FormControl } from '@angular/forms';


@Component({
  selector: 'app-redsenha',
  templateUrl: './redsenha.component.html',
})
export class RedsenhaComponent {
  formulario: FormGroup;

  constructor(private fb: FormBuilder) {
    // Criando o formulário com os campos senha e confirmarSenha
    this.formulario = this.fb.group(
      {
        senha: new FormControl('', [
          Validators.required,
          Validators.minLength(4)  // Validação para comprimento mínimo de 4 caracteres
        ]),
        confirmarSenha: new FormControl('', [
          Validators.required
        ])
      },
      {
        validators: this.senhasIguaisValidator  // Validação personalizada para comparar as senhas
      }
    );
  }

  // Validador personalizado para comparar as senhas
  senhasIguaisValidator(formGroup: FormGroup): { [key: string]: boolean } | null {
    const senha = formGroup.get('senha')?.value;
    const confirmarSenha = formGroup.get('confirmarSenha')?.value;

    return senha && confirmarSenha && senha !== confirmarSenha ? { senhasNaoIguais: true } : null;
  }
}


Nome do arquivo: frontend\src\app\pages\recsenha\recsenha.component.spec.ts
Conteúdo:
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { RecsenhaComponent } from './recsenha.component';

describe('RecsenhaComponent', () => {
  let component: RecsenhaComponent;
  let fixture: ComponentFixture<RecsenhaComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [RecsenhaComponent]
    })
    .compileComponents();
    
    fixture = TestBed.createComponent(RecsenhaComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


Nome do arquivo: frontend\src\app\pages\recsenha\recsenha.component.html
Conteúdo:
<body class="h-screen bg-custom-gradient flex items-center justify-center">
  <div
    class="w-1/3 max-w-screen-sm h-screen max-h-[500px] shadow-lg rounded-lg bg-blue-100 p-11 flex justify-center items-center text-lg"
  >
    <form
      [formGroup]="formulario"
      method="POST"
      class="flex flex-col items-center w-full gap-7"
    >
      <h2 class="font-bold text-2xl text-black mb-4 text-center">
        Recuperação de Senha
      </h2>
      <p id="texto" class="text-center font-semibold text-gray-700">
        Digite seu e-mail no campo abaixo e lhe enviaremos um link para
        redefini-la.
      </p>

      

      <input
        formControlName="email"
        type="email"
        placeholder="Digite seu e-mail"
        autofocus="true"
        class="w-full p-3 text-lg border border-gray-300 rounded-lg mb-4 focus:outline-none focus:border-green-500 transition-all duration-150"
      />

      @if (formulario.get('email')?.hasError('email') &&
      formulario.get('email')?.touched) {
      <p class="w-100 p-2 mx-auto text-center font-bold bg-red-200 text-red-800 rounded">
        O campo precisa conter "&#64;"
      </p>
      }

      <div
        class="gap-x-20 md:gap-y-5 flex flex-row items-center justify-between md:justify-center text-md w-100 px-4 flex-wrap"
      >
        <input
          routerLink="/redsenha"
          type="submit"
          value="Redefinir Senha"
          class="bg-green-600 text-white font-bold transition-all duration-150 cursor-pointer h-14 w-full md:w-48 rounded-lg hover:scale-105 hover:bg-green-700 disabled:hover:scale-100  disabled:bg-gray-400 disabled:hover:bg-gray-400 hover:scale-105 disabled:cursor-not-allowed"
          [disabled]="formulario.invalid"
        />

        <button
          routerLink="/"
          type="button"
          class="bg-red-600 text-white font-bold transition-all duration-150 cursor-pointer h-14 w-full md:w-48 rounded-lg hover:scale-105 hover:bg-red-700"
        >
          Voltar à tela de login
        </button>
      </div>
    </form>
  </div>
</body>


Nome do arquivo: frontend\src\app\pages\recsenha\recsenha.component.ts
Conteúdo:
import { Component } from '@angular/core';
import { FormGroup, Validators } from '@angular/forms';
import { FormControl } from '@angular/forms';

@Component({
  selector: 'app-recsenha',
  templateUrl: './recsenha.component.html',
})
export class RecsenhaComponent {
  formulario = new FormGroup({
    email: new FormControl ('', [Validators.required, Validators.email]),
  })
}


Nome do arquivo: frontend\src\app\pages\login\login.component.html
Conteúdo:
<body class="h-screen bg-custom-gradient flex items-center justify-center">
  <div
    class="w-1/3 max-w-screen-sm h-fit shadow-lg rounded-xl bg-blue-100 text-xl p-11"
  >
    <form
      [formGroup]="formulario"
      (ngSubmit)="onSubmit()"
      class="flex flex-col items-center justify-center h-100"
    >
      <img src="assets/logo-apae.png" alt="logo-apae" class="w-40 h-56 mb-5" />
      
      <input
        formControlName="email"
        type="email"
        placeholder="Digite seu e-mail"
        class="w-100 p-3 text-md border border-gray-300 rounded-lg mb-3 focus:outline-none focus:border-green-500 transition-all duration-150"
      />
      
      <ng-container *ngIf="formulario.get('email')?.hasError('email') && formulario.get('email')?.touched">
        <p
        
        class="w-100 p-2 mx-auto text-center font-bold bg-red-200 text-red-800 rounded"
      >
        O campo precisa conter  "&#64;"
      </p>
      </ng-container>
    

      <input
        formControlName="senha"
        type="password"
        placeholder="Digite sua senha"
        class="w-100 p-3 text-md border border-gray-300 rounded-lg mb-3 focus:outline-none focus:border-green-500 transition-all duration-150"
      />
      
        <p  *ngIf="formulario.get('senha')?.hasError('senha') && formulario.get('senha')?.touched"
        class="w-100 p-2 mx-auto text-center font-bold bg-red-200 text-red-800 rounded"
      >
        O campo precisa conter  "&#64;"
      </p>

        <p
    *ngIf="erroMensagem"
    class="w-100 p-2 mx-auto text-center font-bold bg-red-200 text-red-800 rounded mb-3"
  >
    {{ erroMensagem }}
    </p>

      <button
        type="submit"
        class="bg-green-600 text-white font-bold transition-all duration-150 cursor-pointer h-10 w-32 mx-auto rounded-lg hover:scale-105 hover:bg-green-700"
        [disabled]="formulario.invalid"
      >
        Login
      </button>
      
      <a
        routerLink="/recsenha"
        id="forget"
        class="text-center text-black font-bold mt-6"
      >
        Esqueci minha senha
      </a>
    </form>
  </div>
</body>


Nome do arquivo: frontend\src\app\pages\login\auth.service.ts
Conteúdo:
// auth.service.ts
import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Observable, throwError } from 'rxjs';
import { catchError } from 'rxjs/operators';
import { environment } from '../../../environments/enviroments'

@Injectable({
  providedIn: 'root'
})
export class AuthService {
    
  private endPoint = `${environment.apiUrl}/api/users/login`;

  constructor(private http: HttpClient) { }

  login(email: string, password: string): Observable<any> {
    const body = { email, password };
    const headers = new HttpHeaders({
      'Content-Type': 'application/json'
    });

    return this.http.post(this.endPoint, body, { headers }).pipe(
      catchError((error) => {
        console.error('Login error:', error);
        return throwError(() => new Error(error.error?.message || 'Server Error'));
      })
    );
  }
}


Nome do arquivo: frontend\src\app\pages\login\login.component.ts
Conteúdo:
// login.component.ts
import { Component } from '@angular/core';
import { FormGroup, Validators, FormControl } from '@angular/forms';
import { AuthService } from './auth.service';
import { Router } from '@angular/router';

@Component({
  selector: 'app-login',
  templateUrl: './login.component.html',
})

export class LoginComponent {

  formulario: FormGroup;
  erroMensagem: string = '';

  private tokenKey = 'authToken'; // Chave para armazenar o token no localStorage

  constructor(private authService: AuthService, private router: Router) {
    this.formulario = new FormGroup({
      email: new FormControl('', [Validators.required, Validators.email]),
      senha: new FormControl('', [Validators.required, Validators.minLength(4)]),
    });
  }


  onSubmit() {
    if (this.formulario.valid) {
      const email = this.formulario.get('email')?.value as string;
      const senha = this.formulario.get('senha')?.value as string;

      this.authService.login(email, senha).subscribe({
        next: (response) => {
          // Sucesso no login, redireciona para a página principal
          if (response.token) {
          this.setToken(response.token); // Salva o token
          this.setUser(response.id)
        }
        
          this.erroMensagem = '';
          this.router.navigate(['/home']);
        },
        error: (err) => {
          this.erroMensagem = err.message || 'Ocorreu um erro inesperado.';
        }
      });
    }
  }

  setToken(token: any) {
    localStorage.setItem(this.tokenKey, token);  
}

setUser(obj: any){
  localStorage.setItem('user', obj)
}


}
